{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IShogunNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\r\n\r\ninterface IShogunNFT is IERC721Enumerable {\r\n    function lockToken(uint256[] memory _tokenIds) external;\r\n\r\n    function unlockToken(uint256[] memory _tokenIds) external;\r\n\r\n    function seppuku(uint256 _tokenId) external;\r\n\r\n    function walletOfOwner(address _owner)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/ShogunStakingV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\";\r\n\r\nimport \"./interfaces/IShogunToken.sol\";\r\nimport \"./interfaces/IShogunNFT.sol\";\r\n\r\n/*  _____ _                             _____                                 _     \r\n  / ____| |                            / ____|                               (_)    \r\n | (___ | |__   ___   __ _ _   _ _ __ | (___   __ _ _ __ ___  _   _ _ __ __ _ _ ___ \r\n  \\___ \\| '_ \\ / _ \\ / _` | | | | '_ \\ \\___ \\ / _` | '_ ` _ \\| | | | '__/ _` | / __|\r\n  ____) | | | | (_) | (_| | |_| | | | |____) | (_| | | | | | | |_| | | | (_| | \\__ \\\r\n |_____/|_| |_|\\___/ \\__, |\\__,_|_| |_|_____/ \\__,_|_| |_| |_|\\__,_|_|  \\__,_|_|___/\r\n                      __/ |                                                         \r\n                     |___/    \r\n*/\r\n\r\ncontract ShogunStakingV2 is\r\n    AccessControlUpgradeable,\r\n    ReentrancyGuardUpgradeable,\r\n    ERC721HolderUpgradeable\r\n{\r\n    using SafeMathUpgradeable for uint256;\r\n    using CountersUpgradeable for CountersUpgradeable.Counter;\r\n\r\n    struct Family {\r\n        address familyOwner;\r\n        uint256 lastClaim;\r\n        uint256 guildMultiplier;\r\n        uint256 medallionMultiplier;\r\n        uint256 shogunBonus;\r\n        uint256[] shogunIds;\r\n        TrainState trainState;\r\n    }\r\n\r\n    struct GuildCounter {\r\n        uint8 justiceCount;\r\n        uint8 courageCount;\r\n        uint8 compassionCount;\r\n        uint8 respectCount;\r\n        uint8 integrityCount;\r\n        uint8 honourCount;\r\n        uint8 dutyCount;\r\n        uint8 restraintCount;\r\n    }\r\n\r\n    enum TrainState {\r\n        IN_PROGRESS,\r\n        ENDED\r\n    }\r\n\r\n    IShogunNFT public SS;\r\n    IShogunToken public SHO;\r\n\r\n    uint256 public baseReward;\r\n    uint256 private timescale;\r\n\r\n    uint256[] public countMultipliers;\r\n    uint256 public guildMultiplier;\r\n    uint256 public medallionMultiplier;\r\n    uint256 public shogunBonus;\r\n    mapping(uint256 => bool) public isLegendarySamurai;\r\n    mapping(address => uint256) public medallionCount;\r\n    uint256 public startDate;\r\n\r\n    bytes public guilds;\r\n\r\n    mapping(uint256 => Family) public families; // Map id to Family\r\n    mapping(address => uint256[]) public userFamilies; // Maps user address to familyId\r\n    mapping(uint256 => uint256) public onTraining; // Maps tokenId to familyId (0 = not training) (No double training)\r\n    mapping(address => uint256) public bonusSHO;\r\n\r\n    // Private Variables\r\n    CountersUpgradeable.Counter private _familyId;\r\n\r\n    // Reserve Storage\r\n    uint256[50] private ______gap;\r\n\r\n    address public unstaker;\r\n    bool public trainingEnabled;\r\n    mapping(uint256 => uint256) public lastClaim;\r\n\r\n    // Events\r\n    event TrainingStarted(\r\n        address indexed user,\r\n        uint256 trainId,\r\n        uint256[] shogunIds,\r\n        uint256 startTime\r\n    );\r\n    event TrainingEnded(\r\n        address indexed user,\r\n        uint256 trainId,\r\n        uint256[] shogunIds,\r\n        uint256 endTime\r\n    );\r\n    event RewardClaimed(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 claimTime\r\n    );\r\n    event BonusClaimed(address indexed user, uint256 amount, uint256 claimTime);\r\n\r\n    // Modifiers\r\n    function __ShogunStaking_init(\r\n        address ss,\r\n        uint256 _baseReward,\r\n        address admin\r\n    ) public initializer {\r\n        __AccessControl_init();\r\n        __ReentrancyGuard_init();\r\n\r\n        // Constructor init\r\n        _setupRole(DEFAULT_ADMIN_ROLE, admin); // To revoke access after functions are set\r\n        baseReward = _baseReward;\r\n        SS = IShogunNFT(ss);\r\n        countMultipliers = [10000, 10100, 10300];\r\n        guildMultiplier = 200;\r\n        medallionMultiplier = 10;\r\n        shogunBonus = 800; // 8% for shogun bonus\r\n        timescale = 1 days;\r\n        startDate = block.timestamp;\r\n    }\r\n\r\n    // ------------------------- USER FUNCTION ---------------------------\r\n\r\n    /// @dev Start Multiple Training Sessions\r\n    function startTrainingMultiple(uint256[][] memory shogunIdsArray) public {\r\n        for (uint256 i = 0; i < shogunIdsArray.length; i++) {\r\n            startTraining(shogunIdsArray[i]);\r\n        }\r\n    }\r\n\r\n    /// @dev Start train\r\n    /// @notice Sends SSs (max. 5) on a train, SSs of the same Guild and if rare will get a bonus multiplier!\r\n    function startTraining(uint256[] memory shogunIds) public {\r\n        require(trainingEnabled, \"ShogunStaking: Training is disabled!\");\r\n\r\n        require(\r\n            areAvailiable(shogunIds),\r\n            \"ShogunStaking: One or More shoguns are already training\"\r\n        );\r\n\r\n        require(\r\n            areOwned(shogunIds),\r\n            \"ShogunStaking: One or More shoguns are not owned by you!\"\r\n        );\r\n\r\n        require(shogunIds.length <= 3, \"ShogunStaking: Maximum of 3 SS only!\");\r\n        require(shogunIds.length > 0, \"ShogunStaking: At least 1 SS required!\");\r\n\r\n        _familyId.increment();\r\n        SS.lockToken(shogunIds);\r\n\r\n        for (uint256 i = 0; i < shogunIds.length; i++) {\r\n            onTraining[shogunIds[i]] = _familyId.current();\r\n        }\r\n\r\n        uint256 _guildMultiplier;\r\n        uint256 _medallionMultiplier;\r\n        uint256 _shogunBonus;\r\n\r\n        (_guildMultiplier, _medallionMultiplier) = calculateMultipliers(\r\n            shogunIds\r\n        );\r\n\r\n        _shogunBonus = calculateShogunBonus(shogunIds);\r\n\r\n        Family memory _family = Family(\r\n            msg.sender, // address familyOwner\r\n            block.timestamp,\r\n            _guildMultiplier, // uint256 GuildMultiplier;\r\n            _medallionMultiplier,\r\n            _shogunBonus,\r\n            shogunIds, // uint256[] shogunIds;\r\n            TrainState.IN_PROGRESS // TrainState trainState;\r\n        );\r\n\r\n        families[_familyId.current()] = _family;\r\n        userFamilies[msg.sender].push(_familyId.current());\r\n\r\n        emit TrainingStarted(\r\n            msg.sender,\r\n            _familyId.current(),\r\n            shogunIds,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function setMedallionCount(\r\n        address[] memory users,\r\n        uint256[] memory quantities\r\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(\r\n            users.length == quantities.length,\r\n            \"ShogunStaking: User length and Quantity does not match\"\r\n        );\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            medallionCount[users[i]] = quantities[i];\r\n        }\r\n    }\r\n\r\n    /// @dev Claim SHO reward for given family Id\r\n    function claimRewards(uint256 tokenId) public nonReentrant {\r\n        // check if token belongs to owner\r\n        require(\r\n            SS.ownerOf(tokenId) == msg.sender,\r\n            \"ShogunStaking: Claimant is not the owner!\"\r\n        );\r\n\r\n        uint256 rewards = calculateRewards(tokenId);\r\n        lastClaim[tokenId] = block.timestamp;\r\n\r\n        SHO.mint(msg.sender, rewards);\r\n    }\r\n\r\n    function claimRewardsMulti() public nonReentrant {\r\n        uint256[] memory tokenIds = SS.walletOfOwner(msg.sender);\r\n        uint256 totalRewards = 0;\r\n        for (uint256 i; i < tokenIds.length; i++) {\r\n            // check if token belongs to owner\r\n\r\n            require(\r\n                SS.ownerOf(tokenIds[i]) == msg.sender,\r\n                \"ShogunStaking: Claimant is not the owner!\"\r\n            );\r\n            totalRewards += calculateRewards(tokenIds[i]);\r\n            lastClaim[tokenIds[i]] = block.timestamp;\r\n        }\r\n\r\n        SHO.mint(msg.sender, totalRewards);\r\n    }\r\n\r\n    /// @dev Lets user claim bonus SHO\r\n    function claimBonusSHO() public nonReentrant {\r\n        uint256 claimAmount = bonusSHO[msg.sender];\r\n        require(\r\n            claimAmount > 0,\r\n            \"ShogunStaking: User does not have Bonus SHO Tokens to claim\"\r\n        );\r\n        bonusSHO[msg.sender] = 0;\r\n        SHO.transfer(msg.sender, claimAmount);\r\n        emit BonusClaimed(msg.sender, claimAmount, block.timestamp);\r\n    }\r\n\r\n    /// @dev Claim tokens and leave train\r\n    /// @notice End train for SSs. You will stop acumulating SHO.\r\n    function endTraining(uint256 trainId) public {\r\n        require(trainingEnabled, \"ShogunStaking: Training is disabled!\");\r\n        // Only Family Owner\r\n        require(\r\n            msg.sender == families[trainId].familyOwner ||\r\n                msg.sender == unstaker,\r\n            \"ShogunStaking: Not the owner of the family\"\r\n        );\r\n        // Must be training state\r\n        require(\r\n            families[trainId].trainState == TrainState.IN_PROGRESS,\r\n            \"ShogunStaking: Training already Ended\"\r\n        );\r\n\r\n        // Distribute Remaining Rewards\r\n        claimRewards(trainId);\r\n\r\n        // Unlock Tokens\r\n        SS.unlockToken(families[trainId].shogunIds);\r\n\r\n        // Change Family State such that further claims cannot be made\r\n        families[trainId].trainState = TrainState.ENDED;\r\n\r\n        uint256[] memory shogunIds = families[trainId].shogunIds;\r\n\r\n        for (uint256 i = 0; i < shogunIds.length; i++) {\r\n            onTraining[shogunIds[i]] = 0;\r\n        }\r\n\r\n        emit TrainingEnded(\r\n            msg.sender,\r\n            trainId,\r\n            families[trainId].shogunIds,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /// @dev Claim tokens and leave train\r\n    /// @notice End train for SSs. You will stop acumulating SHO.\r\n    function endMultipleTraining(uint256[] memory trainIds) public {\r\n        for (uint256 i = 0; i < trainIds.length; i++) {\r\n            endTraining(trainIds[i]);\r\n        }\r\n    }\r\n\r\n    // ----------------------- View FUNCTIONS -----------------------\r\n\r\n    /// @dev Retrieves Count multiplier\r\n    function getCountMultiplier(uint256 guildCount, bool sameGuild)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (sameGuild) {\r\n            return countMultipliers[guildCount - 1] + guildMultiplier;\r\n        } else {\r\n            return countMultipliers[guildCount - 1];\r\n        }\r\n    }\r\n\r\n    /// @dev Retrieves Rare multiplier\r\n    function getTotalMedallionMultiplier(address user)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return medallionMultiplier.mul(medallionCount[user]);\r\n    }\r\n\r\n    /// @dev Calculates guild Multiplier based on tokenIds\r\n    function calculateMultipliers(uint256[] memory _tokenIds)\r\n        internal\r\n        view\r\n        returns (uint256 _guildMultiplier, uint256 _medallionMultiplier)\r\n    {\r\n        uint8[8] memory _guildCounter = [0, 0, 0, 0, 0, 0, 0, 0];\r\n        uint8 maxCount = 0;\r\n        bool _sameGuild;\r\n\r\n        // Count SS per guild\r\n        for (uint8 i = 0; i < _tokenIds.length; i++) {\r\n            _guildCounter[getGuild(_tokenIds[i]) - 1] += 1;\r\n        }\r\n\r\n        // Find Maximum Count and Index of Max Count\r\n        for (uint8 i = 0; i < _guildCounter.length; i++) {\r\n            if (_guildCounter[i] > maxCount) {\r\n                maxCount = _guildCounter[i];\r\n            }\r\n        }\r\n\r\n        if (maxCount == 3) {\r\n            _sameGuild = true;\r\n        }\r\n\r\n        _guildMultiplier = getCountMultiplier(_tokenIds.length, _sameGuild);\r\n        _medallionMultiplier = getTotalMedallionMultiplier(msg.sender);\r\n    }\r\n\r\n    /// @dev Caluclate rewards for given Family Id\r\n    function calculateRewards(uint256 tokenId)\r\n        public\r\n        view\r\n        returns (uint256 rewardAmount)\r\n    {\r\n        uint256 userLastClaim = lastClaim[tokenId];\r\n        if (userLastClaim < startDate) {\r\n            userLastClaim = startDate;\r\n        }\r\n\r\n        if (isLegendarySamurai[tokenId] == true) {\r\n            rewardAmount =\r\n                (baseReward * 2 * (block.timestamp - userLastClaim)) /\r\n                1 days;\r\n        } else {\r\n            rewardAmount =\r\n                (baseReward * (block.timestamp - userLastClaim)) /\r\n                1 days;\r\n        }\r\n    }\r\n\r\n    function calculateRewardsMulti(uint256[] memory tokenIds)\r\n        public\r\n        view\r\n        returns (uint256 rewardAmount)\r\n    {\r\n        for (uint256 i; i < tokenIds.length; i++) {\r\n            rewardAmount += calculateRewards(tokenIds[i]);\r\n        }\r\n    }\r\n\r\n    function calculateShogunBonus(uint256[] memory shogunIds)\r\n        internal\r\n        view\r\n        returns (uint256 out)\r\n    {\r\n        for (uint256 i = 0; i < shogunIds.length; i++) {\r\n            if (isLegendarySamurai[shogunIds[i]] == true) {\r\n                out += shogunBonus;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Determines if the tokenIds are availiable for training\r\n    function areAvailiable(uint256[] memory tokenIds)\r\n        public\r\n        view\r\n        returns (bool out)\r\n    {\r\n        out = true;\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            if (onTraining[tokenIds[i]] > 0) {\r\n                out = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Determines if the all tokenIds are owned by msg sneder\r\n    function areOwned(uint256[] memory tokenIds)\r\n        public\r\n        view\r\n        returns (bool out)\r\n    {\r\n        out = true;\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            if (SS.ownerOf(tokenIds[i]) != msg.sender) {\r\n                out = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getUserFamilies(address user)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        return userFamilies[user];\r\n    }\r\n\r\n    function getFamily(uint256 trainId) public view returns (Family memory) {\r\n        return families[trainId];\r\n    }\r\n\r\n    function getGuild(uint256 tokenId) public view returns (uint8) {\r\n        return uint8(guilds[tokenId - 1]);\r\n    }\r\n\r\n    // ---------------------- ADMIN FUNCTIONS -----------------------\r\n\r\n    function setBaseReward(uint256 _amount)\r\n        public\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        baseReward = _amount;\r\n    }\r\n\r\n    function setCountMultiplier(uint256[] memory _countMultipliers)\r\n        public\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        countMultipliers = _countMultipliers;\r\n    }\r\n\r\n    function setGuildMultiplier(uint256 _guildMultiplier)\r\n        public\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        guildMultiplier = _guildMultiplier;\r\n    }\r\n\r\n    function setMedallionMultiplier(uint256 _medallionMultiplier)\r\n        public\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        medallionMultiplier = _medallionMultiplier;\r\n    }\r\n\r\n    function setLegendaryShoguns(\r\n        uint256[] memory shogunIds,\r\n        bool[] memory flags\r\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        for (uint256 i = 0; i < shogunIds.length; i++) {\r\n            isLegendarySamurai[shogunIds[i]] = flags[i];\r\n        }\r\n    }\r\n\r\n    function setShogunBonus(uint256 _shogunBonus)\r\n        public\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        shogunBonus = _shogunBonus;\r\n    }\r\n\r\n    /// @dev Set bonus SHO Tokens to be claimed\r\n    function setBonusSHO(address[] memory addresses, uint256[] memory amounts)\r\n        public\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        require(\r\n            addresses.length == amounts.length,\r\n            \"ShogunStaking: To and amount length not matching\"\r\n        );\r\n        uint256 totalAmount;\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            bonusSHO[addresses[i]] = amounts[i];\r\n            totalAmount += amounts[i];\r\n        }\r\n\r\n        // Mint total bonus sho to contract\r\n        SHO.mint(address(this), totalAmount);\r\n    }\r\n\r\n    /// @dev Storing Guild Metadata as 1 byte hexes on a byte for gas optimization\r\n    function updateGuilds(bytes calldata _guilds)\r\n        public\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        guilds = _guilds;\r\n    }\r\n\r\n    function setSHOToken(address sho) public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        SHO = IShogunToken(sho);\r\n    }\r\n\r\n    function setTimeScale(uint256 _newTimescale)\r\n        public\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        timescale = _newTimescale;\r\n    }\r\n\r\n    /// @dev Airdrop SHO Tokens out of contract\r\n    function airdrop(address[] memory to, uint256[] memory amount)\r\n        public\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        require(\r\n            to.length == amount.length,\r\n            \"ShogunStaking: To and amount length not matching\"\r\n        );\r\n        for (uint256 i = 0; i < to.length; i++) {\r\n            SHO.mint(to[i], amount[i]);\r\n        }\r\n    }\r\n\r\n    function setUnstaker(address _unstaker)\r\n        public\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        unstaker = _unstaker;\r\n    }\r\n\r\n    function removeUnstaker() public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        unstaker = address(0);\r\n    }\r\n\r\n    function enableTraining(bool training) public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        trainingEnabled = training;\r\n    }\r\n\r\n    function getFamilyCount() public view returns (uint256) {\r\n        return _familyId.current();\r\n    }\r\n\r\n    function getFamilyStatus(uint256 familyId)\r\n        public\r\n        view\r\n        returns (TrainState)\r\n    {\r\n        return families[familyId].trainState;\r\n    }\r\n\r\n    function getShogunsOfFamily(uint256 familyId)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        return families[familyId].shogunIds;\r\n    }\r\n\r\n    function getOwnerOfFamily(uint256 familyId) public view returns (address) {\r\n        return families[familyId].familyOwner;\r\n    }\r\n\r\n    function unlockShogunNFTs(uint256[] memory shogunIds)\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        // Unlock Tokens\r\n        SS.unlockToken(shogunIds);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary CountersUpgradeable {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721ReceiverUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721HolderUpgradeable is Initializable, IERC721ReceiverUpgradeable {\n    function __ERC721Holder_init() internal onlyInitializing {\n    }\n\n    function __ERC721Holder_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/interfaces/IShogunToken.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface IShogunToken is IERC20 {\r\n    function updateRewardOnMint(address _user, uint256 _amount) external;\r\n\r\n    function updateReward(address _from, address _to) external;\r\n\r\n    function getReward(address _to) external;\r\n\r\n    function burn(address _from, uint256 _amount) external;\r\n\r\n    function mint(address to, uint256 amount) external;\r\n\r\n    function getTotalClaimable(address _user) external view returns (uint256);\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/ShogunStakingPolygon.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\nimport \"./interfaces/IShogunToken.sol\";\r\n\r\ncontract ShogunStakingPolygon is AccessControlUpgradeable, ReentrancyGuardUpgradeable { \r\n    using SafeERC20 for IShogunToken;\r\n\r\n    IShogunToken public SHO;\r\n\r\n    uint256 public startDate;\r\n\r\n    mapping(uint256 => uint256) public claimedTimes;\r\n\r\n    struct ClaimRequest {\r\n        address staker;\r\n        uint256[] nftIds;\r\n    }\r\n    mapping(bytes32 => ClaimRequest) public requests;\r\n    mapping(address => uint256) public nonces;\r\n\r\n    //events\r\n    event SubmitRequest(bytes32 requestId, address indexed owner, uint256[] tokenIds);\r\n    event Claim(uint256[] tokenIds, uint256 amount);\r\n\r\n    function __ShogunStakingPolygon_init(\r\n        address _admin,\r\n        address _SHO\r\n    ) public initializer {\r\n        __AccessControl_init();\r\n        __ReentrancyGuard_init();\r\n\r\n        // Constructor init\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin); // To revoke access after functions are set\r\n\r\n        SHO = IShogunToken(_SHO);\r\n        startDate = block.timestamp;\r\n    }\r\n\r\n    /// @dev emit event to verify claim request\r\n    function _submitRequest(\r\n        uint256[] memory _tokenIds, \r\n        address _account\r\n    ) private returns (bytes32) {\r\n        bytes32 requestId = keccak256(abi.encodePacked(_account, _tokenIds, ++nonces[msg.sender]));\r\n        requests[requestId] = ClaimRequest(\r\n            _account,\r\n            _tokenIds\r\n        );\r\n\r\n        emit SubmitRequest(requestId, _account, _tokenIds);\r\n        return requestId;\r\n    }\r\n\r\n    /// @dev Claim SHO reward for verified request\r\n    function confirmRequest(bytes32 _requestId) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        ClaimRequest memory req = requests[_requestId];\r\n        uint256[] memory tokenIds = req.nftIds;\r\n        uint256 reward = calculateRewards(tokenIds);\r\n\r\n        // TODO check `safeTranserFrom` \r\n        SHO.safeTransfer(req.staker, reward);\r\n\r\n        for (uint256 i; i < tokenIds.length; i++) {\r\n            claimedTimes[tokenIds[i]] = block.timestamp;\r\n        }\r\n\r\n        delete requests[_requestId];\r\n\r\n        emit Claim(tokenIds, reward);\r\n    }\r\n\r\n    /// @dev Caluclate rewards for given token Ids\r\n    function calculateRewards(uint256[] memory tokenIds) public view returns (uint256 rewardAmount) {\r\n        for (uint256 i; i < tokenIds.length; i++) {\r\n            rewardAmount += calculateRewardByTokenId(tokenIds[i]);\r\n        }\r\n    }\r\n\r\n    function calculateRewardByTokenId(uint256 _tokenId) private view returns (uint256) {\r\n        uint256 userLastClaim = claimedTimes[_tokenId];\r\n        if (userLastClaim < startDate) {\r\n            userLastClaim = startDate;\r\n        }\r\n        // TODO check offset\r\n        return (block.timestamp - userLastClaim) / 1 hours * 10 ** 18 / 24;\r\n    }\r\n\r\n    function claimRewards(uint256[] memory _tokenIds) external {\r\n        _submitRequest(_tokenIds, msg.sender);\r\n    }\r\n\r\n    function setSHOToken(address _sho) public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        SHO = IShogunToken(_sho);\r\n    }\r\n\r\n}"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "contracts/Sacrifice.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\n\r\nimport \"./interfaces/IShogunNFT.sol\";\r\n\r\ncontract Sacrifice is Ownable, ReentrancyGuard, Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    IShogunNFT public shogunNFT;\r\n    address public vault; // holds all unrevealed Samurais\r\n\r\n    uint256 public revealedCount;\r\n\r\n    // allows transactiones from only externally owned account (cannot be from smart contract)\r\n    modifier onlyEOA() {\r\n        require(msg.sender == tx.origin, \"SHOGUN: Only EOA\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _shogunNFT, address _vault) {\r\n        shogunNFT = IShogunNFT(_shogunNFT);\r\n        vault = _vault;\r\n        _pause();\r\n    }\r\n\r\n    function sacrifice(uint256 tokenId)\r\n        external\r\n        whenNotPaused\r\n        onlyEOA\r\n        nonReentrant\r\n    {\r\n        require(\r\n            shogunNFT.isApprovedForAll(vault, address(this)),\r\n            \"SHOGUN: vault is locked\"\r\n        );\r\n        require(\r\n            shogunNFT.balanceOf(vault) > 0,\r\n            \"SHOGUN: no more samurais available\"\r\n        );\r\n        require(\r\n            tokenId <= revealedCount,\r\n            \"SHOGUN: cannot sacrifice unrevealed samurai\"\r\n        );\r\n        uint256 newTokenId = shogunNFT.tokenOfOwnerByIndex(vault, 0);\r\n        shogunNFT.seppuku(tokenId);\r\n        shogunNFT.safeTransferFrom(vault, msg.sender, newTokenId);\r\n    }\r\n\r\n    //*************** OWNER FUNCTIONS ******************//\r\n    function setPaused(bool _state) external onlyOwner {\r\n        if (_state) {\r\n            _pause();\r\n        } else {\r\n            _unpause();\r\n        }\r\n    }\r\n\r\n    function setRevealedCount(uint256 _state) external onlyOwner {\r\n        revealedCount = _state;\r\n    }\r\n\r\n    function setVault(address _vault) external onlyOwner {\r\n        vault = _vault;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/ShogunNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0 <0.9.0;\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\nimport \"./interfaces/IShogunToken.sol\";\r\n\r\n/*  _____ _                             _____                                 _     \r\n  / ____| |                            / ____|                               (_)    \r\n | (___ | |__   ___   __ _ _   _ _ __ | (___   __ _ _ __ ___  _   _ _ __ __ _ _ ___ \r\n  \\___ \\| '_ \\ / _ \\ / _` | | | | '_ \\ \\___ \\ / _` | '_ ` _ \\| | | | '__/ _` | / __|\r\n  ____) | | | | (_) | (_| | |_| | | | |____) | (_| | | | | | | |_| | | | (_| | \\__ \\\r\n |_____/|_| |_|\\___/ \\__, |\\__,_|_| |_|_____/ \\__,_|_| |_| |_|\\__,_|_|  \\__,_|_|___/\r\n                      __/ |                                                         \r\n                     |___/    \r\n*/\r\ncontract ShogunNFT is ERC721Enumerable, Ownable {\r\n  using SafeMath for uint256;\r\n  using Strings for uint256;\r\n  using ECDSA for bytes32;\r\n\r\n  IShogunToken public SHOGUN_TOKEN;\r\n\r\n  address payable public treasury;\r\n  address public stakingContractAddress;\r\n  address private signerAddressPublic;\r\n  address private signerAddressPresale;\r\n\r\n  string public baseURI;\r\n  string public notRevealedUri;\r\n\r\n  uint256 public cost = 0.08 ether;\r\n  uint256 public maxSupply = 8888;\r\n  uint256 public maxMintPerTxn = 4; // maximum number of mint per transaction\r\n  uint256 public nftPerAddressLimitPublic = 8; // maximum number of mint per wallet for public sale\r\n  uint256 public nftPerAddressLimitPresale = 2; // maximum number of mint per wallet for presale\r\n  uint256 public nameChangePrice = 300 ether;\r\n\r\n  uint256 public presaleWindow = 24 hours; // 24 hours presale period\r\n  uint256 public presaleStartTime = 1634342400; // 16th October 0800 SGT\r\n  uint256 public publicSaleStartTime = 1634443200; // 17thth October 1200 SGT\r\n\r\n  bool public paused = false;\r\n  bool public revealed = false;\r\n  mapping(uint256 => string) public shogunName;\r\n\r\n  // manual toggle for presale and public sale //\r\n  bool public presaleOpen = false;\r\n  bool public publicSaleOpen = false;\r\n\r\n  // private variables //\r\n  mapping(uint256 => bool) private _isLocked;\r\n  mapping(address => bool) public whitelistedAddresses; // all address of whitelisted OGs\r\n  mapping(address => uint256) private presaleAddressMintedAmount; // number of NFT minted for each wallet during presale\r\n  mapping(address => uint256) private publicAddressMintedAmount; // number of NFT minted for each wallet during public sale\r\n  mapping(bytes => bool) private _nonceUsed; // nonce was used to mint already\r\n\r\n  // allows transactiones from only externally owned account (cannot be from smart contract)\r\n  modifier onlyEOA() {\r\n    require(msg.sender == tx.origin, \"SHOGUN: Only EOA\");\r\n    _;\r\n  }\r\n\r\n  // allow transactions only from staking Contract address\r\n  modifier onlyStakingContract() {\r\n    require(\r\n      msg.sender == stakingContractAddress,\r\n      \"SHOGUN: Only callable from staking contract\"\r\n    );\r\n    _;\r\n  }\r\n\r\n  constructor(\r\n    string memory _name,\r\n    string memory _symbol,\r\n    string memory _initBaseURI, // \"\"\r\n    string memory _notRevealedUri, // default unrevealed IPFS\r\n    address _signerAddressPresale,\r\n    address _signerAddressPublic,\r\n    address _treasury\r\n  ) ERC721(_name, _symbol) {\r\n    setBaseURI(_initBaseURI);\r\n    notRevealedUri = _notRevealedUri;\r\n    setSignerAddressPresale(_signerAddressPresale);\r\n    setSignerAddressPublic(_signerAddressPublic);\r\n    treasury = payable(_treasury);\r\n  }\r\n\r\n  // dev team mint\r\n  function devMint(uint256 _mintAmount) public onlyEOA onlyOwner {\r\n    require(!paused); // contract is not paused\r\n    uint256 supply = totalSupply(); // get current mintedAmount\r\n    require(\r\n      supply + _mintAmount <= maxSupply,\r\n      \"SHOGUN: total mint amount exceeded supply, try lowering amount\"\r\n    );\r\n    for (uint256 i = 1; i <= _mintAmount; i++) {\r\n      _safeMint(msg.sender, supply + i);\r\n    }\r\n  }\r\n\r\n  // public sale\r\n  function publicMint(\r\n    bytes memory nonce,\r\n    bytes memory signature,\r\n    uint256 _mintAmount\r\n  ) public payable onlyEOA {\r\n    require(!paused);\r\n    require(\r\n      (isPublicSaleOpen() || publicSaleOpen),\r\n      \"SHOGUN: public sale has not started\"\r\n    );\r\n    require(!_nonceUsed[nonce], \"SHOGUN: nonce was used\");\r\n    require(\r\n      isSignedBySigner(msg.sender, nonce, signature, signerAddressPublic),\r\n      \"invalid signature\"\r\n    );\r\n    uint256 supply = totalSupply();\r\n    require(\r\n      publicAddressMintedAmount[msg.sender] + _mintAmount <=\r\n        nftPerAddressLimitPublic,\r\n      \"SHOGUN: You have exceeded max amount of mints\"\r\n    );\r\n    require(\r\n      _mintAmount <= maxMintPerTxn,\r\n      \"SHOGUN: exceeded max mint amount per transaction\"\r\n    );\r\n    require(\r\n      supply + _mintAmount <= maxSupply,\r\n      \"SHOGUN: total mint amount exceeded supply, try lowering amount\"\r\n    );\r\n\r\n    (bool success, ) = treasury.call{ value: msg.value }(\"\"); // forward amount to treasury wallet\r\n    require(success, \"SHOGUN: not able to forward msg value to treasury\");\r\n\r\n    require(\r\n      msg.value == cost * _mintAmount,\r\n      \"SHOGUN: not enough ether sent for mint amount\"\r\n    );\r\n\r\n    for (uint256 i = 1; i <= _mintAmount; i++) {\r\n      publicAddressMintedAmount[msg.sender]++;\r\n      _safeMint(msg.sender, supply + i);\r\n    }\r\n    _nonceUsed[nonce] = true;\r\n  }\r\n\r\n  // presale mint\r\n  function presaleMint(\r\n    bytes memory nonce,\r\n    bytes memory signature,\r\n    uint256 _mintAmount\r\n  ) public payable onlyEOA {\r\n    require(!paused, \"SHOGUN: contract is paused\");\r\n    require(\r\n      (isPresaleOpen() || presaleOpen),\r\n      \"SHOGUN: presale has not started or it has ended\"\r\n    );\r\n    require(\r\n      whitelistedAddresses[msg.sender],\r\n      \"SHOGUN: you are not in the whitelist\"\r\n    );\r\n    require(!_nonceUsed[nonce], \"SHOGUN: nonce was used\");\r\n    require(\r\n      isSignedBySigner(msg.sender, nonce, signature, signerAddressPresale),\r\n      \"SHOGUN: invalid signature\"\r\n    );\r\n    uint256 supply = totalSupply();\r\n    require(\r\n      presaleAddressMintedAmount[msg.sender] + _mintAmount <=\r\n        nftPerAddressLimitPresale,\r\n      \"SHOGUN: you can only mint a maximum of two nft during presale\"\r\n    );\r\n    require(\r\n      msg.value >= cost * _mintAmount,\r\n      \"SHOGUN: not enought ethere sent for mint amount\"\r\n    );\r\n\r\n    (bool success, ) = treasury.call{ value: msg.value }(\"\"); // forward amount to treasury wallet\r\n    require(success, \"SHOGUN: not able to forward msg value to treasury\");\r\n\r\n    for (uint256 i = 1; i <= _mintAmount; i++) {\r\n      presaleAddressMintedAmount[msg.sender]++;\r\n      _safeMint(msg.sender, supply + i);\r\n    }\r\n    _nonceUsed[nonce] = true;\r\n  }\r\n\r\n  function airdrop(address[] memory giveawayList) public onlyEOA onlyOwner {\r\n    require(!paused, \"SHOGUN: contract is paused\");\r\n    require(\r\n      balanceOf(msg.sender) >= giveawayList.length,\r\n      \"SHOGUN: not enough in wallet for airdrop amount\"\r\n    );\r\n    uint256[] memory ownerWallet = walletOfOwner(msg.sender);\r\n\r\n    for (uint256 i = 0; i < giveawayList.length; i++) {\r\n      _safeTransfer(msg.sender, giveawayList[i], ownerWallet[i], \"0x00\");\r\n    }\r\n  }\r\n\r\n  //*************** PUBLIC FUNCTIONS ******************//\r\n  function walletOfOwner(address _owner)\r\n    public\r\n    view\r\n    returns (uint256[] memory)\r\n  {\r\n    uint256 ownerTokenCount = balanceOf(_owner);\r\n    uint256[] memory tokenIds = new uint256[](ownerTokenCount);\r\n    for (uint256 i; i < ownerTokenCount; i++) {\r\n      tokenIds[i] = tokenOfOwnerByIndex(_owner, i);\r\n    }\r\n    return tokenIds;\r\n  }\r\n\r\n  function tokenURI(uint256 tokenId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (string memory)\r\n  {\r\n    require(\r\n      _exists(tokenId),\r\n      \"ERC721Metadata: URI query for nonexistent token\"\r\n    );\r\n\r\n    string memory currentBaseURI = _baseURI();\r\n\r\n    if (!revealed) {\r\n      return notRevealedUri;\r\n    } else {\r\n      return\r\n        bytes(currentBaseURI).length > 0\r\n          ? string(abi.encodePacked(currentBaseURI, tokenId.toString()))\r\n          : \"\";\r\n    }\r\n  }\r\n\r\n  //*************** INTERNAL FUNCTIONS ******************//\r\n  function isSignedBySigner(\r\n    address sender,\r\n    bytes memory nonce,\r\n    bytes memory signature,\r\n    address signerAddress\r\n  ) private pure returns (bool) {\r\n    bytes32 hash = keccak256(abi.encodePacked(sender, nonce));\r\n    return signerAddress == hash.recover(signature);\r\n  }\r\n\r\n  function _baseURI() internal view virtual override returns (string memory) {\r\n    return baseURI;\r\n  }\r\n\r\n  function isPresaleOpen() public view returns (bool) {\r\n    return\r\n      block.timestamp >= presaleStartTime &&\r\n      block.timestamp < (presaleStartTime + presaleWindow);\r\n  }\r\n\r\n  function isPublicSaleOpen() public view returns (bool) {\r\n    return block.timestamp >= publicSaleStartTime;\r\n  }\r\n\r\n  function isWhitelisted(address _user) public view returns (bool) {\r\n    return whitelistedAddresses[_user];\r\n  }\r\n\r\n  //*************** OWNER FUNCTIONS ******************//\r\n  // No possible way to unreveal once it is toggled\r\n  function reveal() public onlyOwner {\r\n    revealed = true;\r\n  }\r\n\r\n  function setBaseURI(string memory _newBaseURI) public onlyOwner {\r\n    baseURI = _newBaseURI;\r\n  }\r\n\r\n  function setShogunToken(address _shogunToken) external onlyOwner {\r\n    SHOGUN_TOKEN = IShogunToken(_shogunToken);\r\n  }\r\n\r\n  function pause(bool _state) public onlyOwner {\r\n    paused = _state;\r\n  }\r\n\r\n  function whitelistUsers(address[] calldata _users) external onlyOwner {\r\n    for (uint256 i = 0; i < _users.length; i++) {\r\n      whitelistedAddresses[_users[i]] = true;\r\n    }\r\n  }\r\n\r\n  function withdrawToTreasury() public payable onlyOwner {\r\n    (bool success, ) = treasury.call{ value: address(this).balance }(\"\"); // returns boolean and data\r\n    require(success);\r\n  }\r\n\r\n  function setPresaleOpen(bool _presaleOpen) public onlyOwner {\r\n    presaleOpen = _presaleOpen;\r\n  }\r\n\r\n  function setPublicSaleOpen(bool _publicSaleOpen) public onlyOwner {\r\n    publicSaleOpen = _publicSaleOpen;\r\n  }\r\n\r\n  function setSignerAddressPresale(address presaleSignerAddresss)\r\n    public\r\n    onlyOwner\r\n  {\r\n    signerAddressPresale = presaleSignerAddresss;\r\n  }\r\n\r\n  function setSignerAddressPublic(address publicSignerAddress)\r\n    public\r\n    onlyOwner\r\n  {\r\n    signerAddressPublic = publicSignerAddress;\r\n  }\r\n\r\n  function setNotRevealedUri(string memory _notRevealedUri) public onlyOwner {\r\n    notRevealedUri = _notRevealedUri;\r\n  }\r\n\r\n  //*************** Future Utility Functions ******************//\r\n  function setStakingContractAddress(address _stakingContract)\r\n    public\r\n    onlyOwner\r\n  {\r\n    stakingContractAddress = _stakingContract;\r\n  }\r\n\r\n  // sacrifice/burn ERC721\r\n  function seppuku(uint256 _tokenId) public {\r\n    require(\r\n      _isApprovedOrOwner(_msgSender(), _tokenId),\r\n      \"ERC721: transfer caller is not owner nor approved\"\r\n    );\r\n    _burn(_tokenId);\r\n  }\r\n\r\n  function setNameChangePrice(uint256 _newNameChangePrice) public onlyOwner {\r\n    nameChangePrice = _newNameChangePrice;\r\n  }\r\n\r\n  function changeName(uint256 tokenId, string memory newName) public virtual {\r\n    address owner = ownerOf(tokenId);\r\n    require(_msgSender() == owner, \"ERC721: caller is not the owner\");\r\n    require(validateName(newName) == true, \"SHOGUN: Not a valid new name\");\r\n    require(\r\n      sha256(bytes(newName)) != sha256(bytes(shogunName[tokenId])),\r\n      \"SHOGUN: New name is same as the current one\"\r\n    );\r\n\r\n    SHOGUN_TOKEN.burn(_msgSender(), nameChangePrice);\r\n    shogunName[tokenId] = newName;\r\n  }\r\n\r\n  function tokenNameByIndex(uint256 index) public view returns (string memory) {\r\n    return shogunName[index];\r\n  }\r\n\r\n  function validateName(string memory str) public pure returns (bool) {\r\n    bytes memory b = bytes(str);\r\n    if (b.length < 1) return false;\r\n    if (b.length > 25) return false; // Cannot be longer than 25 characters\r\n    if (b[0] == 0x20) return false; // Leading space\r\n    if (b[b.length - 1] == 0x20) return false; // Trailing space\r\n\r\n    bytes1 lastChar = b[0];\r\n\r\n    for (uint256 i; i < b.length; i++) {\r\n      bytes1 char = b[i];\r\n\r\n      if (char == 0x20 && lastChar == 0x20) return false; // Cannot contain continous spaces\r\n\r\n      if (\r\n        !(char >= 0x30 && char <= 0x39) && //9-0\r\n        !(char >= 0x41 && char <= 0x5A) && //A-Z\r\n        !(char >= 0x61 && char <= 0x7A) && //a-z\r\n        !(char == 0x20) //space\r\n      ) return false;\r\n\r\n      lastChar = char;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function lockToken(uint256[] memory _tokenIds) external onlyStakingContract {\r\n    for (uint256 i = 0; i < _tokenIds.length; i++) {\r\n      _isLocked[_tokenIds[i]] = true;\r\n    }\r\n  }\r\n\r\n  function unlockToken(uint256[] memory _tokenIds)\r\n    external\r\n    onlyStakingContract\r\n  {\r\n    for (uint256 i = 0; i < _tokenIds.length; i++) {\r\n      _isLocked[_tokenIds[i]] = false;\r\n    }\r\n  }\r\n\r\n  function _beforeTokenTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) internal virtual override(ERC721Enumerable) {\r\n    require(_isLocked[tokenId] == false, \"SHOGUN: Token is Locked\");\r\n    super._beforeTokenTransfer(from, to, tokenId);\r\n  }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\nabstract contract MockERC20 is ERC20 {}\r\n"
    },
    "contracts/MockSho.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./MockERC20.sol\";\r\n\r\ncontract MockSho is MockERC20 {\r\n    constructor() ERC20(\"Shogun Token\", \"SS\") {}\r\n\r\n    function mint(address account, uint256 amount) public {\r\n        _mint(account, amount);\r\n    }\r\n\r\n    function burn(address account, uint256 amount) public {\r\n        _burn(account, amount);\r\n    }\r\n}\r\n"
    },
    "contracts/ShogunStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\";\r\n\r\nimport \"./interfaces/IShogunToken.sol\";\r\nimport \"./interfaces/IShogunNFT.sol\";\r\n\r\n/*  _____ _                             _____                                 _     \r\n  / ____| |                            / ____|                               (_)    \r\n | (___ | |__   ___   __ _ _   _ _ __ | (___   __ _ _ __ ___  _   _ _ __ __ _ _ ___ \r\n  \\___ \\| '_ \\ / _ \\ / _` | | | | '_ \\ \\___ \\ / _` | '_ ` _ \\| | | | '__/ _` | / __|\r\n  ____) | | | | (_) | (_| | |_| | | | |____) | (_| | | | | | | |_| | | | (_| | \\__ \\\r\n |_____/|_| |_|\\___/ \\__, |\\__,_|_| |_|_____/ \\__,_|_| |_| |_|\\__,_|_|  \\__,_|_|___/\r\n                      __/ |                                                         \r\n                     |___/    \r\n*/\r\n\r\ncontract ShogunStaking is\r\n    AccessControlUpgradeable,\r\n    ReentrancyGuardUpgradeable,\r\n    ERC721HolderUpgradeable\r\n{\r\n    using SafeMathUpgradeable for uint256;\r\n    using CountersUpgradeable for CountersUpgradeable.Counter;\r\n\r\n    struct Family {\r\n        address familyOwner;\r\n        uint256 lastClaim;\r\n        uint256 guildMultiplier;\r\n        uint256 medallionMultiplier;\r\n        uint256 shogunBonus;\r\n        uint256[] shogunIds;\r\n        TrainState trainState;\r\n    }\r\n\r\n    struct GuildCounter {\r\n        uint8 justiceCount;\r\n        uint8 courageCount;\r\n        uint8 compassionCount;\r\n        uint8 respectCount;\r\n        uint8 integrityCount;\r\n        uint8 honourCount;\r\n        uint8 dutyCount;\r\n        uint8 restraintCount;\r\n    }\r\n\r\n    enum TrainState {\r\n        IN_PROGRESS,\r\n        ENDED\r\n    }\r\n\r\n    IShogunNFT public SS;\r\n    IShogunToken public SHO;\r\n\r\n    uint256 public baseReward;\r\n    uint256 private timescale;\r\n\r\n    uint256[] public countMultipliers;\r\n    uint256 public guildMultiplier;\r\n    uint256 public medallionMultiplier;\r\n    uint256 public shogunBonus;\r\n    mapping(uint256 => bool) public isLegendarySamurai;\r\n    mapping(address => uint256) public medallionCount;\r\n\r\n    bytes public guilds;\r\n\r\n    mapping(uint256 => Family) public families; // Map id to Family\r\n    mapping(address => uint256[]) public userFamilies; // Maps user address to familyId\r\n    mapping(uint256 => uint256) public onTraining; // Maps tokenId to familyId (0 = not training) (No double training)\r\n    mapping(address => uint256) public bonusSHO;\r\n\r\n    // Private Variables\r\n    CountersUpgradeable.Counter private _familyId;\r\n\r\n    // Reserve Storage\r\n    uint256[50] private ______gap;\r\n\r\n    // Events\r\n    event TrainingStarted(\r\n        address indexed user,\r\n        uint256 trainId,\r\n        uint256[] shogunIds,\r\n        uint256 startTime\r\n    );\r\n    event TrainingEnded(\r\n        address indexed user,\r\n        uint256 trainId,\r\n        uint256[] shogunIds,\r\n        uint256 endTime\r\n    );\r\n    event RewardClaimed(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 claimTime\r\n    );\r\n    event BonusClaimed(address indexed user, uint256 amount, uint256 claimTime);\r\n\r\n    // Modifiers\r\n    function __ShogunStaking_init(\r\n        address ss,\r\n        uint256 _baseReward,\r\n        address admin\r\n    ) public initializer {\r\n        __AccessControl_init();\r\n        __ReentrancyGuard_init();\r\n\r\n        // Constructor init\r\n        _setupRole(DEFAULT_ADMIN_ROLE, admin); // To revoke access after functions are set\r\n        baseReward = _baseReward;\r\n        SS = IShogunNFT(ss);\r\n        countMultipliers = [10000, 10100, 10300];\r\n        guildMultiplier = 200;\r\n        medallionMultiplier = 10;\r\n        shogunBonus = 800; // 8% for shogun bonus\r\n        timescale = 1 days;\r\n    }\r\n\r\n    // ------------------------- USER FUNCTION ---------------------------\r\n\r\n    /// @dev Start Multiple Training Sessions\r\n    function startTrainingMultiple(uint256[][] memory shogunIdsArray) public {\r\n        for (uint256 i = 0; i < shogunIdsArray.length; i++) {\r\n            startTraining(shogunIdsArray[i]);\r\n        }\r\n    }\r\n\r\n    /// @dev Start train\r\n    /// @notice Sends SSs (max. 5) on a train, SSs of the same Guild and if rare will get a bonus multiplier!\r\n    function startTraining(uint256[] memory shogunIds) public {\r\n        require(\r\n            areAvailiable(shogunIds),\r\n            \"ShogunStaking: One or More shoguns are already training\"\r\n        );\r\n\r\n        require(\r\n            areOwned(shogunIds),\r\n            \"ShogunStaking: One or More shoguns are not owned by you!\"\r\n        );\r\n\r\n        require(shogunIds.length <= 3, \"ShogunStaking: Maximum of 3 SS only!\");\r\n        require(shogunIds.length > 0, \"ShogunStaking: At least 1 SS required!\");\r\n\r\n        _familyId.increment();\r\n        SS.lockToken(shogunIds);\r\n\r\n        for (uint256 i = 0; i < shogunIds.length; i++) {\r\n            onTraining[shogunIds[i]] = _familyId.current();\r\n        }\r\n\r\n        uint256 _guildMultiplier;\r\n        uint256 _medallionMultiplier;\r\n        uint256 _shogunBonus;\r\n\r\n        (_guildMultiplier, _medallionMultiplier) = calculateMultipliers(\r\n            shogunIds\r\n        );\r\n\r\n        _shogunBonus = calculateShogunBonus(shogunIds);\r\n\r\n        Family memory _family = Family(\r\n            msg.sender, // address familyOwner\r\n            block.timestamp,\r\n            _guildMultiplier, // uint256 GuildMultiplier;\r\n            _medallionMultiplier,\r\n            _shogunBonus,\r\n            shogunIds, // uint256[] shogunIds;\r\n            TrainState.IN_PROGRESS // TrainState trainState;\r\n        );\r\n\r\n        families[_familyId.current()] = _family;\r\n        userFamilies[msg.sender].push(_familyId.current());\r\n\r\n        emit TrainingStarted(\r\n            msg.sender,\r\n            _familyId.current(),\r\n            shogunIds,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function setMedallionCount(\r\n        address[] memory users,\r\n        uint256[] memory quantities\r\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(\r\n            users.length == quantities.length,\r\n            \"ShogunStaking: User length and Quantity does not match\"\r\n        );\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            medallionCount[users[i]] = quantities[i];\r\n        }\r\n    }\r\n\r\n    /// @dev Claim SHO reward for given family Id\r\n    function claimRewards(uint256 familyId) public nonReentrant {\r\n        Family storage family = families[familyId];\r\n        address familyOwner = family.familyOwner;\r\n        require(\r\n            msg.sender == familyOwner,\r\n            \"ShogunStaking: Only family owner can claim SHO\"\r\n        );\r\n        require(\r\n            family.trainState == TrainState.IN_PROGRESS,\r\n            \"ShogunStaking: Training has already ended!\"\r\n        );\r\n        uint256 rewards = calculateRewards(familyId);\r\n        SHO.mint(familyOwner, rewards); // change\r\n        family.lastClaim = block.timestamp;\r\n        emit RewardClaimed(msg.sender, rewards, block.timestamp);\r\n    }\r\n\r\n    /// @dev QOL to claim all rewards\r\n    function claimAllRewards() public nonReentrant {\r\n        uint256[] memory familyIds = getUserFamilies(msg.sender);\r\n        uint256 totalRewards = 0;\r\n        Family storage train;\r\n\r\n        for (uint256 i = 0; i < familyIds.length; i++) {\r\n            totalRewards = totalRewards.add(calculateRewards(familyIds[i]));\r\n            train = families[familyIds[i]];\r\n            train.lastClaim = block.timestamp;\r\n        }\r\n        SHO.mint(msg.sender, totalRewards);\r\n        emit RewardClaimed(msg.sender, totalRewards, block.timestamp);\r\n    }\r\n\r\n    /// @dev Lets user claim bonus SHO\r\n    function claimBonusSHO() public nonReentrant {\r\n        uint256 claimAmount = bonusSHO[msg.sender];\r\n        require(\r\n            claimAmount > 0,\r\n            \"ShogunStaking: User does not have Bonus SHO Tokens to claim\"\r\n        );\r\n        bonusSHO[msg.sender] = 0;\r\n        SHO.transfer(msg.sender, claimAmount);\r\n        emit BonusClaimed(msg.sender, claimAmount, block.timestamp);\r\n    }\r\n\r\n    /// @dev Claim tokens and leave train\r\n    /// @notice End train for SSs. You will stop acumulating SHO.\r\n    function endTraining(uint256 trainId) public {\r\n        // Only Family Owner\r\n        require(\r\n            msg.sender == families[trainId].familyOwner,\r\n            \"ShogunStaking: Not the owner of the family\"\r\n        );\r\n        // Must be training state\r\n        require(\r\n            families[trainId].trainState == TrainState.IN_PROGRESS,\r\n            \"ShogunStaking: Training already Ended\"\r\n        );\r\n\r\n        // Distribute Remaining Rewards\r\n        claimRewards(trainId);\r\n\r\n        // Unlock Tokens\r\n        SS.unlockToken(families[trainId].shogunIds);\r\n\r\n        // Change Family State such that further claims cannot be made\r\n        families[trainId].trainState = TrainState.ENDED;\r\n\r\n        uint256[] memory shogunIds = families[trainId].shogunIds;\r\n\r\n        for (uint256 i = 0; i < shogunIds.length; i++) {\r\n            onTraining[shogunIds[i]] = 0;\r\n        }\r\n\r\n        emit TrainingEnded(\r\n            msg.sender,\r\n            trainId,\r\n            families[trainId].shogunIds,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function lockTokens(uint256[] memory tokenIds) internal {\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            SS.safeTransferFrom(msg.sender, address(this), tokenIds[i]);\r\n        }\r\n    }\r\n\r\n    function unlockTokens(uint256[] memory tokenIds) internal {\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            SS.safeTransferFrom(address(this), msg.sender, tokenIds[i]);\r\n        }\r\n    }\r\n\r\n    /// @dev Claim tokens and leave train\r\n    /// @notice End train for SSs. You will stop acumulating SHO.\r\n    function endMultipleTraining(uint256[] memory trainIds) public {\r\n        for (uint256 i = 0; i < trainIds.length; i++) {\r\n            endTraining(trainIds[i]);\r\n        }\r\n    }\r\n\r\n    // ----------------------- View FUNCTIONS -----------------------\r\n\r\n    /// @dev Retrieves Count multiplier\r\n    function getCountMultiplier(uint256 guildCount, bool sameGuild)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (sameGuild) {\r\n            return countMultipliers[guildCount - 1] + guildMultiplier;\r\n        } else {\r\n            return countMultipliers[guildCount - 1];\r\n        }\r\n    }\r\n\r\n    /// @dev Retrieves Rare multiplier\r\n    function getTotalMedallionMultiplier(address user)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return medallionMultiplier.mul(medallionCount[user]);\r\n    }\r\n\r\n    /// @dev Calculates guild Multiplier based on tokenIds\r\n    function calculateMultipliers(uint256[] memory _tokenIds)\r\n        internal\r\n        view\r\n        returns (uint256 _guildMultiplier, uint256 _medallionMultiplier)\r\n    {\r\n        uint8[8] memory _guildCounter = [0, 0, 0, 0, 0, 0, 0, 0];\r\n        uint8 maxCount = 0;\r\n        bool _sameGuild;\r\n\r\n        // Count SS per guild\r\n        for (uint8 i = 0; i < _tokenIds.length; i++) {\r\n            _guildCounter[getGuild(_tokenIds[i]) - 1] += 1;\r\n        }\r\n\r\n        // Find Maximum Count and Index of Max Count\r\n        for (uint8 i = 0; i < _guildCounter.length; i++) {\r\n            if (_guildCounter[i] > maxCount) {\r\n                maxCount = _guildCounter[i];\r\n            }\r\n        }\r\n\r\n        if (maxCount == 3) {\r\n            _sameGuild = true;\r\n        }\r\n\r\n        _guildMultiplier = getCountMultiplier(_tokenIds.length, _sameGuild);\r\n        _medallionMultiplier = getTotalMedallionMultiplier(msg.sender);\r\n    }\r\n\r\n    /// @dev Caluclate rewards for given Family Id\r\n    function calculateRewards(uint256 trainId)\r\n        public\r\n        view\r\n        returns (uint256 rewardAmount)\r\n    {\r\n        Family memory family = families[trainId];\r\n        rewardAmount = baseReward\r\n            .mul(block.timestamp.sub(family.lastClaim))\r\n            .mul(family.shogunIds.length)\r\n            .mul(\r\n                (family.guildMultiplier).add(family.medallionMultiplier).add(\r\n                    family.shogunBonus\r\n                )\r\n            )\r\n            .div(timescale)\r\n            .div(10000);\r\n    }\r\n\r\n    function calculateShogunBonus(uint256[] memory shogunIds)\r\n        internal\r\n        view\r\n        returns (uint256 out)\r\n    {\r\n        for (uint256 i = 0; i < shogunIds.length; i++) {\r\n            if (isLegendarySamurai[shogunIds[i]] == true) {\r\n                out += shogunBonus;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Determines if the tokenIds are availiable for training\r\n    function areAvailiable(uint256[] memory tokenIds)\r\n        public\r\n        view\r\n        returns (bool out)\r\n    {\r\n        out = true;\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            if (onTraining[tokenIds[i]] > 0) {\r\n                out = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Determines if the all tokenIds are owned by msg sneder\r\n    function areOwned(uint256[] memory tokenIds)\r\n        public\r\n        view\r\n        returns (bool out)\r\n    {\r\n        out = true;\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            if (SS.ownerOf(tokenIds[i]) != msg.sender) {\r\n                out = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getUserFamilies(address user)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        return userFamilies[user];\r\n    }\r\n\r\n    function getFamily(uint256 trainId) public view returns (Family memory) {\r\n        return families[trainId];\r\n    }\r\n\r\n    function getGuild(uint256 tokenId) public view returns (uint8) {\r\n        return uint8(guilds[tokenId - 1]);\r\n    }\r\n\r\n    // ---------------------- ADMIN FUNCTIONS -----------------------\r\n\r\n    function setBaseReward(uint256 _amount)\r\n        public\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        baseReward = _amount;\r\n    }\r\n\r\n    function setCountMultiplier(uint256[] memory _countMultipliers)\r\n        public\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        countMultipliers = _countMultipliers;\r\n    }\r\n\r\n    function setGuildMultiplier(uint256 _guildMultiplier)\r\n        public\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        guildMultiplier = _guildMultiplier;\r\n    }\r\n\r\n    function setMedallionMultiplier(uint256 _medallionMultiplier)\r\n        public\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        medallionMultiplier = _medallionMultiplier;\r\n    }\r\n\r\n    function setLegendaryShoguns(\r\n        uint256[] memory shogunIds,\r\n        bool[] memory flags\r\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        for (uint256 i = 0; i < shogunIds.length; i++) {\r\n            isLegendarySamurai[shogunIds[i]] = flags[i];\r\n        }\r\n    }\r\n\r\n    function setShogunBonus(uint256 _shogunBonus)\r\n        public\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        shogunBonus = _shogunBonus;\r\n    }\r\n\r\n    /// @dev Set bonus SHO Tokens to be claimed\r\n    function setBonusSHO(address[] memory addresses, uint256[] memory amounts)\r\n        public\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        require(\r\n            addresses.length == amounts.length,\r\n            \"ShogunStaking: To and amount length not matching\"\r\n        );\r\n        uint256 totalAmount;\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            bonusSHO[addresses[i]] = amounts[i];\r\n            totalAmount += amounts[i];\r\n        }\r\n\r\n        // Mint total bonus sho to contract\r\n        SHO.mint(address(this), totalAmount);\r\n    }\r\n\r\n    /// @dev Storing Guild Metadata as 1 byte hexes on a byte for gas optimization\r\n    function updateGuilds(bytes calldata _guilds)\r\n        public\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        guilds = _guilds;\r\n    }\r\n\r\n    function setSHOToken(address sho) public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        SHO = IShogunToken(sho);\r\n    }\r\n\r\n    function setTimeScale(uint256 _newTimescale)\r\n        public\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        timescale = _newTimescale;\r\n    }\r\n\r\n    /// @dev Airdrop SHO Tokens out of contract\r\n    function airdrop(address[] memory to, uint256[] memory amount)\r\n        public\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        require(\r\n            to.length == amount.length,\r\n            \"ShogunStaking: To and amount length not matching\"\r\n        );\r\n        for (uint256 i = 0; i < to.length; i++) {\r\n            SHO.transfer(to[i], amount[i]);\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}