{
  "address": "0xFc9E23DFAAE45D9108e6D36a44BEBbD7E6E5D741",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_initBaseURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_notRevealedUri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_signerAddressPresale",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_signerAddressPublic",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SHOGUN_TOKEN",
      "outputs": [
        {
          "internalType": "contract IShogunToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "giveawayList",
          "type": "address[]"
        }
      ],
      "name": "airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "newName",
          "type": "string"
        }
      ],
      "name": "changeName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintAmount",
          "type": "uint256"
        }
      ],
      "name": "devMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPresaleOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPublicSaleOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "lockToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMintPerTxn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nameChangePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftPerAddressLimitPresale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftPerAddressLimitPublic",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "notRevealedUri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        }
      ],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "nonce",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_mintAmount",
          "type": "uint256"
        }
      ],
      "name": "presaleMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presaleOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presaleStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presaleWindow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "nonce",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_mintAmount",
          "type": "uint256"
        }
      ],
      "name": "publicMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reveal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revealed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "seppuku",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBaseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newNameChangePrice",
          "type": "uint256"
        }
      ],
      "name": "setNameChangePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_notRevealedUri",
          "type": "string"
        }
      ],
      "name": "setNotRevealedUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_presaleOpen",
          "type": "bool"
        }
      ],
      "name": "setPresaleOpen",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_publicSaleOpen",
          "type": "bool"
        }
      ],
      "name": "setPublicSaleOpen",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_shogunToken",
          "type": "address"
        }
      ],
      "name": "setShogunToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "presaleSignerAddresss",
          "type": "address"
        }
      ],
      "name": "setSignerAddressPresale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "publicSignerAddress",
          "type": "address"
        }
      ],
      "name": "setSignerAddressPublic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        }
      ],
      "name": "setStakingContractAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "shogunName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenNameByIndex",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "unlockToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "validateName",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "walletOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_users",
          "type": "address[]"
        }
      ],
      "name": "whitelistUsers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistedAddresses",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawToTreasury",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb24bcb9563ac87081d7b33875b47c080217dd7ab80d40e6891e90b7c817bd759",
  "receipt": {
    "to": null,
    "from": "0x0902CB364E49101F4ab5D4fFDE5035973e728D3F",
    "contractAddress": "0xFc9E23DFAAE45D9108e6D36a44BEBbD7E6E5D741",
    "transactionIndex": 33,
    "gasUsed": "4338535",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000008000000000000000000000080000000000000000000000000000000000800001000400000000000100000000004000000000020000000000000000000a00000000000000040080000000000000400000000004000000000000000000000000000000000080000000000000000000200000000000000000000000000000000000000000000000000000000000004000000000000000000001000000000000000000000000000000100040000020000000000000000000000000000000400000000000000000000000000000100000",
    "blockHash": "0xe55ed3d9023b88eff9a871be7386f6799273dd3db31ff802f313dd245c2ddc33",
    "transactionHash": "0xb24bcb9563ac87081d7b33875b47c080217dd7ab80d40e6891e90b7c817bd759",
    "logs": [
      {
        "transactionIndex": 33,
        "blockNumber": 25659293,
        "transactionHash": "0xb24bcb9563ac87081d7b33875b47c080217dd7ab80d40e6891e90b7c817bd759",
        "address": "0xFc9E23DFAAE45D9108e6D36a44BEBbD7E6E5D741",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000902cb364e49101f4ab5d4ffde5035973e728d3f"
        ],
        "data": "0x",
        "logIndex": 149,
        "blockHash": "0xe55ed3d9023b88eff9a871be7386f6799273dd3db31ff802f313dd245c2ddc33"
      },
      {
        "transactionIndex": 33,
        "blockNumber": 25659293,
        "transactionHash": "0xb24bcb9563ac87081d7b33875b47c080217dd7ab80d40e6891e90b7c817bd759",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000902cb364e49101f4ab5d4ffde5035973e728d3f",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001e8db9e50ae7ae00000000000000000000000000000000000000000000000006f05b59d3b20000000000000000000000000000000000000000000000000c65fa2f3aad7f62bd1c00000000000000000000000000000000000000000000000006d1cd9feea71852000000000000000000000000000000000000000000000c65fa4dc867646da4ca",
        "logIndex": 150,
        "blockHash": "0xe55ed3d9023b88eff9a871be7386f6799273dd3db31ff802f313dd245c2ddc33"
      }
    ],
    "blockNumber": 25659293,
    "cumulativeGasUsed": "8768140",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "ShogunSamurais",
    "SGS",
    "",
    "https://gateway.pinata.cloud/ipfs/QmWJeHGBPN6x74svUjzJifHUawNxLM1kBQDecRsBY992rE",
    "0x2348681242641A26FdEE99633848EA3bf995986A",
    "0x01Bc98715Ecd2643259A396213d86582Ed7571F5",
    "0x0902CB364E49101F4ab5D4fFDE5035973e728D3F"
  ],
  "numDeployments": 1,
  "solcInputHash": "aff7055051153d0f82c9e2253345440d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_initBaseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_notRevealedUri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_signerAddressPresale\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signerAddressPublic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SHOGUN_TOKEN\",\"outputs\":[{\"internalType\":\"contract IShogunToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"giveawayList\",\"type\":\"address[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"changeName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"devMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPresaleOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublicSaleOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"lockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintPerTxn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nameChangePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftPerAddressLimitPresale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftPerAddressLimitPublic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notRevealedUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"nonce\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"presaleMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"nonce\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"publicMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"seppuku\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newNameChangePrice\",\"type\":\"uint256\"}],\"name\":\"setNameChangePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_notRevealedUri\",\"type\":\"string\"}],\"name\":\"setNotRevealedUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_presaleOpen\",\"type\":\"bool\"}],\"name\":\"setPresaleOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_publicSaleOpen\",\"type\":\"bool\"}],\"name\":\"setPublicSaleOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_shogunToken\",\"type\":\"address\"}],\"name\":\"setShogunToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"presaleSignerAddresss\",\"type\":\"address\"}],\"name\":\"setSignerAddressPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"publicSignerAddress\",\"type\":\"address\"}],\"name\":\"setSignerAddressPublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"name\":\"setStakingContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shogunName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenNameByIndex\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unlockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"validateName\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"whitelistUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawToTreasury\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ShogunNFT.sol\":\"ShogunNFT\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/ShogunNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.7.0 <0.9.0;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\nimport \\\"./interfaces/IShogunToken.sol\\\";\\r\\n\\r\\n/*  _____ _                             _____                                 _     \\r\\n  / ____| |                            / ____|                               (_)    \\r\\n | (___ | |__   ___   __ _ _   _ _ __ | (___   __ _ _ __ ___  _   _ _ __ __ _ _ ___ \\r\\n  \\\\___ \\\\| '_ \\\\ / _ \\\\ / _` | | | | '_ \\\\ \\\\___ \\\\ / _` | '_ ` _ \\\\| | | | '__/ _` | / __|\\r\\n  ____) | | | | (_) | (_| | |_| | | | |____) | (_| | | | | | | |_| | | | (_| | \\\\__ \\\\\\r\\n |_____/|_| |_|\\\\___/ \\\\__, |\\\\__,_|_| |_|_____/ \\\\__,_|_| |_| |_|\\\\__,_|_|  \\\\__,_|_|___/\\r\\n                      __/ |                                                         \\r\\n                     |___/    \\r\\n*/\\r\\ncontract ShogunNFT is ERC721Enumerable, Ownable {\\r\\n  using SafeMath for uint256;\\r\\n  using Strings for uint256;\\r\\n  using ECDSA for bytes32;\\r\\n\\r\\n  IShogunToken public SHOGUN_TOKEN;\\r\\n\\r\\n  address payable public treasury;\\r\\n  address public stakingContractAddress;\\r\\n  address private signerAddressPublic;\\r\\n  address private signerAddressPresale;\\r\\n\\r\\n  string public baseURI;\\r\\n  string public notRevealedUri;\\r\\n\\r\\n  uint256 public cost = 0.08 ether;\\r\\n  uint256 public maxSupply = 8888;\\r\\n  uint256 public maxMintPerTxn = 4; // maximum number of mint per transaction\\r\\n  uint256 public nftPerAddressLimitPublic = 8; // maximum number of mint per wallet for public sale\\r\\n  uint256 public nftPerAddressLimitPresale = 2; // maximum number of mint per wallet for presale\\r\\n  uint256 public nameChangePrice = 300 ether;\\r\\n\\r\\n  uint256 public presaleWindow = 24 hours; // 24 hours presale period\\r\\n  uint256 public presaleStartTime = 1634342400; // 16th October 0800 SGT\\r\\n  uint256 public publicSaleStartTime = 1634443200; // 17thth October 1200 SGT\\r\\n\\r\\n  bool public paused = false;\\r\\n  bool public revealed = false;\\r\\n  mapping(uint256 => string) public shogunName;\\r\\n\\r\\n  // manual toggle for presale and public sale //\\r\\n  bool public presaleOpen = false;\\r\\n  bool public publicSaleOpen = false;\\r\\n\\r\\n  // private variables //\\r\\n  mapping(uint256 => bool) private _isLocked;\\r\\n  mapping(address => bool) public whitelistedAddresses; // all address of whitelisted OGs\\r\\n  mapping(address => uint256) private presaleAddressMintedAmount; // number of NFT minted for each wallet during presale\\r\\n  mapping(address => uint256) private publicAddressMintedAmount; // number of NFT minted for each wallet during public sale\\r\\n  mapping(bytes => bool) private _nonceUsed; // nonce was used to mint already\\r\\n\\r\\n  // allows transactiones from only externally owned account (cannot be from smart contract)\\r\\n  modifier onlyEOA() {\\r\\n    require(msg.sender == tx.origin, \\\"SHOGUN: Only EOA\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  // allow transactions only from staking Contract address\\r\\n  modifier onlyStakingContract() {\\r\\n    require(\\r\\n      msg.sender == stakingContractAddress,\\r\\n      \\\"SHOGUN: Only callable from staking contract\\\"\\r\\n    );\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor(\\r\\n    string memory _name,\\r\\n    string memory _symbol,\\r\\n    string memory _initBaseURI, // \\\"\\\"\\r\\n    string memory _notRevealedUri, // default unrevealed IPFS\\r\\n    address _signerAddressPresale,\\r\\n    address _signerAddressPublic,\\r\\n    address _treasury\\r\\n  ) ERC721(_name, _symbol) {\\r\\n    setBaseURI(_initBaseURI);\\r\\n    notRevealedUri = _notRevealedUri;\\r\\n    setSignerAddressPresale(_signerAddressPresale);\\r\\n    setSignerAddressPublic(_signerAddressPublic);\\r\\n    treasury = payable(_treasury);\\r\\n  }\\r\\n\\r\\n  // dev team mint\\r\\n  function devMint(uint256 _mintAmount) public onlyEOA onlyOwner {\\r\\n    require(!paused); // contract is not paused\\r\\n    uint256 supply = totalSupply(); // get current mintedAmount\\r\\n    require(\\r\\n      supply + _mintAmount <= maxSupply,\\r\\n      \\\"SHOGUN: total mint amount exceeded supply, try lowering amount\\\"\\r\\n    );\\r\\n    for (uint256 i = 1; i <= _mintAmount; i++) {\\r\\n      _safeMint(msg.sender, supply + i);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  // public sale\\r\\n  function publicMint(\\r\\n    bytes memory nonce,\\r\\n    bytes memory signature,\\r\\n    uint256 _mintAmount\\r\\n  ) public payable onlyEOA {\\r\\n    require(!paused);\\r\\n    require(\\r\\n      (isPublicSaleOpen() || publicSaleOpen),\\r\\n      \\\"SHOGUN: public sale has not started\\\"\\r\\n    );\\r\\n    require(!_nonceUsed[nonce], \\\"SHOGUN: nonce was used\\\");\\r\\n    require(\\r\\n      isSignedBySigner(msg.sender, nonce, signature, signerAddressPublic),\\r\\n      \\\"invalid signature\\\"\\r\\n    );\\r\\n    uint256 supply = totalSupply();\\r\\n    require(\\r\\n      publicAddressMintedAmount[msg.sender] + _mintAmount <=\\r\\n        nftPerAddressLimitPublic,\\r\\n      \\\"SHOGUN: You have exceeded max amount of mints\\\"\\r\\n    );\\r\\n    require(\\r\\n      _mintAmount <= maxMintPerTxn,\\r\\n      \\\"SHOGUN: exceeded max mint amount per transaction\\\"\\r\\n    );\\r\\n    require(\\r\\n      supply + _mintAmount <= maxSupply,\\r\\n      \\\"SHOGUN: total mint amount exceeded supply, try lowering amount\\\"\\r\\n    );\\r\\n\\r\\n    (bool success, ) = treasury.call{ value: msg.value }(\\\"\\\"); // forward amount to treasury wallet\\r\\n    require(success, \\\"SHOGUN: not able to forward msg value to treasury\\\");\\r\\n\\r\\n    require(\\r\\n      msg.value == cost * _mintAmount,\\r\\n      \\\"SHOGUN: not enough ether sent for mint amount\\\"\\r\\n    );\\r\\n\\r\\n    for (uint256 i = 1; i <= _mintAmount; i++) {\\r\\n      publicAddressMintedAmount[msg.sender]++;\\r\\n      _safeMint(msg.sender, supply + i);\\r\\n    }\\r\\n    _nonceUsed[nonce] = true;\\r\\n  }\\r\\n\\r\\n  // presale mint\\r\\n  function presaleMint(\\r\\n    bytes memory nonce,\\r\\n    bytes memory signature,\\r\\n    uint256 _mintAmount\\r\\n  ) public payable onlyEOA {\\r\\n    require(!paused, \\\"SHOGUN: contract is paused\\\");\\r\\n    require(\\r\\n      (isPresaleOpen() || presaleOpen),\\r\\n      \\\"SHOGUN: presale has not started or it has ended\\\"\\r\\n    );\\r\\n    require(\\r\\n      whitelistedAddresses[msg.sender],\\r\\n      \\\"SHOGUN: you are not in the whitelist\\\"\\r\\n    );\\r\\n    require(!_nonceUsed[nonce], \\\"SHOGUN: nonce was used\\\");\\r\\n    require(\\r\\n      isSignedBySigner(msg.sender, nonce, signature, signerAddressPresale),\\r\\n      \\\"SHOGUN: invalid signature\\\"\\r\\n    );\\r\\n    uint256 supply = totalSupply();\\r\\n    require(\\r\\n      presaleAddressMintedAmount[msg.sender] + _mintAmount <=\\r\\n        nftPerAddressLimitPresale,\\r\\n      \\\"SHOGUN: you can only mint a maximum of two nft during presale\\\"\\r\\n    );\\r\\n    require(\\r\\n      msg.value >= cost * _mintAmount,\\r\\n      \\\"SHOGUN: not enought ethere sent for mint amount\\\"\\r\\n    );\\r\\n\\r\\n    (bool success, ) = treasury.call{ value: msg.value }(\\\"\\\"); // forward amount to treasury wallet\\r\\n    require(success, \\\"SHOGUN: not able to forward msg value to treasury\\\");\\r\\n\\r\\n    for (uint256 i = 1; i <= _mintAmount; i++) {\\r\\n      presaleAddressMintedAmount[msg.sender]++;\\r\\n      _safeMint(msg.sender, supply + i);\\r\\n    }\\r\\n    _nonceUsed[nonce] = true;\\r\\n  }\\r\\n\\r\\n  function airdrop(address[] memory giveawayList) public onlyEOA onlyOwner {\\r\\n    require(!paused, \\\"SHOGUN: contract is paused\\\");\\r\\n    require(\\r\\n      balanceOf(msg.sender) >= giveawayList.length,\\r\\n      \\\"SHOGUN: not enough in wallet for airdrop amount\\\"\\r\\n    );\\r\\n    uint256[] memory ownerWallet = walletOfOwner(msg.sender);\\r\\n\\r\\n    for (uint256 i = 0; i < giveawayList.length; i++) {\\r\\n      _safeTransfer(msg.sender, giveawayList[i], ownerWallet[i], \\\"0x00\\\");\\r\\n    }\\r\\n  }\\r\\n\\r\\n  //*************** PUBLIC FUNCTIONS ******************//\\r\\n  function walletOfOwner(address _owner)\\r\\n    public\\r\\n    view\\r\\n    returns (uint256[] memory)\\r\\n  {\\r\\n    uint256 ownerTokenCount = balanceOf(_owner);\\r\\n    uint256[] memory tokenIds = new uint256[](ownerTokenCount);\\r\\n    for (uint256 i; i < ownerTokenCount; i++) {\\r\\n      tokenIds[i] = tokenOfOwnerByIndex(_owner, i);\\r\\n    }\\r\\n    return tokenIds;\\r\\n  }\\r\\n\\r\\n  function tokenURI(uint256 tokenId)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (string memory)\\r\\n  {\\r\\n    require(\\r\\n      _exists(tokenId),\\r\\n      \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n    );\\r\\n\\r\\n    string memory currentBaseURI = _baseURI();\\r\\n\\r\\n    if (!revealed) {\\r\\n      return notRevealedUri;\\r\\n    } else {\\r\\n      return\\r\\n        bytes(currentBaseURI).length > 0\\r\\n          ? string(abi.encodePacked(currentBaseURI, tokenId.toString()))\\r\\n          : \\\"\\\";\\r\\n    }\\r\\n  }\\r\\n\\r\\n  //*************** INTERNAL FUNCTIONS ******************//\\r\\n  function isSignedBySigner(\\r\\n    address sender,\\r\\n    bytes memory nonce,\\r\\n    bytes memory signature,\\r\\n    address signerAddress\\r\\n  ) private pure returns (bool) {\\r\\n    bytes32 hash = keccak256(abi.encodePacked(sender, nonce));\\r\\n    return signerAddress == hash.recover(signature);\\r\\n  }\\r\\n\\r\\n  function _baseURI() internal view virtual override returns (string memory) {\\r\\n    return baseURI;\\r\\n  }\\r\\n\\r\\n  function isPresaleOpen() public view returns (bool) {\\r\\n    return\\r\\n      block.timestamp >= presaleStartTime &&\\r\\n      block.timestamp < (presaleStartTime + presaleWindow);\\r\\n  }\\r\\n\\r\\n  function isPublicSaleOpen() public view returns (bool) {\\r\\n    return block.timestamp >= publicSaleStartTime;\\r\\n  }\\r\\n\\r\\n  function isWhitelisted(address _user) public view returns (bool) {\\r\\n    return whitelistedAddresses[_user];\\r\\n  }\\r\\n\\r\\n  //*************** OWNER FUNCTIONS ******************//\\r\\n  // No possible way to unreveal once it is toggled\\r\\n  function reveal() public onlyOwner {\\r\\n    revealed = true;\\r\\n  }\\r\\n\\r\\n  function setBaseURI(string memory _newBaseURI) public onlyOwner {\\r\\n    baseURI = _newBaseURI;\\r\\n  }\\r\\n\\r\\n  function setShogunToken(address _shogunToken) external onlyOwner {\\r\\n    SHOGUN_TOKEN = IShogunToken(_shogunToken);\\r\\n  }\\r\\n\\r\\n  function pause(bool _state) public onlyOwner {\\r\\n    paused = _state;\\r\\n  }\\r\\n\\r\\n  function whitelistUsers(address[] calldata _users) external onlyOwner {\\r\\n    for (uint256 i = 0; i < _users.length; i++) {\\r\\n      whitelistedAddresses[_users[i]] = true;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function withdrawToTreasury() public payable onlyOwner {\\r\\n    (bool success, ) = treasury.call{ value: address(this).balance }(\\\"\\\"); // returns boolean and data\\r\\n    require(success);\\r\\n  }\\r\\n\\r\\n  function setPresaleOpen(bool _presaleOpen) public onlyOwner {\\r\\n    presaleOpen = _presaleOpen;\\r\\n  }\\r\\n\\r\\n  function setPublicSaleOpen(bool _publicSaleOpen) public onlyOwner {\\r\\n    publicSaleOpen = _publicSaleOpen;\\r\\n  }\\r\\n\\r\\n  function setSignerAddressPresale(address presaleSignerAddresss)\\r\\n    public\\r\\n    onlyOwner\\r\\n  {\\r\\n    signerAddressPresale = presaleSignerAddresss;\\r\\n  }\\r\\n\\r\\n  function setSignerAddressPublic(address publicSignerAddress)\\r\\n    public\\r\\n    onlyOwner\\r\\n  {\\r\\n    signerAddressPublic = publicSignerAddress;\\r\\n  }\\r\\n\\r\\n  function setNotRevealedUri(string memory _notRevealedUri) public onlyOwner {\\r\\n    notRevealedUri = _notRevealedUri;\\r\\n  }\\r\\n\\r\\n  //*************** Future Utility Functions ******************//\\r\\n  function setStakingContractAddress(address _stakingContract)\\r\\n    public\\r\\n    onlyOwner\\r\\n  {\\r\\n    stakingContractAddress = _stakingContract;\\r\\n  }\\r\\n\\r\\n  // sacrifice/burn ERC721\\r\\n  function seppuku(uint256 _tokenId) public {\\r\\n    require(\\r\\n      _isApprovedOrOwner(_msgSender(), _tokenId),\\r\\n      \\\"ERC721: transfer caller is not owner nor approved\\\"\\r\\n    );\\r\\n    _burn(_tokenId);\\r\\n  }\\r\\n\\r\\n  function setNameChangePrice(uint256 _newNameChangePrice) public onlyOwner {\\r\\n    nameChangePrice = _newNameChangePrice;\\r\\n  }\\r\\n\\r\\n  function changeName(uint256 tokenId, string memory newName) public virtual {\\r\\n    address owner = ownerOf(tokenId);\\r\\n    require(_msgSender() == owner, \\\"ERC721: caller is not the owner\\\");\\r\\n    require(validateName(newName) == true, \\\"SHOGUN: Not a valid new name\\\");\\r\\n    require(\\r\\n      sha256(bytes(newName)) != sha256(bytes(shogunName[tokenId])),\\r\\n      \\\"SHOGUN: New name is same as the current one\\\"\\r\\n    );\\r\\n\\r\\n    SHOGUN_TOKEN.burn(_msgSender(), nameChangePrice);\\r\\n    shogunName[tokenId] = newName;\\r\\n  }\\r\\n\\r\\n  function tokenNameByIndex(uint256 index) public view returns (string memory) {\\r\\n    return shogunName[index];\\r\\n  }\\r\\n\\r\\n  function validateName(string memory str) public pure returns (bool) {\\r\\n    bytes memory b = bytes(str);\\r\\n    if (b.length < 1) return false;\\r\\n    if (b.length > 25) return false; // Cannot be longer than 25 characters\\r\\n    if (b[0] == 0x20) return false; // Leading space\\r\\n    if (b[b.length - 1] == 0x20) return false; // Trailing space\\r\\n\\r\\n    bytes1 lastChar = b[0];\\r\\n\\r\\n    for (uint256 i; i < b.length; i++) {\\r\\n      bytes1 char = b[i];\\r\\n\\r\\n      if (char == 0x20 && lastChar == 0x20) return false; // Cannot contain continous spaces\\r\\n\\r\\n      if (\\r\\n        !(char >= 0x30 && char <= 0x39) && //9-0\\r\\n        !(char >= 0x41 && char <= 0x5A) && //A-Z\\r\\n        !(char >= 0x61 && char <= 0x7A) && //a-z\\r\\n        !(char == 0x20) //space\\r\\n      ) return false;\\r\\n\\r\\n      lastChar = char;\\r\\n    }\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function lockToken(uint256[] memory _tokenIds) external onlyStakingContract {\\r\\n    for (uint256 i = 0; i < _tokenIds.length; i++) {\\r\\n      _isLocked[_tokenIds[i]] = true;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function unlockToken(uint256[] memory _tokenIds)\\r\\n    external\\r\\n    onlyStakingContract\\r\\n  {\\r\\n    for (uint256 i = 0; i < _tokenIds.length; i++) {\\r\\n      _isLocked[_tokenIds[i]] = false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _beforeTokenTransfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) internal virtual override(ERC721Enumerable) {\\r\\n    require(_isLocked[tokenId] == false, \\\"SHOGUN: Token is Locked\\\");\\r\\n    super._beforeTokenTransfer(from, to, tokenId);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xac151d0a6681e75882befadedb7bd9c1c9e6b04d41bd6cac2ee49f0ce630b7d4\",\"license\":\"MIT\"},\"contracts/interfaces/IShogunToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IShogunToken is IERC20 {\\r\\n    function updateRewardOnMint(address _user, uint256 _amount) external;\\r\\n\\r\\n    function updateReward(address _from, address _to) external;\\r\\n\\r\\n    function getReward(address _to) external;\\r\\n\\r\\n    function burn(address _from, uint256 _amount) external;\\r\\n\\r\\n    function mint(address to, uint256 amount) external;\\r\\n\\r\\n    function getTotalClaimable(address _user) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x264fda27d92bc53b3585df0fcf25a19c0978ea52ec352f1f65dd4517bd883e85\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106103d95760003560e01c80636c0360eb116101fd578063b88d4fde11610118578063da4ac476116100ab578063edec5f271161007a578063edec5f2714610b39578063f2fde38b14610b59578063f5b9662114610b79578063f9e2379914610b99578063fdc593c314610bb857600080fd5b8063da4ac47614610a9b578063e6cf726b14610abb578063e985e9c514610adb578063eb4f847b14610b2457600080fd5b8063c87b56dd116100e7578063c87b56dd14610a39578063caa8078f14610a59578063ce8b680c14610a6f578063d5abeb0114610a8557600080fd5b8063b88d4fde146109bf578063bee6348a146109df578063c17ecd12146109f9578063c39cbef114610a1957600080fd5b806384a1b902116101905780639ffdb65a1161015f5780639ffdb65a14610954578063a22cb46514610974578063a475b5dd14610994578063a82524b2146109a957600080fd5b806384a1b902146108eb578063885bf15c1461090b5780638da5cb5b1461092157806395d89b411461093f57600080fd5b8063715018a6116101cc578063715018a61461088e578063729ad39e146108a35780637e80c186146108c35780638124428a146108cb57600080fd5b80636c0360eb146108195780636d5224181461082e5780636defcd461461084e57806370a082311461086e57600080fd5b80632e09282e116102f857806349759d951161028b5780635c975abb1161025a5780635c975abb1461078957806361d027b3146107a35780636352211e146107c3578063665adcfd146107e35780636bb7b1d91461080357600080fd5b806349759d951461070a5780634f6ccce71461072a578063518302271461074a57806355f804b31461076957600080fd5b80633af32abf116102c75780633af32abf1461066e57806342842e0e146106a7578063438b6300146106c757806345ca7738146106f457600080fd5b80632e09282e146105f85780632f745c591461060e5780633535f48b1461062e578063375a069a1461064e57600080fd5b806313faede6116103705780631c1f8aa31161033f5780631c1f8aa31461058557806322a589c1146105a557806323394d99146105b857806323b872dd146105d857600080fd5b806313faede61461051457806318160ddd14610538578063190145bb1461054d5780631a6949e31461056d57600080fd5b8063081812fc116103ac578063081812fc14610487578063081c8c44146104bf578063095ea7b3146104d45780630acb7924146104f457600080fd5b806301ffc9a7146103de57806302329a291461041357806306c933d81461043557806306fdde0314610465575b600080fd5b3480156103ea57600080fd5b506103fe6103f9366004613e56565b610bcb565b60405190151581526020015b60405180910390f35b34801561041f57600080fd5b5061043361042e366004613e24565b610bf6565b005b34801561044157600080fd5b506103fe610450366004613b4f565b601f6020526000908152604090205460ff1681565b34801561047157600080fd5b5061047a610c3c565b60405161040a9190614153565b34801561049357600080fd5b506104a76104a2366004613f2b565b610cce565b6040516001600160a01b03909116815260200161040a565b3480156104cb57600080fd5b5061047a610d63565b3480156104e057600080fd5b506104336104ef366004613c65565b610df1565b34801561050057600080fd5b5061043361050f366004613d9d565b610f07565b34801561052057600080fd5b5061052a60125481565b60405190815260200161040a565b34801561054457600080fd5b5060085461052a565b34801561055957600080fd5b5061047a610568366004613f2b565b610fa7565b34801561057957600080fd5b50601a544210156103fe565b34801561059157600080fd5b506104336105a0366004613b4f565b610fc0565b6104336105b3366004613e8e565b61100c565b3480156105c457600080fd5b506104336105d3366004613e24565b611405565b3480156105e457600080fd5b506104336105f3366004613b9b565b611449565b34801561060457600080fd5b5061052a60165481565b34801561061a57600080fd5b5061052a610629366004613c65565b61147b565b34801561063a57600080fd5b50600d546104a7906001600160a01b031681565b34801561065a57600080fd5b50610433610669366004613f2b565b611511565b34801561067a57600080fd5b506103fe610689366004613b4f565b6001600160a01b03166000908152601f602052604090205460ff1690565b3480156106b357600080fd5b506104336106c2366004613b9b565b6115cd565b3480156106d357600080fd5b506106e76106e2366004613b4f565b6115e8565b60405161040a919061410f565b34801561070057600080fd5b5061052a60175481565b34801561071657600080fd5b50610433610725366004613f2b565b6116a6565b34801561073657600080fd5b5061052a610745366004613f2b565b6116d7565b34801561075657600080fd5b50601b546103fe90610100900460ff1681565b34801561077557600080fd5b50610433610784366004613ef8565b611778565b34801561079557600080fd5b50601b546103fe9060ff1681565b3480156107af57600080fd5b50600c546104a7906001600160a01b031681565b3480156107cf57600080fd5b506104a76107de366004613f2b565b6117b5565b3480156107ef57600080fd5b506104336107fe366004613d9d565b61182c565b34801561080f57600080fd5b5061052a601a5481565b34801561082557600080fd5b5061047a6118c8565b34801561083a57600080fd5b5061047a610849366004613f2b565b6118d5565b34801561085a57600080fd5b50610433610869366004613b4f565b611977565b34801561087a57600080fd5b5061052a610889366004613b4f565b6119c3565b34801561089a57600080fd5b50610433611a4a565b3480156108af57600080fd5b506104336108be366004613cfe565b611a80565b610433611c2e565b3480156108d757600080fd5b50600b546104a7906001600160a01b031681565b3480156108f757600080fd5b50610433610906366004613f2b565b611cb8565b34801561091757600080fd5b5061052a60155481565b34801561092d57600080fd5b50600a546001600160a01b03166104a7565b34801561094b57600080fd5b5061047a611ce7565b34801561096057600080fd5b506103fe61096f366004613ef8565b611cf6565b34801561098057600080fd5b5061043361098f366004613c3c565b611f3d565b3480156109a057600080fd5b50610433611f48565b3480156109b557600080fd5b5061052a60195481565b3480156109cb57600080fd5b506104336109da366004613bd6565b611f83565b3480156109eb57600080fd5b50601d546103fe9060ff1681565b348015610a0557600080fd5b50610433610a14366004613ef8565b611fbb565b348015610a2557600080fd5b50610433610a34366004613f43565b611ff8565b348015610a4557600080fd5b5061047a610a54366004613f2b565b61225b565b348015610a6557600080fd5b5061052a60145481565b348015610a7b57600080fd5b5061052a60185481565b348015610a9157600080fd5b5061052a60135481565b348015610aa757600080fd5b50610433610ab6366004613b4f565b6123df565b348015610ac757600080fd5b50610433610ad6366004613b4f565b61242b565b348015610ae757600080fd5b506103fe610af6366004613b69565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b348015610b3057600080fd5b506103fe612477565b348015610b4557600080fd5b50610433610b54366004613c8e565b61249e565b348015610b6557600080fd5b50610433610b74366004613b4f565b612548565b348015610b8557600080fd5b50610433610b94366004613e24565b6125e0565b348015610ba557600080fd5b50601d546103fe90610100900460ff1681565b610433610bc6366004613e8e565b61261d565b60006001600160e01b0319821663780e9d6360e01b1480610bf05750610bf082612a15565b92915050565b600a546001600160a01b03163314610c295760405162461bcd60e51b8152600401610c209061427e565b60405180910390fd5b601b805460ff1916911515919091179055565b606060008054610c4b90614444565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7790614444565b8015610cc45780601f10610c9957610100808354040283529160200191610cc4565b820191906000526020600020905b815481529060010190602001808311610ca757829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b0316610d475760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610c20565b506000908152600460205260409020546001600160a01b031690565b60118054610d7090614444565b80601f0160208091040260200160405190810160405280929190818152602001828054610d9c90614444565b8015610de95780601f10610dbe57610100808354040283529160200191610de9565b820191906000526020600020905b815481529060010190602001808311610dcc57829003601f168201915b505050505081565b6000610dfc826117b5565b9050806001600160a01b0316836001600160a01b03161415610e6a5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610c20565b336001600160a01b0382161480610e865750610e868133610af6565b610ef85760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610c20565b610f028383612a65565b505050565b600d546001600160a01b03163314610f315760405162461bcd60e51b8152600401610c20906141b8565b60005b8151811015610fa3576001601e6000848481518110610f6357634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002060006101000a81548160ff0219169083151502179055508080610f9b90614479565b915050610f34565b5050565b601c6020526000908152604090208054610d7090614444565b600a546001600160a01b03163314610fea5760405162461bcd60e51b8152600401610c209061427e565b600d80546001600160a01b0319166001600160a01b0392909216919091179055565b33321461102b5760405162461bcd60e51b8152600401610c2090614254565b601b5460ff161561103b57600080fd5b601a54421015806110535750601d54610100900460ff165b6110ab5760405162461bcd60e51b815260206004820152602360248201527f53484f47554e3a207075626c69632073616c6520686173206e6f7420737461726044820152621d195960ea1b6064820152608401610c20565b6022836040516110bb9190613fec565b9081526040519081900360200190205460ff16156111145760405162461bcd60e51b815260206004820152601660248201527514d213d1d5538e881b9bdb98d9481dd85cc81d5cd95960521b6044820152606401610c20565b600e5461112f903390859085906001600160a01b0316612ad3565b61116f5760405162461bcd60e51b8152602060048201526011602482015270696e76616c6964207369676e617475726560781b6044820152606401610c20565b600061117a60085490565b601554336000908152602160205260409020549192509061119c9084906143b6565b11156112005760405162461bcd60e51b815260206004820152602d60248201527f53484f47554e3a20596f752068617665206578636565646564206d617820616d60448201526c6f756e74206f66206d696e747360981b6064820152608401610c20565b60145482111561126b5760405162461bcd60e51b815260206004820152603060248201527f53484f47554e3a206578636565646564206d6178206d696e7420616d6f756e7460448201526f103832b9103a3930b739b0b1ba34b7b760811b6064820152608401610c20565b60135461127883836143b6565b11156112965760405162461bcd60e51b8152600401610c20906142b3565b600c546040516000916001600160a01b03169034908381818185875af1925050503d80600081146112e3576040519150601f19603f3d011682016040523d82523d6000602084013e6112e8565b606091505b50509050806113095760405162461bcd60e51b8152600401610c2090614203565b8260125461131791906143e2565b341461137b5760405162461bcd60e51b815260206004820152602d60248201527f53484f47554e3a206e6f7420656e6f7567682065746865722073656e7420666f60448201526c1c881b5a5b9d08185b5bdd5b9d609a1b6064820152608401610c20565b60015b8381116113cb573360009081526021602052604081208054916113a083614479565b909155506113b99050336113b483866143b6565b612b2d565b806113c381614479565b91505061137e565b5060016022866040516113de9190613fec565b908152604051908190036020019020805491151560ff199092169190911790555050505050565b600a546001600160a01b0316331461142f5760405162461bcd60e51b8152600401610c209061427e565b601d80549115156101000261ff0019909216919091179055565b611454335b82612b47565b6114705760405162461bcd60e51b8152600401610c2090614310565b610f02838383612c3a565b6000611486836119c3565b82106114e85760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610c20565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b3332146115305760405162461bcd60e51b8152600401610c2090614254565b600a546001600160a01b0316331461155a5760405162461bcd60e51b8152600401610c209061427e565b601b5460ff161561156a57600080fd5b600061157560085490565b60135490915061158583836143b6565b11156115a35760405162461bcd60e51b8152600401610c20906142b3565b60015b828111610f02576115bb336113b483856143b6565b806115c581614479565b9150506115a6565b610f0283838360405180602001604052806000815250611f83565b606060006115f5836119c3565b905060008167ffffffffffffffff81111561162057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611649578160200160208202803683370190505b50905060005b8281101561169e57611661858261147b565b82828151811061168157634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061169681614479565b91505061164f565b509392505050565b6116af3361144e565b6116cb5760405162461bcd60e51b8152600401610c2090614310565b6116d481612de1565b50565b60006116e260085490565b82106117455760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610c20565b6008828154811061176657634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b600a546001600160a01b031633146117a25760405162461bcd60e51b8152600401610c209061427e565b8051610fa3906010906020840190613a1f565b6000818152600260205260408120546001600160a01b031680610bf05760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610c20565b600d546001600160a01b031633146118565760405162461bcd60e51b8152600401610c20906141b8565b60005b8151811015610fa3576000601e600084848151811061188857634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002060006101000a81548160ff02191690831515021790555080806118c090614479565b915050611859565b60108054610d7090614444565b6000818152601c602052604090208054606091906118f290614444565b80601f016020809104026020016040519081016040528092919081815260200182805461191e90614444565b801561196b5780601f106119405761010080835404028352916020019161196b565b820191906000526020600020905b81548152906001019060200180831161194e57829003601f168201915b50505050509050919050565b600a546001600160a01b031633146119a15760405162461bcd60e51b8152600401610c209061427e565b600f80546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160a01b038216611a2e5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610c20565b506001600160a01b031660009081526003602052604090205490565b600a546001600160a01b03163314611a745760405162461bcd60e51b8152600401610c209061427e565b611a7e6000612e88565b565b333214611a9f5760405162461bcd60e51b8152600401610c2090614254565b600a546001600160a01b03163314611ac95760405162461bcd60e51b8152600401610c209061427e565b601b5460ff1615611b1c5760405162461bcd60e51b815260206004820152601a60248201527f53484f47554e3a20636f6e7472616374206973207061757365640000000000006044820152606401610c20565b8051611b27336119c3565b1015611b8d5760405162461bcd60e51b815260206004820152602f60248201527f53484f47554e3a206e6f7420656e6f75676820696e2077616c6c657420666f7260448201526e08185a5c991c9bdc08185b5bdd5b9d608a1b6064820152608401610c20565b6000611b98336115e8565b905060005b8251811015610f0257611c1c33848381518110611bca57634e487b7160e01b600052603260045260246000fd5b6020026020010151848481518110611bf257634e487b7160e01b600052603260045260246000fd5b6020026020010151604051806040016040528060048152602001630307830360e41b815250612eda565b80611c2681614479565b915050611b9d565b600a546001600160a01b03163314611c585760405162461bcd60e51b8152600401610c209061427e565b600c546040516000916001600160a01b03169047908381818185875af1925050503d8060008114611ca5576040519150601f19603f3d011682016040523d82523d6000602084013e611caa565b606091505b50509050806116d457600080fd5b600a546001600160a01b03163314611ce25760405162461bcd60e51b8152600401610c209061427e565b601755565b606060018054610c4b90614444565b600080829050600181511015611d0f5750600092915050565b601981511115611d225750600092915050565b80600081518110611d4357634e487b7160e01b600052603260045260246000fd5b6020910101516001600160f81b031916600160fd1b1415611d675750600092915050565b8060018251611d769190614401565b81518110611d9457634e487b7160e01b600052603260045260246000fd5b6020910101516001600160f81b031916600160fd1b1415611db85750600092915050565b600081600081518110611ddb57634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b031916905060005b8251811015611f32576000838281518110611e1a57634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b0319169050600160fd1b81148015611e4b5750600160fd1b6001600160f81b03198416145b15611e5c5750600095945050505050565b600360fc1b6001600160f81b0319821610801590611e885750603960f81b6001600160f81b0319821611155b158015611ebe5750604160f81b6001600160f81b0319821610801590611ebc5750602d60f91b6001600160f81b0319821611155b155b8015611ef35750606160f81b6001600160f81b0319821610801590611ef15750603d60f91b6001600160f81b0319821611155b155b8015611f0d5750600160fd1b6001600160f81b0319821614155b15611f1e5750600095945050505050565b915080611f2a81614479565b915050611def565b506001949350505050565b610fa3338383612f0d565b600a546001600160a01b03163314611f725760405162461bcd60e51b8152600401610c209061427e565b601b805461ff001916610100179055565b611f8d3383612b47565b611fa95760405162461bcd60e51b8152600401610c2090614310565b611fb584848484612eda565b50505050565b600a546001600160a01b03163314611fe55760405162461bcd60e51b8152600401610c209061427e565b8051610fa3906011906020840190613a1f565b6000612003836117b5565b9050336001600160a01b0382161461205d5760405162461bcd60e51b815260206004820152601f60248201527f4552433732313a2063616c6c6572206973206e6f7420746865206f776e6572006044820152606401610c20565b61206682611cf6565b15156001146120b75760405162461bcd60e51b815260206004820152601c60248201527f53484f47554e3a204e6f7420612076616c6964206e6577206e616d65000000006044820152606401610c20565b6000838152601c60205260409081902090516002916120d591614008565b602060405180830381855afa1580156120f2573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906121159190613e3e565b6002836040516121259190613fec565b602060405180830381855afa158015612142573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906121659190613e3e565b14156121c75760405162461bcd60e51b815260206004820152602b60248201527f53484f47554e3a204e6577206e616d652069732073616d65206173207468652060448201526a63757272656e74206f6e6560a81b6064820152608401610c20565b600b546001600160a01b0316639dc29fac336017546040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561222257600080fd5b505af1158015612236573d6000803e3d6000fd5b5050506000848152601c602090815260409091208451611fb593509091850190613a1f565b6000818152600260205260409020546060906001600160a01b03166122da5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610c20565b60006122e4612fdc565b601b54909150610100900460ff16612389576011805461230390614444565b80601f016020809104026020016040519081016040528092919081815260200182805461232f90614444565b801561237c5780601f106123515761010080835404028352916020019161237c565b820191906000526020600020905b81548152906001019060200180831161235f57829003601f168201915b5050505050915050919050565b60008151116123a757604051806020016040528060008152506123d2565b806123b184612feb565b6040516020016123c29291906140a3565b6040516020818303038152906040525b9392505050565b50919050565b600a546001600160a01b031633146124095760405162461bcd60e51b8152600401610c209061427e565b600e80546001600160a01b0319166001600160a01b0392909216919091179055565b600a546001600160a01b031633146124555760405162461bcd60e51b8152600401610c209061427e565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b60006019544210158015612499575060185460195461249691906143b6565b42105b905090565b600a546001600160a01b031633146124c85760405162461bcd60e51b8152600401610c209061427e565b60005b81811015610f02576001601f60008585858181106124f957634e487b7160e01b600052603260045260246000fd5b905060200201602081019061250e9190613b4f565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558061254081614479565b9150506124cb565b600a546001600160a01b031633146125725760405162461bcd60e51b8152600401610c209061427e565b6001600160a01b0381166125d75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c20565b6116d481612e88565b600a546001600160a01b0316331461260a5760405162461bcd60e51b8152600401610c209061427e565b601d805460ff1916911515919091179055565b33321461263c5760405162461bcd60e51b8152600401610c2090614254565b601b5460ff161561268f5760405162461bcd60e51b815260206004820152601a60248201527f53484f47554e3a20636f6e7472616374206973207061757365640000000000006044820152606401610c20565b612697612477565b806126a45750601d5460ff165b6127085760405162461bcd60e51b815260206004820152602f60248201527f53484f47554e3a2070726573616c6520686173206e6f7420737461727465642060448201526e1bdc881a5d081a185cc8195b991959608a1b6064820152608401610c20565b336000908152601f602052604090205460ff166127735760405162461bcd60e51b8152602060048201526024808201527f53484f47554e3a20796f7520617265206e6f7420696e207468652077686974656044820152631b1a5cdd60e21b6064820152608401610c20565b6022836040516127839190613fec565b9081526040519081900360200190205460ff16156127dc5760405162461bcd60e51b815260206004820152601660248201527514d213d1d5538e881b9bdb98d9481dd85cc81d5cd95960521b6044820152606401610c20565b600f546127f7903390859085906001600160a01b0316612ad3565b6128435760405162461bcd60e51b815260206004820152601960248201527f53484f47554e3a20696e76616c6964207369676e6174757265000000000000006044820152606401610c20565b600061284e60085490565b6016543360009081526020805260409020549192509061286f9084906143b6565b11156128e35760405162461bcd60e51b815260206004820152603d60248201527f53484f47554e3a20796f752063616e206f6e6c79206d696e742061206d61786960448201527f6d756d206f662074776f206e667420647572696e672070726573616c650000006064820152608401610c20565b816012546128f191906143e2565b3410156129585760405162461bcd60e51b815260206004820152602f60248201527f53484f47554e3a206e6f7420656e6f75676874206574686572652073656e742060448201526e199bdc881b5a5b9d08185b5bdd5b9d608a1b6064820152608401610c20565b600c546040516000916001600160a01b03169034908381818185875af1925050503d80600081146129a5576040519150601f19603f3d011682016040523d82523d6000602084013e6129aa565b606091505b50509050806129cb5760405162461bcd60e51b8152600401610c2090614203565b60015b8381116113cb5733600090815260208052604081208054916129ef83614479565b90915550612a039050336113b483866143b6565b80612a0d81614479565b9150506129ce565b60006001600160e01b031982166380ac58cd60e01b1480612a4657506001600160e01b03198216635b5e139f60e01b145b80610bf057506301ffc9a760e01b6001600160e01b0319831614610bf0565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612a9a826117b5565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000808585604051602001612ae9929190613fb4565b60408051601f1981840301815291905280516020909101209050612b0d8185613105565b6001600160a01b0316836001600160a01b0316149150505b949350505050565b610fa3828260405180602001604052806000815250613121565b6000818152600260205260408120546001600160a01b0316612bc05760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610c20565b6000612bcb836117b5565b9050806001600160a01b0316846001600160a01b03161480612c065750836001600160a01b0316612bfb84610cce565b6001600160a01b0316145b80612b2557506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff16612b25565b826001600160a01b0316612c4d826117b5565b6001600160a01b031614612cb15760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610c20565b6001600160a01b038216612d135760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610c20565b612d1e838383613154565b612d29600082612a65565b6001600160a01b0383166000908152600360205260408120805460019290612d52908490614401565b90915550506001600160a01b0382166000908152600360205260408120805460019290612d809084906143b6565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000612dec826117b5565b9050612dfa81600084613154565b612e05600083612a65565b6001600160a01b0381166000908152600360205260408120805460019290612e2e908490614401565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b612ee5848484612c3a565b612ef1848484846131be565b611fb55760405162461bcd60e51b8152600401610c2090614166565b816001600160a01b0316836001600160a01b03161415612f6f5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610c20565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b606060108054610c4b90614444565b60608161300f5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115613039578061302381614479565b91506130329050600a836143ce565b9150613013565b60008167ffffffffffffffff81111561306257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561308c576020820181803683370190505b5090505b8415612b25576130a1600183614401565b91506130ae600a86614494565b6130b99060306143b6565b60f81b8183815181106130dc57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506130fe600a866143ce565b9450613090565b600080600061311485856132c8565b9150915061169e81613338565b61312b8383613539565b61313860008484846131be565b610f025760405162461bcd60e51b8152600401610c2090614166565b6000818152601e602052604090205460ff16156131b35760405162461bcd60e51b815260206004820152601760248201527f53484f47554e3a20546f6b656e206973204c6f636b65640000000000000000006044820152606401610c20565b610f02838383613687565b60006001600160a01b0384163b156132c057604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906132029033908990889088906004016140d2565b602060405180830381600087803b15801561321c57600080fd5b505af192505050801561324c575060408051601f3d908101601f1916820190925261324991810190613e72565b60015b6132a6573d80801561327a576040519150601f19603f3d011682016040523d82523d6000602084013e61327f565b606091505b50805161329e5760405162461bcd60e51b8152600401610c2090614166565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612b25565b506001612b25565b6000808251604114156132ff5760208301516040840151606085015160001a6132f38782858561373f565b94509450505050613331565b825160401415613329576020830151604084015161331e86838361382c565b935093505050613331565b506000905060025b9250929050565b600081600481111561335a57634e487b7160e01b600052602160045260246000fd5b14156133635750565b600181600481111561338557634e487b7160e01b600052602160045260246000fd5b14156133d35760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610c20565b60028160048111156133f557634e487b7160e01b600052602160045260246000fd5b14156134435760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610c20565b600381600481111561346557634e487b7160e01b600052602160045260246000fd5b14156134be5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610c20565b60048160048111156134e057634e487b7160e01b600052602160045260246000fd5b14156116d45760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610c20565b6001600160a01b03821661358f5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610c20565b6000818152600260205260409020546001600160a01b0316156135f45760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610c20565b61360060008383613154565b6001600160a01b03821660009081526003602052604081208054600192906136299084906143b6565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160a01b0383166136e2576136dd81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b613705565b816001600160a01b0316836001600160a01b031614613705576137058382613865565b6001600160a01b03821661371c57610f0281613902565b826001600160a01b0316826001600160a01b031614610f0257610f0282826139db565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156137765750600090506003613823565b8460ff16601b1415801561378e57508460ff16601c14155b1561379f5750600090506004613823565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156137f3573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661381c57600060019250925050613823565b9150600090505b94509492505050565b6000806001600160ff1b0383168161384960ff86901c601b6143b6565b90506138578782888561373f565b935093505050935093915050565b60006001613872846119c3565b61387c9190614401565b6000838152600760205260409020549091508082146138cf576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061391490600190614401565b6000838152600960205260408120546008805493945090928490811061394a57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050806008838154811061397957634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806139bf57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b60006139e6836119c3565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b828054613a2b90614444565b90600052602060002090601f016020900481019282613a4d5760008555613a93565b82601f10613a6657805160ff1916838001178555613a93565b82800160010185558215613a93579182015b82811115613a93578251825591602001919060010190613a78565b50613a9f929150613aa3565b5090565b5b80821115613a9f5760008155600101613aa4565b80356001600160a01b0381168114613acf57600080fd5b919050565b80358015158114613acf57600080fd5b600082601f830112613af4578081fd5b813567ffffffffffffffff811115613b0e57613b0e6144d4565b613b21601f8201601f1916602001614361565b818152846020838601011115613b35578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215613b60578081fd5b6123d282613ab8565b60008060408385031215613b7b578081fd5b613b8483613ab8565b9150613b9260208401613ab8565b90509250929050565b600080600060608486031215613baf578081fd5b613bb884613ab8565b9250613bc660208501613ab8565b9150604084013590509250925092565b60008060008060808587031215613beb578081fd5b613bf485613ab8565b9350613c0260208601613ab8565b925060408501359150606085013567ffffffffffffffff811115613c24578182fd5b613c3087828801613ae4565b91505092959194509250565b60008060408385031215613c4e578182fd5b613c5783613ab8565b9150613b9260208401613ad4565b60008060408385031215613c77578182fd5b613c8083613ab8565b946020939093013593505050565b60008060208385031215613ca0578182fd5b823567ffffffffffffffff80821115613cb7578384fd5b818501915085601f830112613cca578384fd5b813581811115613cd8578485fd5b8660208260051b8501011115613cec578485fd5b60209290920196919550909350505050565b60006020808385031215613d10578182fd5b823567ffffffffffffffff811115613d26578283fd5b8301601f81018513613d36578283fd5b8035613d49613d4482614392565b614361565b80828252848201915084840188868560051b8701011115613d68578687fd5b8694505b83851015613d9157613d7d81613ab8565b835260019490940193918501918501613d6c565b50979650505050505050565b60006020808385031215613daf578182fd5b823567ffffffffffffffff811115613dc5578283fd5b8301601f81018513613dd5578283fd5b8035613de3613d4482614392565b80828252848201915084840188868560051b8701011115613e02578687fd5b8694505b83851015613d91578035835260019490940193918501918501613e06565b600060208284031215613e35578081fd5b6123d282613ad4565b600060208284031215613e4f578081fd5b5051919050565b600060208284031215613e67578081fd5b81356123d2816144ea565b600060208284031215613e83578081fd5b81516123d2816144ea565b600080600060608486031215613ea2578081fd5b833567ffffffffffffffff80821115613eb9578283fd5b613ec587838801613ae4565b94506020860135915080821115613eda578283fd5b50613ee786828701613ae4565b925050604084013590509250925092565b600060208284031215613f09578081fd5b813567ffffffffffffffff811115613f1f578182fd5b612b2584828501613ae4565b600060208284031215613f3c578081fd5b5035919050565b60008060408385031215613f55578182fd5b82359150602083013567ffffffffffffffff811115613f72578182fd5b613f7e85828601613ae4565b9150509250929050565b60008151808452613fa0816020860160208601614418565b601f01601f19169290920160200192915050565b6bffffffffffffffffffffffff198360601b16815260008251613fde816014850160208701614418565b919091016014019392505050565b60008251613ffe818460208701614418565b9190910192915050565b600080835482600182811c91508083168061402457607f831692505b602080841082141561404457634e487b7160e01b87526022600452602487fd5b818015614058576001811461406957614095565b60ff19861689528489019650614095565b60008a815260209020885b8681101561408d5781548b820152908501908301614074565b505084890196505b509498975050505050505050565b600083516140b5818460208801614418565b8351908301906140c9818360208801614418565b01949350505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061410590830184613f88565b9695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156141475783518352928401929184019160010161412b565b50909695505050505050565b6020815260006123d26020830184613f88565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252602b908201527f53484f47554e3a204f6e6c792063616c6c61626c652066726f6d207374616b6960408201526a1b99c818dbdb9d1c9858dd60aa1b606082015260800190565b60208082526031908201527f53484f47554e3a206e6f742061626c6520746f20666f7277617264206d73672060408201527076616c756520746f20747265617375727960781b606082015260800190565b60208082526010908201526f53484f47554e3a204f6e6c7920454f4160801b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252603e908201527f53484f47554e3a20746f74616c206d696e7420616d6f756e742065786365656460408201527f656420737570706c792c20747279206c6f776572696e6720616d6f756e740000606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b604051601f8201601f1916810167ffffffffffffffff8111828210171561438a5761438a6144d4565b604052919050565b600067ffffffffffffffff8211156143ac576143ac6144d4565b5060051b60200190565b600082198211156143c9576143c96144a8565b500190565b6000826143dd576143dd6144be565b500490565b60008160001904831182151516156143fc576143fc6144a8565b500290565b600082821015614413576144136144a8565b500390565b60005b8381101561443357818101518382015260200161441b565b83811115611fb55750506000910152565b600181811c9082168061445857607f821691505b602082108114156123d957634e487b7160e01b600052602260045260246000fd5b600060001982141561448d5761448d6144a8565b5060010190565b6000826144a3576144a36144be565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146116d457600080fdfea264697066735822122074707f17babdce0bc454dae7c9c2feb415716e7a8cbcb20ca1787320dc7f1ca164736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2707,
        "contract": "contracts/ShogunNFT.sol:ShogunNFT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 2709,
        "contract": "contracts/ShogunNFT.sol:ShogunNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2713,
        "contract": "contracts/ShogunNFT.sol:ShogunNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2717,
        "contract": "contracts/ShogunNFT.sol:ShogunNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2721,
        "contract": "contracts/ShogunNFT.sol:ShogunNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2727,
        "contract": "contracts/ShogunNFT.sol:ShogunNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3696,
        "contract": "contracts/ShogunNFT.sol:ShogunNFT",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 3700,
        "contract": "contracts/ShogunNFT.sol:ShogunNFT",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3703,
        "contract": "contracts/ShogunNFT.sol:ShogunNFT",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3707,
        "contract": "contracts/ShogunNFT.sol:ShogunNFT",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1537,
        "contract": "contracts/ShogunNFT.sol:ShogunNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 5587,
        "contract": "contracts/ShogunNFT.sol:ShogunNFT",
        "label": "SHOGUN_TOKEN",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IShogunToken)10079"
      },
      {
        "astId": 5589,
        "contract": "contracts/ShogunNFT.sol:ShogunNFT",
        "label": "treasury",
        "offset": 0,
        "slot": "12",
        "type": "t_address_payable"
      },
      {
        "astId": 5591,
        "contract": "contracts/ShogunNFT.sol:ShogunNFT",
        "label": "stakingContractAddress",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 5593,
        "contract": "contracts/ShogunNFT.sol:ShogunNFT",
        "label": "signerAddressPublic",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 5595,
        "contract": "contracts/ShogunNFT.sol:ShogunNFT",
        "label": "signerAddressPresale",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 5597,
        "contract": "contracts/ShogunNFT.sol:ShogunNFT",
        "label": "baseURI",
        "offset": 0,
        "slot": "16",
        "type": "t_string_storage"
      },
      {
        "astId": 5599,
        "contract": "contracts/ShogunNFT.sol:ShogunNFT",
        "label": "notRevealedUri",
        "offset": 0,
        "slot": "17",
        "type": "t_string_storage"
      },
      {
        "astId": 5602,
        "contract": "contracts/ShogunNFT.sol:ShogunNFT",
        "label": "cost",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 5605,
        "contract": "contracts/ShogunNFT.sol:ShogunNFT",
        "label": "maxSupply",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 5608,
        "contract": "contracts/ShogunNFT.sol:ShogunNFT",
        "label": "maxMintPerTxn",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 5611,
        "contract": "contracts/ShogunNFT.sol:ShogunNFT",
        "label": "nftPerAddressLimitPublic",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 5614,
        "contract": "contracts/ShogunNFT.sol:ShogunNFT",
        "label": "nftPerAddressLimitPresale",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 5617,
        "contract": "contracts/ShogunNFT.sol:ShogunNFT",
        "label": "nameChangePrice",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 5620,
        "contract": "contracts/ShogunNFT.sol:ShogunNFT",
        "label": "presaleWindow",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 5623,
        "contract": "contracts/ShogunNFT.sol:ShogunNFT",
        "label": "presaleStartTime",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 5626,
        "contract": "contracts/ShogunNFT.sol:ShogunNFT",
        "label": "publicSaleStartTime",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      },
      {
        "astId": 5629,
        "contract": "contracts/ShogunNFT.sol:ShogunNFT",
        "label": "paused",
        "offset": 0,
        "slot": "27",
        "type": "t_bool"
      },
      {
        "astId": 5632,
        "contract": "contracts/ShogunNFT.sol:ShogunNFT",
        "label": "revealed",
        "offset": 1,
        "slot": "27",
        "type": "t_bool"
      },
      {
        "astId": 5636,
        "contract": "contracts/ShogunNFT.sol:ShogunNFT",
        "label": "shogunName",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 5639,
        "contract": "contracts/ShogunNFT.sol:ShogunNFT",
        "label": "presaleOpen",
        "offset": 0,
        "slot": "29",
        "type": "t_bool"
      },
      {
        "astId": 5642,
        "contract": "contracts/ShogunNFT.sol:ShogunNFT",
        "label": "publicSaleOpen",
        "offset": 1,
        "slot": "29",
        "type": "t_bool"
      },
      {
        "astId": 5646,
        "contract": "contracts/ShogunNFT.sol:ShogunNFT",
        "label": "_isLocked",
        "offset": 0,
        "slot": "30",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 5650,
        "contract": "contracts/ShogunNFT.sol:ShogunNFT",
        "label": "whitelistedAddresses",
        "offset": 0,
        "slot": "31",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5654,
        "contract": "contracts/ShogunNFT.sol:ShogunNFT",
        "label": "presaleAddressMintedAmount",
        "offset": 0,
        "slot": "32",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5658,
        "contract": "contracts/ShogunNFT.sol:ShogunNFT",
        "label": "publicAddressMintedAmount",
        "offset": 0,
        "slot": "33",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5662,
        "contract": "contracts/ShogunNFT.sol:ShogunNFT",
        "label": "_nonceUsed",
        "offset": 0,
        "slot": "34",
        "type": "t_mapping(t_bytes_memory_ptr,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IShogunToken)10079": {
        "encoding": "inplace",
        "label": "contract IShogunToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}