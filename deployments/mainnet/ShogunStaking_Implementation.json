{
  "address": "0x29C8CBc995e2122E06Bf46fDf7198e347DFCabb3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimTime",
          "type": "uint256"
        }
      ],
      "name": "BonusClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimTime",
          "type": "uint256"
        }
      ],
      "name": "RewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "trainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "shogunIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "TrainingEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "trainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "shogunIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        }
      ],
      "name": "TrainingStarted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SHO",
      "outputs": [
        {
          "internalType": "contract IShogunToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SS",
      "outputs": [
        {
          "internalType": "contract IShogunNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ss",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_baseReward",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "__ShogunStaking_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "to",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amount",
          "type": "uint256[]"
        }
      ],
      "name": "airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "areAvailiable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "out",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "areOwned",
      "outputs": [
        {
          "internalType": "bool",
          "name": "out",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bonusSHO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trainId",
          "type": "uint256"
        }
      ],
      "name": "calculateRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimAllRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimBonusSHO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "familyId",
          "type": "uint256"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "countMultipliers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "trainIds",
          "type": "uint256[]"
        }
      ],
      "name": "endMultipleTraining",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trainId",
          "type": "uint256"
        }
      ],
      "name": "endTraining",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "families",
      "outputs": [
        {
          "internalType": "address",
          "name": "familyOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lastClaim",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "guildMultiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "medallionMultiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shogunBonus",
          "type": "uint256"
        },
        {
          "internalType": "enum ShogunStaking.TrainState",
          "name": "trainState",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "guildCount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "sameGuild",
          "type": "bool"
        }
      ],
      "name": "getCountMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trainId",
          "type": "uint256"
        }
      ],
      "name": "getFamily",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "familyOwner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lastClaim",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "guildMultiplier",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "medallionMultiplier",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shogunBonus",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "shogunIds",
              "type": "uint256[]"
            },
            {
              "internalType": "enum ShogunStaking.TrainState",
              "name": "trainState",
              "type": "uint8"
            }
          ],
          "internalType": "struct ShogunStaking.Family",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getGuild",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getTotalMedallionMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserFamilies",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "guildMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "guilds",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isLegendarySamurai",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "medallionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "medallionMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "onTraining",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setBaseReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "setBonusSHO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_countMultipliers",
          "type": "uint256[]"
        }
      ],
      "name": "setCountMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_guildMultiplier",
          "type": "uint256"
        }
      ],
      "name": "setGuildMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "shogunIds",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "flags",
          "type": "bool[]"
        }
      ],
      "name": "setLegendaryShoguns",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "quantities",
          "type": "uint256[]"
        }
      ],
      "name": "setMedallionCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_medallionMultiplier",
          "type": "uint256"
        }
      ],
      "name": "setMedallionMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sho",
          "type": "address"
        }
      ],
      "name": "setSHOToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shogunBonus",
          "type": "uint256"
        }
      ],
      "name": "setShogunBonus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newTimescale",
          "type": "uint256"
        }
      ],
      "name": "setTimeScale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shogunBonus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "shogunIds",
          "type": "uint256[]"
        }
      ],
      "name": "startTraining",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[][]",
          "name": "shogunIdsArray",
          "type": "uint256[][]"
        }
      ],
      "name": "startTrainingMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_guilds",
          "type": "bytes"
        }
      ],
      "name": "updateGuilds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userFamilies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5d05650f2dcb949dff9a274617f6fc0441f4165a74a01dc72d9314d33f97c130",
  "receipt": {
    "to": null,
    "from": "0xB4f2257696F31c1646940E7256BD6716Ec5B5C02",
    "contractAddress": "0x29C8CBc995e2122E06Bf46fDf7198e347DFCabb3",
    "transactionIndex": 272,
    "gasUsed": "3051002",
    "logsBloom": "0x
    "blockHash": "0x8fbb7acb43b4d8202b366f06109d58b225d2f3da8927fc2f24e29a54158563c2",
    "transactionHash": "0x5d05650f2dcb949dff9a274617f6fc0441f4165a74a01dc72d9314d33f97c130",
    "logs": [],
    "blockNumber": 13568752,
    "cumulativeGasUsed": "17154688",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "34fcfe5376f8788a1869e39f17ac1c8d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimTime\",\"type\":\"uint256\"}],\"name\":\"BonusClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimTime\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"shogunIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"TrainingEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"shogunIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"TrainingStarted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHO\",\"outputs\":[{\"internalType\":\"contract IShogunToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SS\",\"outputs\":[{\"internalType\":\"contract IShogunNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ss\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_baseReward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"__ShogunStaking_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"areAvailiable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"out\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"areOwned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"out\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bonusSHO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trainId\",\"type\":\"uint256\"}],\"name\":\"calculateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAllRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBonusSHO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"familyId\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"countMultipliers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"trainIds\",\"type\":\"uint256[]\"}],\"name\":\"endMultipleTraining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trainId\",\"type\":\"uint256\"}],\"name\":\"endTraining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"families\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"familyOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guildMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"medallionMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shogunBonus\",\"type\":\"uint256\"},{\"internalType\":\"enum ShogunStaking.TrainState\",\"name\":\"trainState\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"guildCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sameGuild\",\"type\":\"bool\"}],\"name\":\"getCountMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trainId\",\"type\":\"uint256\"}],\"name\":\"getFamily\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"familyOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guildMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"medallionMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shogunBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"shogunIds\",\"type\":\"uint256[]\"},{\"internalType\":\"enum ShogunStaking.TrainState\",\"name\":\"trainState\",\"type\":\"uint8\"}],\"internalType\":\"struct ShogunStaking.Family\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getGuild\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTotalMedallionMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserFamilies\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guildMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guilds\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isLegendarySamurai\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"medallionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"medallionMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"onTraining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setBaseReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"setBonusSHO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_countMultipliers\",\"type\":\"uint256[]\"}],\"name\":\"setCountMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_guildMultiplier\",\"type\":\"uint256\"}],\"name\":\"setGuildMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"shogunIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"flags\",\"type\":\"bool[]\"}],\"name\":\"setLegendaryShoguns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"}],\"name\":\"setMedallionCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_medallionMultiplier\",\"type\":\"uint256\"}],\"name\":\"setMedallionMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sho\",\"type\":\"address\"}],\"name\":\"setSHOToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shogunBonus\",\"type\":\"uint256\"}],\"name\":\"setShogunBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTimescale\",\"type\":\"uint256\"}],\"name\":\"setTimeScale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shogunBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"shogunIds\",\"type\":\"uint256[]\"}],\"name\":\"startTraining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"shogunIdsArray\",\"type\":\"uint256[][]\"}],\"name\":\"startTrainingMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_guilds\",\"type\":\"bytes\"}],\"name\":\"updateGuilds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userFamilies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"airdrop(address[],uint256[])\":{\"details\":\"Airdrop SHO Tokens out of contract\"},\"areAvailiable(uint256[])\":{\"details\":\"Determines if the tokenIds are availiable for training\"},\"areOwned(uint256[])\":{\"details\":\"Determines if the all tokenIds are owned by msg sneder\"},\"calculateRewards(uint256)\":{\"details\":\"Caluclate rewards for given Family Id\"},\"claimAllRewards()\":{\"details\":\"QOL to claim all rewards\"},\"claimBonusSHO()\":{\"details\":\"Lets user claim bonus SHO\"},\"claimRewards(uint256)\":{\"details\":\"Claim SHO reward for given family Id\"},\"endMultipleTraining(uint256[])\":{\"details\":\"Claim tokens and leave train\"},\"endTraining(uint256)\":{\"details\":\"Claim tokens and leave train\"},\"getCountMultiplier(uint256,bool)\":{\"details\":\"Retrieves Count multiplier\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTotalMedallionMultiplier(address)\":{\"details\":\"Retrieves Rare multiplier\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setBonusSHO(address[],uint256[])\":{\"details\":\"Set bonus SHO Tokens to be claimed\"},\"startTraining(uint256[])\":{\"details\":\"Start train\"},\"startTrainingMultiple(uint256[][])\":{\"details\":\"Start Multiple Training Sessions\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"updateGuilds(bytes)\":{\"details\":\"Storing Guild Metadata as 1 byte hexes on a byte for gas optimization\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"endMultipleTraining(uint256[])\":{\"notice\":\"End train for SSs. You will stop acumulating SHO.\"},\"endTraining(uint256)\":{\"notice\":\"End train for SSs. You will stop acumulating SHO.\"},\"startTraining(uint256[])\":{\"notice\":\"Sends SSs (max. 5) on a train, SSs of the same Guild and if rare will get a bonus multiplier!\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ShogunStaking.sol\":\"ShogunStaking\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x29d96f28c0dfcd25ddffef02e56438bde20e1135df9745d7eeb196f08665da6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb138a22255a0c28ffa169cd269120bbfa27711cefe14b531462b22560cf374fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x3d03f5cb8b9f17b75c3b6eb4921b1fe7b87ed77cf0c8638496eee5183a5101e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721HolderUpgradeable is Initializable, IERC721ReceiverUpgradeable {\\n    function __ERC721Holder_init() internal initializer {\\n        __ERC721Holder_init_unchained();\\n    }\\n\\n    function __ERC721Holder_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x430803579a1c09eb16a4275d43d8c9cd71b2931e40a9ab6c9feeff603ad70745\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x00c96e792d367a436015f12ce2665aa8e2a0d61d2c6045a82cbb37da20e5a042\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x603946f0dc2541ff45f4b5cb1424ed1870eb24f3396cd318b1996e7e65278907\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/ShogunStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IShogunToken.sol\\\";\\nimport \\\"./interfaces/IShogunNFT.sol\\\";\\n\\n/*  _____ _                             _____                                 _     \\n  / ____| |                            / ____|                               (_)    \\n | (___ | |__   ___   __ _ _   _ _ __ | (___   __ _ _ __ ___  _   _ _ __ __ _ _ ___ \\n  \\\\___ \\\\| '_ \\\\ / _ \\\\ / _` | | | | '_ \\\\ \\\\___ \\\\ / _` | '_ ` _ \\\\| | | | '__/ _` | / __|\\n  ____) | | | | (_) | (_| | |_| | | | |____) | (_| | | | | | | |_| | | | (_| | \\\\__ \\\\\\n |_____/|_| |_|\\\\___/ \\\\__, |\\\\__,_|_| |_|_____/ \\\\__,_|_| |_| |_|\\\\__,_|_|  \\\\__,_|_|___/\\n                      __/ |                                                         \\n                     |___/    \\n*/\\n\\ncontract ShogunStaking is\\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    ERC721HolderUpgradeable\\n{\\n    using SafeMathUpgradeable for uint256;\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    struct Family {\\n        address familyOwner;\\n        uint256 lastClaim;\\n        uint256 guildMultiplier;\\n        uint256 medallionMultiplier;\\n        uint256 shogunBonus;\\n        uint256[] shogunIds;\\n        TrainState trainState;\\n    }\\n\\n    struct GuildCounter {\\n        uint8 justiceCount;\\n        uint8 courageCount;\\n        uint8 compassionCount;\\n        uint8 respectCount;\\n        uint8 integrityCount;\\n        uint8 honourCount;\\n        uint8 dutyCount;\\n        uint8 restraintCount;\\n    }\\n\\n    enum TrainState {\\n        IN_PROGRESS,\\n        ENDED\\n    }\\n\\n    IShogunNFT public SS;\\n    IShogunToken public SHO;\\n\\n    uint256 public baseReward;\\n    uint256 private timescale;\\n\\n    uint256[] public countMultipliers;\\n    uint256 public guildMultiplier;\\n    uint256 public medallionMultiplier;\\n    uint256 public shogunBonus;\\n    mapping(uint256 => bool) public isLegendarySamurai;\\n    mapping(address => uint256) public medallionCount;\\n\\n    bytes public guilds;\\n\\n    mapping(uint256 => Family) public families; // Map id to Family\\n    mapping(address => uint256[]) public userFamilies; // Maps user address to familyId\\n    mapping(uint256 => uint256) public onTraining; // Maps tokenId to familyId (0 = not training) (No double training)\\n    mapping(address => uint256) public bonusSHO;\\n\\n    // Private Variables\\n    CountersUpgradeable.Counter private _familyId;\\n\\n    // Reserve Storage\\n    uint256[50] private ______gap;\\n\\n    // Events\\n    event TrainingStarted(\\n        address indexed user,\\n        uint256 trainId,\\n        uint256[] shogunIds,\\n        uint256 startTime\\n    );\\n    event TrainingEnded(\\n        address indexed user,\\n        uint256 trainId,\\n        uint256[] shogunIds,\\n        uint256 endTime\\n    );\\n    event RewardClaimed(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 claimTime\\n    );\\n    event BonusClaimed(address indexed user, uint256 amount, uint256 claimTime);\\n\\n    // Modifiers\\n    function __ShogunStaking_init(\\n        address ss,\\n        uint256 _baseReward,\\n        address admin\\n    ) public initializer {\\n        __AccessControl_init();\\n        __ReentrancyGuard_init();\\n\\n        // Constructor init\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin); // To revoke access after functions are set\\n        baseReward = _baseReward;\\n        SS = IShogunNFT(ss);\\n        countMultipliers = [10000, 10100, 10300];\\n        guildMultiplier = 200;\\n        medallionMultiplier = 10;\\n        shogunBonus = 800; // 8% for shogun bonus\\n        timescale = 1 days;\\n    }\\n\\n    // ------------------------- USER FUNCTION ---------------------------\\n\\n    /// @dev Start Multiple Training Sessions\\n    function startTrainingMultiple(uint256[][] memory shogunIdsArray) public {\\n        for (uint256 i = 0; i < shogunIdsArray.length; i++) {\\n            startTraining(shogunIdsArray[i]);\\n        }\\n    }\\n\\n    /// @dev Start train\\n    /// @notice Sends SSs (max. 5) on a train, SSs of the same Guild and if rare will get a bonus multiplier!\\n    function startTraining(uint256[] memory shogunIds) public {\\n        require(\\n            areAvailiable(shogunIds),\\n            \\\"ShogunStaking: One or More shoguns are already training\\\"\\n        );\\n\\n        require(\\n            areOwned(shogunIds),\\n            \\\"ShogunStaking: One or More shoguns are not owned by you!\\\"\\n        );\\n\\n        require(shogunIds.length <= 3, \\\"ShogunStaking: Maximum of 3 SS only!\\\");\\n        require(shogunIds.length > 0, \\\"ShogunStaking: At least 1 SS required!\\\");\\n\\n        _familyId.increment();\\n        SS.lockToken(shogunIds);\\n\\n        for (uint256 i = 0; i < shogunIds.length; i++) {\\n            onTraining[shogunIds[i]] = _familyId.current();\\n        }\\n\\n        uint256 _guildMultiplier;\\n        uint256 _medallionMultiplier;\\n        uint256 _shogunBonus;\\n\\n        (_guildMultiplier, _medallionMultiplier) = calculateMultipliers(\\n            shogunIds\\n        );\\n\\n        _shogunBonus = calculateShogunBonus(shogunIds);\\n\\n        Family memory _family = Family(\\n            msg.sender, // address familyOwner\\n            block.timestamp,\\n            _guildMultiplier, // uint256 GuildMultiplier;\\n            _medallionMultiplier,\\n            _shogunBonus,\\n            shogunIds, // uint256[] shogunIds;\\n            TrainState.IN_PROGRESS // TrainState trainState;\\n        );\\n\\n        families[_familyId.current()] = _family;\\n        userFamilies[msg.sender].push(_familyId.current());\\n\\n        emit TrainingStarted(\\n            msg.sender,\\n            _familyId.current(),\\n            shogunIds,\\n            block.timestamp\\n        );\\n    }\\n\\n    function setMedallionCount(\\n        address[] memory users,\\n        uint256[] memory quantities\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(\\n            users.length == quantities.length,\\n            \\\"ShogunStaking: User length and Quantity does not match\\\"\\n        );\\n        for (uint256 i = 0; i < users.length; i++) {\\n            medallionCount[users[i]] = quantities[i];\\n        }\\n    }\\n\\n    /// @dev Claim SHO reward for given family Id\\n    function claimRewards(uint256 familyId) public nonReentrant {\\n        Family storage family = families[familyId];\\n        address familyOwner = family.familyOwner;\\n        require(\\n            msg.sender == familyOwner,\\n            \\\"ShogunStaking: Only family owner can claim SHO\\\"\\n        );\\n        require(\\n            family.trainState == TrainState.IN_PROGRESS,\\n            \\\"ShogunStaking: Training has already ended!\\\"\\n        );\\n        uint256 rewards = calculateRewards(familyId);\\n        SHO.mint(familyOwner, rewards); // change\\n        family.lastClaim = block.timestamp;\\n        emit RewardClaimed(msg.sender, rewards, block.timestamp);\\n    }\\n\\n    /// @dev QOL to claim all rewards\\n    function claimAllRewards() public nonReentrant {\\n        uint256[] memory familyIds = getUserFamilies(msg.sender);\\n        uint256 totalRewards = 0;\\n        Family storage train;\\n\\n        for (uint256 i = 0; i < familyIds.length; i++) {\\n            totalRewards = totalRewards.add(calculateRewards(familyIds[i]));\\n            train = families[familyIds[i]];\\n            train.lastClaim = block.timestamp;\\n        }\\n        SHO.mint(msg.sender, totalRewards);\\n        emit RewardClaimed(msg.sender, totalRewards, block.timestamp);\\n    }\\n\\n    /// @dev Lets user claim bonus SHO\\n    function claimBonusSHO() public nonReentrant {\\n        uint256 claimAmount = bonusSHO[msg.sender];\\n        require(\\n            claimAmount > 0,\\n            \\\"ShogunStaking: User does not have Bonus SHO Tokens to claim\\\"\\n        );\\n        bonusSHO[msg.sender] = 0;\\n        SHO.transfer(msg.sender, claimAmount);\\n        emit BonusClaimed(msg.sender, claimAmount, block.timestamp);\\n    }\\n\\n    /// @dev Claim tokens and leave train\\n    /// @notice End train for SSs. You will stop acumulating SHO.\\n    function endTraining(uint256 trainId) public {\\n        // Only Family Owner\\n        require(\\n            msg.sender == families[trainId].familyOwner,\\n            \\\"ShogunStaking: Not the owner of the family\\\"\\n        );\\n        // Must be training state\\n        require(\\n            families[trainId].trainState == TrainState.IN_PROGRESS,\\n            \\\"ShogunStaking: Training already Ended\\\"\\n        );\\n\\n        // Distribute Remaining Rewards\\n        claimRewards(trainId);\\n\\n        // Unlock Tokens\\n        SS.unlockToken(families[trainId].shogunIds);\\n\\n        // Change Family State such that further claims cannot be made\\n        families[trainId].trainState = TrainState.ENDED;\\n\\n        uint256[] memory shogunIds = families[trainId].shogunIds;\\n\\n        for (uint256 i = 0; i < shogunIds.length; i++) {\\n            onTraining[shogunIds[i]] = 0;\\n        }\\n\\n        emit TrainingEnded(\\n            msg.sender,\\n            trainId,\\n            families[trainId].shogunIds,\\n            block.timestamp\\n        );\\n    }\\n\\n    function lockTokens(uint256[] memory tokenIds) internal {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            SS.safeTransferFrom(msg.sender, address(this), tokenIds[i]);\\n        }\\n    }\\n\\n    function unlockTokens(uint256[] memory tokenIds) internal {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            SS.safeTransferFrom(address(this), msg.sender, tokenIds[i]);\\n        }\\n    }\\n\\n    /// @dev Claim tokens and leave train\\n    /// @notice End train for SSs. You will stop acumulating SHO.\\n    function endMultipleTraining(uint256[] memory trainIds) public {\\n        for (uint256 i = 0; i < trainIds.length; i++) {\\n            endTraining(trainIds[i]);\\n        }\\n    }\\n\\n    // ----------------------- View FUNCTIONS -----------------------\\n\\n    /// @dev Retrieves Count multiplier\\n    function getCountMultiplier(uint256 guildCount, bool sameGuild)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (sameGuild) {\\n            return countMultipliers[guildCount - 1] + guildMultiplier;\\n        } else {\\n            return countMultipliers[guildCount - 1];\\n        }\\n    }\\n\\n    /// @dev Retrieves Rare multiplier\\n    function getTotalMedallionMultiplier(address user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return medallionMultiplier.mul(medallionCount[user]);\\n    }\\n\\n    /// @dev Calculates guild Multiplier based on tokenIds\\n    function calculateMultipliers(uint256[] memory _tokenIds)\\n        internal\\n        view\\n        returns (uint256 _guildMultiplier, uint256 _medallionMultiplier)\\n    {\\n        uint8[8] memory _guildCounter = [0, 0, 0, 0, 0, 0, 0, 0];\\n        uint8 maxCount = 0;\\n        bool _sameGuild;\\n\\n        // Count SS per guild\\n        for (uint8 i = 0; i < _tokenIds.length; i++) {\\n            _guildCounter[getGuild(_tokenIds[i]) - 1] += 1;\\n        }\\n\\n        // Find Maximum Count and Index of Max Count\\n        for (uint8 i = 0; i < _guildCounter.length; i++) {\\n            if (_guildCounter[i] > maxCount) {\\n                maxCount = _guildCounter[i];\\n            }\\n        }\\n\\n        if (maxCount == 3) {\\n            _sameGuild = true;\\n        }\\n\\n        _guildMultiplier = getCountMultiplier(_tokenIds.length, _sameGuild);\\n        _medallionMultiplier = getTotalMedallionMultiplier(msg.sender);\\n    }\\n\\n    /// @dev Caluclate rewards for given Family Id\\n    function calculateRewards(uint256 trainId)\\n        public\\n        view\\n        returns (uint256 rewardAmount)\\n    {\\n        Family memory family = families[trainId];\\n        rewardAmount = baseReward\\n            .mul(block.timestamp.sub(family.lastClaim))\\n            .mul(family.shogunIds.length)\\n            .mul(\\n                (family.guildMultiplier).add(family.medallionMultiplier).add(\\n                    family.shogunBonus\\n                )\\n            )\\n            .div(timescale)\\n            .div(10000);\\n    }\\n\\n    function calculateShogunBonus(uint256[] memory shogunIds)\\n        internal\\n        view\\n        returns (uint256 out)\\n    {\\n        for (uint256 i = 0; i < shogunIds.length; i++) {\\n            if (isLegendarySamurai[shogunIds[i]] == true) {\\n                out += shogunBonus;\\n            }\\n        }\\n    }\\n\\n    /// @dev Determines if the tokenIds are availiable for training\\n    function areAvailiable(uint256[] memory tokenIds)\\n        public\\n        view\\n        returns (bool out)\\n    {\\n        out = true;\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            if (onTraining[tokenIds[i]] > 0) {\\n                out = false;\\n            }\\n        }\\n    }\\n\\n    /// @dev Determines if the all tokenIds are owned by msg sneder\\n    function areOwned(uint256[] memory tokenIds)\\n        public\\n        view\\n        returns (bool out)\\n    {\\n        out = true;\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            if (SS.ownerOf(tokenIds[i]) != msg.sender) {\\n                out = false;\\n            }\\n        }\\n    }\\n\\n    function getUserFamilies(address user)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return userFamilies[user];\\n    }\\n\\n    function getFamily(uint256 trainId) public view returns (Family memory) {\\n        return families[trainId];\\n    }\\n\\n    function getGuild(uint256 tokenId) public view returns (uint8) {\\n        return uint8(guilds[tokenId - 1]);\\n    }\\n\\n    // ---------------------- ADMIN FUNCTIONS -----------------------\\n\\n    function setBaseReward(uint256 _amount)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        baseReward = _amount;\\n    }\\n\\n    function setCountMultiplier(uint256[] memory _countMultipliers)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        countMultipliers = _countMultipliers;\\n    }\\n\\n    function setGuildMultiplier(uint256 _guildMultiplier)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        guildMultiplier = _guildMultiplier;\\n    }\\n\\n    function setMedallionMultiplier(uint256 _medallionMultiplier)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        medallionMultiplier = _medallionMultiplier;\\n    }\\n\\n    function setLegendaryShoguns(\\n        uint256[] memory shogunIds,\\n        bool[] memory flags\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        for (uint256 i = 0; i < shogunIds.length; i++) {\\n            isLegendarySamurai[shogunIds[i]] = flags[i];\\n        }\\n    }\\n\\n    function setShogunBonus(uint256 _shogunBonus)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        shogunBonus = _shogunBonus;\\n    }\\n\\n    /// @dev Set bonus SHO Tokens to be claimed\\n    function setBonusSHO(address[] memory addresses, uint256[] memory amounts)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(\\n            addresses.length == amounts.length,\\n            \\\"ShogunStaking: To and amount length not matching\\\"\\n        );\\n        uint256 totalAmount;\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            bonusSHO[addresses[i]] = amounts[i];\\n            totalAmount += amounts[i];\\n        }\\n\\n        // Mint total bonus sho to contract\\n        SHO.mint(address(this), totalAmount);\\n    }\\n\\n    /// @dev Storing Guild Metadata as 1 byte hexes on a byte for gas optimization\\n    function updateGuilds(bytes calldata _guilds)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        guilds = _guilds;\\n    }\\n\\n    function setSHOToken(address sho) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        SHO = IShogunToken(sho);\\n    }\\n\\n    function setTimeScale(uint256 _newTimescale)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        timescale = _newTimescale;\\n    }\\n\\n    /// @dev Airdrop SHO Tokens out of contract\\n    function airdrop(address[] memory to, uint256[] memory amount)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(\\n            to.length == amount.length,\\n            \\\"ShogunStaking: To and amount length not matching\\\"\\n        );\\n        for (uint256 i = 0; i < to.length; i++) {\\n            SHO.transfer(to[i], amount[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2dd7d039ac8af33cbbd2173b044872de3bb979e04c1e1887984b2af7be2206cb\",\"license\":\"MIT\"},\"contracts/interfaces/IShogunNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface IShogunNFT is IERC721Enumerable {\\n    function lockToken(uint256[] memory _tokenIds) external;\\n\\n    function unlockToken(uint256[] memory _tokenIds) external;\\n\\n    function seppuku(uint256 _tokenId) external;\\n}\\n\",\"keccak256\":\"0x98047f197b78ff3fb8629f14e6f5b45eeab40dc1d4b70a6c7dd6f4160af41a08\",\"license\":\"MIT\"},\"contracts/interfaces/IShogunToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IShogunToken is IERC20 {\\n    function updateRewardOnMint(address _user, uint256 _amount) external;\\n\\n    function updateReward(address _from, address _to) external;\\n\\n    function getReward(address _to) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function getTotalClaimable(address _user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0e059817cf5a6c48da257fc9d94cdf1e7bcce48b4e836fba52762997a26391f6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061363e806100206000396000f3fe608060405234801561001057600080fd5b50600436106102d65760003560e01c806386f5cb6811610182578063cc8ca9ca116100e9578063d547741f116100a2578063f182d7921161007c578063f182d79214610665578063f796d0301461066d578063ff92fcab14610680578063fff5923e14610695576102d6565b8063d547741f14610637578063dec161d71461064a578063e40cde4814610652576102d6565b8063cc8ca9ca146105b8578063d0c38300146105cb578063d146c1a6146105de578063d210e016146105f1578063d3e9669314610604578063d3ea435014610624576102d6565b8063aaffff8a1161013b578063aaffff8a14610539578063b44ca9771461054c578063b753ead71461056c578063ba2f5a621461057f578063c3446ff714610592578063c966a704146105a5576102d6565b806386f5cb68146104db5780638cc60eca146104ee578063904bc92e1461050357806391d148541461050b57806399d37a061461051e578063a217fddf14610531576102d6565b806332a4e01e1161024157806366b3fe66116101fa57806375183ad0116101d457806375183ad01461049a57806376ad03bc146104ad5780637b495a05146104b55780637f04dd61146104c8576102d6565b806366b3fe661461046157806367243482146104745780636e97437814610487576102d6565b806332a4e01e146103fa57806335a0a9801461040d57806336568abe1461042057806339395941146104335780634ba705631461043b5780635fb1e33f1461044e576102d6565b80630b83a727116102935780630b83a7271461037957806310ace2cd14610381578063150b7a02146103a1578063248a9ca3146103c15780632ea8545a146103d45780632f2ff15d146103e7576102d6565b806301ffc9a7146102db5780630373a23a14610304578063078beae5146103195780630962ef791461033e5780630b287fc5146103515780630b42cf5514610364575b600080fd5b6102ee6102e9366004612bff565b6106a8565b6040516102fb9190612e6a565b60405180910390f35b610317610312366004612bb8565b6106d3565b005b61032c610327366004612bb8565b6106ec565b6040516102fb96959493929190612e00565b61031761034c366004612bb8565b61072f565b61031761035f366004612a9f565b61089c565b61036c6108ee565b6040516102fb9190612e75565b6103176108f5565b61039461038f3660046127f6565b610a7f565b6040516102fb9190612e44565b6103b46103af36600461282e565b610aec565b6040516102fb9190612e7e565b61036c6103cf366004612bb8565b610afc565b61036c6103e2366004612c94565b610b11565b6103176103f5366004612bd0565b610ba2565b61036c6104083660046128ea565b610bc6565b61036c61041b3660046127f6565b610bf8565b61031761042e366004612bd0565b610c0b565b610317610c4d565b61036c610449366004612bb8565b610d86565b6102ee61045c366004612a9f565b610d99565b61031761046f366004612bb8565b610e08565b610317610482366004612956565b610e1c565b610317610495366004612ada565b610f46565b6103176104a8366004612a9f565b610fed565b61036c61100e565b6103176104c3366004612956565b611014565b6103176104d63660046127f6565b61117b565b6103176104e9366004612a16565b6111ac565b6104f66111fa565b6040516102fb9190612ea6565b6104f6611209565b6102ee610519366004612bd0565b611218565b6102ee61052c366004612bb8565b611243565b61036c611259565b61036c6105473660046127f6565b61125e565b61055f61055a366004612bb8565b611271565b6040516102fb9190613331565b61031761057a366004612915565b611373565b61031761058d366004612bb8565b61146f565b6103176105a0366004612a9f565b611484565b6103176105b3366004612956565b61179d565b61036c6105c6366004612bb8565b611864565b6103176105d9366004612bb8565b611885565b6103176105ec366004612c27565b61189a565b61036c6105ff3660046127f6565b6118b5565b610617610612366004612bb8565b6118dc565b6040516102fb91906133f4565b61036c610632366004612bb8565b611945565b610317610645366004612bd0565b611ab4565b61036c611ad3565b610317610660366004612bb8565b611ada565b61036c611d13565b61031761067b366004612bb8565b611d1a565b610688611d2f565b6040516102fb9190612e93565b6102ee6106a3366004612a9f565b611dbe565b60006001600160e01b03198216637965db0b60e01b14806106cd57506106cd82611e9c565b92915050565b60006106e6816106e1611eb5565b611eb9565b5060fd55565b610106602052600090815260409020805460018201546002830154600384015460048501546006909501546001600160a01b039094169492939192909160ff1686565b6002609754141561075b5760405162461bcd60e51b8152600401610752906131ad565b60405180910390fd5b600260975560008181526101066020526040902080546001600160a01b03163381146107995760405162461bcd60e51b815260040161075290612eef565b6000600683015460ff1660018111156107c257634e487b7160e01b600052602160045260246000fd5b146107df5760405162461bcd60e51b815260040161075290612f3d565b60006107ea84611945565b60fc546040516340c10f1960e01b81529192506001600160a01b0316906340c10f199061081d9085908590600401612de7565b600060405180830381600087803b15801561083757600080fd5b505af115801561084b573d6000803e3d6000fd5b505042600186018190556040513393507ff01da32686223933d8a18a391060918c7f11a3648639edd87ae013e2e273174392506108899185916133e6565b60405180910390a2505060016097555050565b60005b81518110156108ea576108d88282815181106108cb57634e487b7160e01b600052603260045260246000fd5b6020026020010151611ada565b806108e28161357e565b91505061089f565b5050565b6101005481565b600260975414156109185760405162461bcd60e51b8152600401610752906131ad565b6002609755600061092833610a7f565b9050600080805b83518110156109cd5761097261096b85838151811061095e57634e487b7160e01b600052603260045260246000fd5b6020026020010151611945565b8490611f1d565b9250610106600085838151811061099957634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020915042826001018190555080806109c59061357e565b91505061092f565b5060fc546040516340c10f1960e01b81526001600160a01b03909116906340c10f1990610a009033908690600401612de7565b600060405180830381600087803b158015610a1a57600080fd5b505af1158015610a2e573d6000803e3d6000fd5b50505050336001600160a01b03167ff01da32686223933d8a18a391060918c7f11a3648639edd87ae013e2e27317438342604051610a6d9291906133e6565b60405180910390a25050600160975550565b6001600160a01b03811660009081526101076020908152604091829020805483518184028101840190945280845260609392830182828015610ae057602002820191906000526020600020905b815481526020019060010190808311610acc575b50505050509050919050565b630a85bd0160e11b949350505050565b60009081526065602052604090206001015490565b60008115610b64576101005460ff610b2a6001866134cc565b81548110610b4857634e487b7160e01b600052603260045260246000fd5b9060005260206000200154610b5d9190613450565b90506106cd565b60ff610b716001856134cc565b81548110610b8f57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b610bab82610afc565b610bb7816106e1611eb5565b610bc18383611f29565b505050565b6101076020528160005260406000208181548110610be357600080fd5b90600052602060002001600091509150505481565b6101046020526000908152604090205481565b610c13611eb5565b6001600160a01b0316816001600160a01b031614610c435760405162461bcd60e51b815260040161075290613228565b6108ea8282611fb0565b60026097541415610c705760405162461bcd60e51b8152600401610752906131ad565b6002609755336000908152610109602052604090205480610ca35760405162461bcd60e51b815260040161075290613277565b33600081815261010960205260408082209190915560fc54905163a9059cbb60e01b81526001600160a01b039091169163a9059cbb91610ce891908590600401612de7565b602060405180830381600087803b158015610d0257600080fd5b505af1158015610d16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3a9190612b9c565b50336001600160a01b03167f5ffd7ef804cd6362d3defa75e694e044ac287fcac1de8bbb9a21226d02397b838242604051610d769291906133e6565b60405180910390a2506001609755565b6101086020526000908152604090205481565b600160005b8251811015610e025760006101086000858481518110610dce57634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020541115610df057600091505b80610dfa8161357e565b915050610d9e565b50919050565b6000610e16816106e1611eb5565b5060fe55565b6000610e2a816106e1611eb5565b8151835114610e4b5760405162461bcd60e51b815260040161075290613113565b60005b8351811015610f405760fc5484516001600160a01b039091169063a9059cbb90869084908110610e8e57634e487b7160e01b600052603260045260246000fd5b6020026020010151858481518110610eb657634e487b7160e01b600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b8152600401610edb929190612de7565b602060405180830381600087803b158015610ef557600080fd5b505af1158015610f09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2d9190612b9c565b5080610f388161357e565b915050610e4e565b50505050565b6000610f54816106e1611eb5565b60005b8351811015610f4057828181518110610f8057634e487b7160e01b600052603260045260246000fd5b60200260200101516101036000868481518110610fad57634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002060006101000a81548160ff0219169083151502179055508080610fe59061357e565b915050610f57565b6000610ffb816106e1611eb5565b8151610bc19060ff906020850190612611565b60fd5481565b6000611022816106e1611eb5565b81518351146110435760405162461bcd60e51b815260040161075290613113565b6000805b84518110156111105783818151811061107057634e487b7160e01b600052603260045260246000fd5b6020026020010151610109600087848151811061109d57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055508381815181106110e957634e487b7160e01b600052603260045260246000fd5b6020026020010151826110fc9190613450565b9150806111088161357e565b915050611047565b5060fc546040516340c10f1960e01b81526001600160a01b03909116906340c10f19906111439030908590600401612de7565b600060405180830381600087803b15801561115d57600080fd5b505af1158015611171573d6000803e3d6000fd5b5050505050505050565b6000611189816106e1611eb5565b5060fc80546001600160a01b0319166001600160a01b0392909216919091179055565b60005b81518110156108ea576111e88282815181106111db57634e487b7160e01b600052603260045260246000fd5b6020026020010151611484565b806111f28161357e565b9150506111af565b60fb546001600160a01b031681565b60fc546001600160a01b031681565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6101036020526000908152604090205460ff1681565b600081565b6101096020526000908152604090205481565b61127961265c565b60008281526101066020908152604091829020825160e08101845281546001600160a01b0316815260018201548184015260028201548185015260038201546060820152600482015460808201526005820180548551818602810186019096528086529194929360a0860193929083018282801561131657602002820191906000526020600020905b815481526020019060010190808311611302575b5050509183525050600682015460209091019060ff16600181111561134b57634e487b7160e01b600052602160045260246000fd5b600181111561136a57634e487b7160e01b600052602160045260246000fd5b90525092915050565b600054610100900460ff168061138c575060005460ff16155b6113a85760405162461bcd60e51b815260040161075290613022565b600054610100900460ff161580156113d3576000805460ff1961ff0019909116610100171660011790555b6113db612035565b6113e36120c2565b6113ee60008361212a565b60fd83905560fb80546001600160a01b0319166001600160a01b038616179055604080516060810182526127108152612774602082015261283c9181019190915261143d9060ff9060036126c0565b5060c861010055600a61010155610320610102556201518060fe558015610f40576000805461ff001916905550505050565b600061147d816106e1611eb5565b5061010155565b61148d81610d99565b6114a95760405162461bcd60e51b815260040161075290613070565b6114b281611dbe565b6114ce5760405162461bcd60e51b8152600401610752906132d4565b6003815111156114f05760405162461bcd60e51b8152600401610752906131e4565b60008151116115115760405162461bcd60e51b8152600401610752906130cd565b61151c61010a612134565b60fb546040516302b2de4960e21b81526001600160a01b0390911690630acb79249061154c908490600401612e44565b600060405180830381600087803b15801561156657600080fd5b505af115801561157a573d6000803e3d6000fd5b5050505060005b81518110156115e75761159561010a61213d565b61010860008484815181106115ba57634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000208190555080806115df9061357e565b915050611581565b5060008060006115f684612141565b9093509150611604846122d2565b905060006040518060e00160405280336001600160a01b031681526020014281526020018581526020018481526020018381526020018681526020016000600181111561166157634e487b7160e01b600052602160045260246000fd5b9052905080610106600061167661010a61213d565b81526020808201929092526040908101600020835181546001600160a01b0319166001600160a01b03909116178155838301516001820155908301516002820155606083015160038201556080830151600482015560a0830151805191926116e692600585019290910190612611565b5060c082015160068201805460ff19166001838181111561171757634e487b7160e01b600052602160045260246000fd5b02179055505033600090815261010760205260409020905061173a61010a61213d565b81546001810183556000928352602090922090910155337fba68dec919f1691408f54f9ad116b0c62f60dc6702ac8c6a67b166a8cd52d33061177d61010a61213d565b874260405161178e939291906133a4565b60405180910390a25050505050565b60006117ab816106e1611eb5565b81518351146117cc5760405162461bcd60e51b815260040161075290612f87565b60005b8351811015610f40578281815181106117f857634e487b7160e01b600052603260045260246000fd5b6020026020010151610104600086848151811061182557634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550808061185c9061357e565b9150506117cf565b60ff818154811061187457600080fd5b600091825260209091200154905081565b6000611893816106e1611eb5565b5061010255565b60006118a8816106e1611eb5565b610f406101058484612701565b6001600160a01b03811660009081526101046020526040812054610101546106cd9161234f565b60006101056118ec6001846134cc565b81546118f790613549565b811061191357634e487b7160e01b600052603260045260246000fd5b8154600116156119325790600052602060002090602091828204019190065b9054600160f81b911a0260f81c92915050565b600081815261010660209081526040808320815160e08101835281546001600160a01b0316815260018201548185015260028201548184015260038201546060820152600482015460808201526005820180548451818702810187019095528085528695929460a0860193909291908301828280156119e357602002820191906000526020600020905b8154815260200190600101908083116119cf575b5050509183525050600682015460209091019060ff166001811115611a1857634e487b7160e01b600052602160045260246000fd5b6001811115611a3757634e487b7160e01b600052602160045260246000fd5b815250509050611aad612710611aa760fe54611aa7611a758660800151611a6f88606001518960400151611f1d90919063ffffffff16565b90611f1d565b611aa18760a0015151611aa1611a988a602001514261235b90919063ffffffff16565b60fd549061234f565b9061234f565b90612367565b9392505050565b611abd82610afc565b611ac9816106e1611eb5565b610bc18383611fb0565b6101015481565b600081815261010660205260409020546001600160a01b03163314611b115760405162461bcd60e51b815260040161075290613163565b6000818152610106602052604081206006015460ff166001811115611b4657634e487b7160e01b600052602160045260246000fd5b14611b635760405162461bcd60e51b815260040161075290612fdd565b611b6c8161072f565b60fb546000828152610106602052604090819020905163665adcfd60e01b81526001600160a01b039092169163665adcfd91611bb091600590910190600401612e57565b600060405180830381600087803b158015611bca57600080fd5b505af1158015611bde573d6000803e3d6000fd5b50505060008281526101066020908152604080832060068101805460ff19166001179055600501805482518185028101850190935280835293945090929091830182828015611c4c57602002820191906000526020600020905b815481526020019060010190808311611c38575b5050505050905060005b8151811015611cb35760006101086000848481518110611c8657634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020819055508080611cab9061357e565b915050611c56565b50336001600160a01b03167fe46c316e0026b6873715afa24fe53e01843fc6a22ecefc596077af4e9edd94cf83610106600086815260200190815260200160002060050142604051611d07939291906133cd565b60405180910390a25050565b6101025481565b6000611d28816106e1611eb5565b5061010055565b6101058054611d3d90613549565b80601f0160208091040260200160405190810160405280929190818152602001828054611d6990613549565b8015611db65780601f10611d8b57610100808354040283529160200191611db6565b820191906000526020600020905b815481529060010190602001808311611d9957829003601f168201915b505050505081565b600160005b8251811015610e025760fb54835133916001600160a01b031690636352211e90869085908110611e0357634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b8152600401611e279190612e75565b60206040518083038186803b158015611e3f57600080fd5b505afa158015611e53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e779190612812565b6001600160a01b031614611e8a57600091505b80611e948161357e565b915050611dc3565b6001600160e01b031981166301ffc9a760e01b14919050565b3390565b611ec38282611218565b6108ea57611edb816001600160a01b03166014612373565b611ee6836020612373565b604051602001611ef7929190612d72565b60408051601f198184030181529082905262461bcd60e51b825261075291600401612e93565b6000611aad8284613450565b611f338282611218565b6108ea5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611f6c611eb5565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611fba8282611218565b156108ea5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19169055611ff1611eb5565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600054610100900460ff168061204e575060005460ff16155b61206a5760405162461bcd60e51b815260040161075290613022565b600054610100900460ff16158015612095576000805460ff1961ff0019909116610100171660011790555b61209d612525565b6120a5612525565b6120ad612525565b80156120bf576000805461ff00191690555b50565b600054610100900460ff16806120db575060005460ff16155b6120f75760405162461bcd60e51b815260040161075290613022565b600054610100900460ff16158015612122576000805460ff1961ff0019909116610100171660011790555b6120ad612598565b6108ea8282611f29565b80546001019055565b5490565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905281908180805b86518160ff16101561221f5760018460016121cb8a8560ff16815181106121be57634e487b7160e01b600052603260045260246000fd5b60200260200101516118dc565b6121d591906134e3565b60ff16600881106121f657634e487b7160e01b600052603260045260246000fd5b602002018181516122079190613468565b60ff169052508061221781613599565b915050612187565b5060005b60088160ff1610156122a1578260ff16848260ff166008811061225657634e487b7160e01b600052603260045260246000fd5b602002015160ff16111561228f57838160ff166008811061228757634e487b7160e01b600052603260045260246000fd5b602002015192505b8061229981613599565b915050612223565b508160ff16600314156122b2575060015b6122bd865182610b11565b94506122c8336118b5565b9350505050915091565b6000805b8251811015610e0257610103600084838151811061230457634e487b7160e01b600052603260045260246000fd5b60209081029190910181015182528101919091526040016000205460ff1615156001141561233d576101025461233a9083613450565b91505b806123478161357e565b9150506122d6565b6000611aad82846134ad565b6000611aad82846134cc565b6000611aad828461348d565b606060006123828360026134ad565b61238d906002613450565b67ffffffffffffffff8111156123b357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156123dd576020820181803683370190505b509050600360fc1b8160008151811061240657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061244357634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006124678460026134ad565b612472906001613450565b90505b6001811115612506576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106124b457634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106124d857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936124ff81613532565b9050612475565b508315611aad5760405162461bcd60e51b815260040161075290612eba565b600054610100900460ff168061253e575060005460ff16155b61255a5760405162461bcd60e51b815260040161075290613022565b600054610100900460ff161580156120ad576000805460ff1961ff00199091166101001716600117905580156120bf576000805461ff001916905550565b600054610100900460ff16806125b1575060005460ff16155b6125cd5760405162461bcd60e51b815260040161075290613022565b600054610100900460ff161580156125f8576000805460ff1961ff0019909116610100171660011790555b600160975580156120bf576000805461ff001916905550565b82805482825590600052602060002090810192821561264c579160200282015b8281111561264c578251825591602001919060010190612631565b50612658929150612775565b5090565b6040518060e0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160608152602001600060018111156126bb57634e487b7160e01b600052602160045260246000fd5b905290565b82805482825590600052602060002090810192821561264c579160200282015b8281111561264c578251829061ffff169055916020019190600101906126e0565b82805461270d90613549565b90600052602060002090601f01602090048101928261272f576000855561264c565b82601f106127485782800160ff1982351617855561264c565b8280016001018555821561264c579182015b8281111561264c57823582559160200191906001019061275a565b5b808211156126585760008155600101612776565b600082601f83011261279a578081fd5b813560206127af6127aa8361342c565b613402565b82815281810190858301838502870184018810156127cb578586fd5b855b858110156127e9578135845292840192908401906001016127cd565b5090979650505050505050565b600060208284031215612807578081fd5b8135611aad816135e5565b600060208284031215612823578081fd5b8151611aad816135e5565b60008060008060808587031215612843578283fd5b843561284e816135e5565b935060208581013561285f816135e5565b935060408601359250606086013567ffffffffffffffff80821115612882578384fd5b818801915088601f830112612895578384fd5b8135818111156128a7576128a76135cf565b6128b9601f8201601f19168501613402565b915080825289848285010111156128ce578485fd5b8084840185840137810190920192909252939692955090935050565b600080604083850312156128fc578182fd5b8235612907816135e5565b946020939093013593505050565b600080600060608486031215612929578283fd5b8335612934816135e5565b925060208401359150604084013561294b816135e5565b809150509250925092565b60008060408385031215612968578182fd5b823567ffffffffffffffff8082111561297f578384fd5b818501915085601f830112612992578384fd5b813560206129a26127aa8361342c565b82815281810190858301838502870184018b10156129be578889fd5b8896505b848710156129e95780356129d5816135e5565b8352600196909601959183019183016129c2565b50965050860135925050808211156129ff578283fd5b50612a0c8582860161278a565b9150509250929050565b60006020808385031215612a28578182fd5b823567ffffffffffffffff811115612a3e578283fd5b8301601f81018513612a4e578283fd5b8035612a5c6127aa8261342c565b81815283810190838501865b84811015612a9157612a7f8a88843589010161278a565b84529286019290860190600101612a68565b509098975050505050505050565b600060208284031215612ab0578081fd5b813567ffffffffffffffff811115612ac6578182fd5b612ad28482850161278a565b949350505050565b60008060408385031215612aec578182fd5b823567ffffffffffffffff80821115612b03578384fd5b612b0f8683870161278a565b9350602091508185013581811115612b25578384fd5b85019050601f81018613612b37578283fd5b8035612b456127aa8261342c565b81815283810190838501858402850186018a1015612b61578687fd5b8694505b83851015612b8c578035612b78816135fa565b835260019490940193918501918501612b65565b5080955050505050509250929050565b600060208284031215612bad578081fd5b8151611aad816135fa565b600060208284031215612bc9578081fd5b5035919050565b60008060408385031215612be2578182fd5b823591506020830135612bf4816135e5565b809150509250929050565b600060208284031215612c10578081fd5b81356001600160e01b031981168114611aad578182fd5b60008060208385031215612c39578182fd5b823567ffffffffffffffff80821115612c50578384fd5b818501915085601f830112612c63578384fd5b813581811115612c71578485fd5b866020828501011115612c82578485fd5b60209290920196919550909350505050565b60008060408385031215612ca6578182fd5b823591506020830135612bf4816135fa565b6000815180845260208085019450808401835b83811015612ce757815187529582019590820190600101612ccb565b509495945050505050565b6000815480845260208085019450838352808320835b83811015612ce757815487529582019560019182019101612d08565b60008151808452612d3c816020860160208601613506565b601f01601f19169290920160200192915050565b60028110612d6e57634e487b7160e01b600052602160045260246000fd5b9052565b60007f416363657373436f6e74726f6c3a206163636f756e742000000000000000000082528351612daa816017850160208801613506565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612ddb816028840160208801613506565b01602801949350505050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03871681526020810186905260408101859052606081018490526080810183905260c08101612e3960a0830184612d50565b979650505050505050565b600060208252611aad6020830184612cb8565b600060208252611aad6020830184612cf2565b901515815260200190565b90815260200190565b6001600160e01b031991909116815260200190565b600060208252611aad6020830184612d24565b6001600160a01b0391909116815260200190565b6020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b6020808252602e908201527f53686f67756e5374616b696e673a204f6e6c792066616d696c79206f776e657260408201526d2063616e20636c61696d2053484f60901b606082015260800190565b6020808252602a908201527f53686f67756e5374616b696e673a20547261696e696e672068617320616c726560408201526961647920656e6465642160b01b606082015260800190565b60208082526036908201527f53686f67756e5374616b696e673a2055736572206c656e67746820616e6420516040820152750eac2dce8d2e8f240c8decae640dcdee840dac2e8c6d60531b606082015260800190565b60208082526025908201527f53686f67756e5374616b696e673a20547261696e696e6720616c726561647920604082015264115b99195960da1b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526037908201527f53686f67756e5374616b696e673a204f6e65206f72204d6f72652073686f677560408201527f6e732061726520616c726561647920747261696e696e67000000000000000000606082015260800190565b60208082526026908201527f53686f67756e5374616b696e673a204174206c6561737420312053532072657160408201526575697265642160d01b606082015260800190565b60208082526030908201527f53686f67756e5374616b696e673a20546f20616e6420616d6f756e74206c656e60408201526f677468206e6f74206d61746368696e6760801b606082015260800190565b6020808252602a908201527f53686f67756e5374616b696e673a204e6f7420746865206f776e6572206f66206040820152697468652066616d696c7960b01b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526024908201527f53686f67756e5374616b696e673a204d6178696d756d206f662033205353206f6040820152636e6c792160e01b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b6020808252603b908201527f53686f67756e5374616b696e673a205573657220646f6573206e6f742068617660408201527f6520426f6e75732053484f20546f6b656e7320746f20636c61696d0000000000606082015260800190565b60208082526038908201527f53686f67756e5374616b696e673a204f6e65206f72204d6f72652073686f677560408201527f6e7320617265206e6f74206f776e656420627920796f75210000000000000000606082015260800190565b60006020825260018060a01b038351166020830152602083015160408301526040830151606083015260608301516080830152608083015160a083015260a083015160e060c0840152613388610100840182612cb8565b905060c084015161339c60e0850182612d50565b509392505050565b6000848252606060208301526133bd6060830185612cb8565b9050826040830152949350505050565b6000848252606060208301526133bd6060830185612cf2565b918252602082015260400190565b60ff91909116815260200190565b60405181810167ffffffffffffffff81118282101715613424576134246135cf565b604052919050565b600067ffffffffffffffff821115613446576134466135cf565b5060209081020190565b60008219821115613463576134636135b9565b500190565b600060ff821660ff84168060ff03821115613485576134856135b9565b019392505050565b6000826134a857634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156134c7576134c76135b9565b500290565b6000828210156134de576134de6135b9565b500390565b600060ff821660ff8416808210156134fd576134fd6135b9565b90039392505050565b60005b83811015613521578181015183820152602001613509565b83811115610f405750506000910152565b600081613541576135416135b9565b506000190190565b60028104600182168061355d57607f821691505b60208210811415610e0257634e487b7160e01b600052602260045260246000fd5b6000600019821415613592576135926135b9565b5060010190565b600060ff821660ff8114156135b0576135b06135b9565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146120bf57600080fd5b80151581146120bf57600080fdfea264697066735822122032d78e4652f2b87e1263b1bc3c8831b63eca67a9e27bded3b7273e44e3dbc4ed64736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102d65760003560e01c806386f5cb6811610182578063cc8ca9ca116100e9578063d547741f116100a2578063f182d7921161007c578063f182d79214610665578063f796d0301461066d578063ff92fcab14610680578063fff5923e14610695576102d6565b8063d547741f14610637578063dec161d71461064a578063e40cde4814610652576102d6565b8063cc8ca9ca146105b8578063d0c38300146105cb578063d146c1a6146105de578063d210e016146105f1578063d3e9669314610604578063d3ea435014610624576102d6565b8063aaffff8a1161013b578063aaffff8a14610539578063b44ca9771461054c578063b753ead71461056c578063ba2f5a621461057f578063c3446ff714610592578063c966a704146105a5576102d6565b806386f5cb68146104db5780638cc60eca146104ee578063904bc92e1461050357806391d148541461050b57806399d37a061461051e578063a217fddf14610531576102d6565b806332a4e01e1161024157806366b3fe66116101fa57806375183ad0116101d457806375183ad01461049a57806376ad03bc146104ad5780637b495a05146104b55780637f04dd61146104c8576102d6565b806366b3fe661461046157806367243482146104745780636e97437814610487576102d6565b806332a4e01e146103fa57806335a0a9801461040d57806336568abe1461042057806339395941146104335780634ba705631461043b5780635fb1e33f1461044e576102d6565b80630b83a727116102935780630b83a7271461037957806310ace2cd14610381578063150b7a02146103a1578063248a9ca3146103c15780632ea8545a146103d45780632f2ff15d146103e7576102d6565b806301ffc9a7146102db5780630373a23a14610304578063078beae5146103195780630962ef791461033e5780630b287fc5146103515780630b42cf5514610364575b600080fd5b6102ee6102e9366004612bff565b6106a8565b6040516102fb9190612e6a565b60405180910390f35b610317610312366004612bb8565b6106d3565b005b61032c610327366004612bb8565b6106ec565b6040516102fb96959493929190612e00565b61031761034c366004612bb8565b61072f565b61031761035f366004612a9f565b61089c565b61036c6108ee565b6040516102fb9190612e75565b6103176108f5565b61039461038f3660046127f6565b610a7f565b6040516102fb9190612e44565b6103b46103af36600461282e565b610aec565b6040516102fb9190612e7e565b61036c6103cf366004612bb8565b610afc565b61036c6103e2366004612c94565b610b11565b6103176103f5366004612bd0565b610ba2565b61036c6104083660046128ea565b610bc6565b61036c61041b3660046127f6565b610bf8565b61031761042e366004612bd0565b610c0b565b610317610c4d565b61036c610449366004612bb8565b610d86565b6102ee61045c366004612a9f565b610d99565b61031761046f366004612bb8565b610e08565b610317610482366004612956565b610e1c565b610317610495366004612ada565b610f46565b6103176104a8366004612a9f565b610fed565b61036c61100e565b6103176104c3366004612956565b611014565b6103176104d63660046127f6565b61117b565b6103176104e9366004612a16565b6111ac565b6104f66111fa565b6040516102fb9190612ea6565b6104f6611209565b6102ee610519366004612bd0565b611218565b6102ee61052c366004612bb8565b611243565b61036c611259565b61036c6105473660046127f6565b61125e565b61055f61055a366004612bb8565b611271565b6040516102fb9190613331565b61031761057a366004612915565b611373565b61031761058d366004612bb8565b61146f565b6103176105a0366004612a9f565b611484565b6103176105b3366004612956565b61179d565b61036c6105c6366004612bb8565b611864565b6103176105d9366004612bb8565b611885565b6103176105ec366004612c27565b61189a565b61036c6105ff3660046127f6565b6118b5565b610617610612366004612bb8565b6118dc565b6040516102fb91906133f4565b61036c610632366004612bb8565b611945565b610317610645366004612bd0565b611ab4565b61036c611ad3565b610317610660366004612bb8565b611ada565b61036c611d13565b61031761067b366004612bb8565b611d1a565b610688611d2f565b6040516102fb9190612e93565b6102ee6106a3366004612a9f565b611dbe565b60006001600160e01b03198216637965db0b60e01b14806106cd57506106cd82611e9c565b92915050565b60006106e6816106e1611eb5565b611eb9565b5060fd55565b610106602052600090815260409020805460018201546002830154600384015460048501546006909501546001600160a01b039094169492939192909160ff1686565b6002609754141561075b5760405162461bcd60e51b8152600401610752906131ad565b60405180910390fd5b600260975560008181526101066020526040902080546001600160a01b03163381146107995760405162461bcd60e51b815260040161075290612eef565b6000600683015460ff1660018111156107c257634e487b7160e01b600052602160045260246000fd5b146107df5760405162461bcd60e51b815260040161075290612f3d565b60006107ea84611945565b60fc546040516340c10f1960e01b81529192506001600160a01b0316906340c10f199061081d9085908590600401612de7565b600060405180830381600087803b15801561083757600080fd5b505af115801561084b573d6000803e3d6000fd5b505042600186018190556040513393507ff01da32686223933d8a18a391060918c7f11a3648639edd87ae013e2e273174392506108899185916133e6565b60405180910390a2505060016097555050565b60005b81518110156108ea576108d88282815181106108cb57634e487b7160e01b600052603260045260246000fd5b6020026020010151611ada565b806108e28161357e565b91505061089f565b5050565b6101005481565b600260975414156109185760405162461bcd60e51b8152600401610752906131ad565b6002609755600061092833610a7f565b9050600080805b83518110156109cd5761097261096b85838151811061095e57634e487b7160e01b600052603260045260246000fd5b6020026020010151611945565b8490611f1d565b9250610106600085838151811061099957634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020915042826001018190555080806109c59061357e565b91505061092f565b5060fc546040516340c10f1960e01b81526001600160a01b03909116906340c10f1990610a009033908690600401612de7565b600060405180830381600087803b158015610a1a57600080fd5b505af1158015610a2e573d6000803e3d6000fd5b50505050336001600160a01b03167ff01da32686223933d8a18a391060918c7f11a3648639edd87ae013e2e27317438342604051610a6d9291906133e6565b60405180910390a25050600160975550565b6001600160a01b03811660009081526101076020908152604091829020805483518184028101840190945280845260609392830182828015610ae057602002820191906000526020600020905b815481526020019060010190808311610acc575b50505050509050919050565b630a85bd0160e11b949350505050565b60009081526065602052604090206001015490565b60008115610b64576101005460ff610b2a6001866134cc565b81548110610b4857634e487b7160e01b600052603260045260246000fd5b9060005260206000200154610b5d9190613450565b90506106cd565b60ff610b716001856134cc565b81548110610b8f57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b610bab82610afc565b610bb7816106e1611eb5565b610bc18383611f29565b505050565b6101076020528160005260406000208181548110610be357600080fd5b90600052602060002001600091509150505481565b6101046020526000908152604090205481565b610c13611eb5565b6001600160a01b0316816001600160a01b031614610c435760405162461bcd60e51b815260040161075290613228565b6108ea8282611fb0565b60026097541415610c705760405162461bcd60e51b8152600401610752906131ad565b6002609755336000908152610109602052604090205480610ca35760405162461bcd60e51b815260040161075290613277565b33600081815261010960205260408082209190915560fc54905163a9059cbb60e01b81526001600160a01b039091169163a9059cbb91610ce891908590600401612de7565b602060405180830381600087803b158015610d0257600080fd5b505af1158015610d16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3a9190612b9c565b50336001600160a01b03167f5ffd7ef804cd6362d3defa75e694e044ac287fcac1de8bbb9a21226d02397b838242604051610d769291906133e6565b60405180910390a2506001609755565b6101086020526000908152604090205481565b600160005b8251811015610e025760006101086000858481518110610dce57634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020541115610df057600091505b80610dfa8161357e565b915050610d9e565b50919050565b6000610e16816106e1611eb5565b5060fe55565b6000610e2a816106e1611eb5565b8151835114610e4b5760405162461bcd60e51b815260040161075290613113565b60005b8351811015610f405760fc5484516001600160a01b039091169063a9059cbb90869084908110610e8e57634e487b7160e01b600052603260045260246000fd5b6020026020010151858481518110610eb657634e487b7160e01b600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b8152600401610edb929190612de7565b602060405180830381600087803b158015610ef557600080fd5b505af1158015610f09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2d9190612b9c565b5080610f388161357e565b915050610e4e565b50505050565b6000610f54816106e1611eb5565b60005b8351811015610f4057828181518110610f8057634e487b7160e01b600052603260045260246000fd5b60200260200101516101036000868481518110610fad57634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002060006101000a81548160ff0219169083151502179055508080610fe59061357e565b915050610f57565b6000610ffb816106e1611eb5565b8151610bc19060ff906020850190612611565b60fd5481565b6000611022816106e1611eb5565b81518351146110435760405162461bcd60e51b815260040161075290613113565b6000805b84518110156111105783818151811061107057634e487b7160e01b600052603260045260246000fd5b6020026020010151610109600087848151811061109d57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055508381815181106110e957634e487b7160e01b600052603260045260246000fd5b6020026020010151826110fc9190613450565b9150806111088161357e565b915050611047565b5060fc546040516340c10f1960e01b81526001600160a01b03909116906340c10f19906111439030908590600401612de7565b600060405180830381600087803b15801561115d57600080fd5b505af1158015611171573d6000803e3d6000fd5b5050505050505050565b6000611189816106e1611eb5565b5060fc80546001600160a01b0319166001600160a01b0392909216919091179055565b60005b81518110156108ea576111e88282815181106111db57634e487b7160e01b600052603260045260246000fd5b6020026020010151611484565b806111f28161357e565b9150506111af565b60fb546001600160a01b031681565b60fc546001600160a01b031681565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6101036020526000908152604090205460ff1681565b600081565b6101096020526000908152604090205481565b61127961265c565b60008281526101066020908152604091829020825160e08101845281546001600160a01b0316815260018201548184015260028201548185015260038201546060820152600482015460808201526005820180548551818602810186019096528086529194929360a0860193929083018282801561131657602002820191906000526020600020905b815481526020019060010190808311611302575b5050509183525050600682015460209091019060ff16600181111561134b57634e487b7160e01b600052602160045260246000fd5b600181111561136a57634e487b7160e01b600052602160045260246000fd5b90525092915050565b600054610100900460ff168061138c575060005460ff16155b6113a85760405162461bcd60e51b815260040161075290613022565b600054610100900460ff161580156113d3576000805460ff1961ff0019909116610100171660011790555b6113db612035565b6113e36120c2565b6113ee60008361212a565b60fd83905560fb80546001600160a01b0319166001600160a01b038616179055604080516060810182526127108152612774602082015261283c9181019190915261143d9060ff9060036126c0565b5060c861010055600a61010155610320610102556201518060fe558015610f40576000805461ff001916905550505050565b600061147d816106e1611eb5565b5061010155565b61148d81610d99565b6114a95760405162461bcd60e51b815260040161075290613070565b6114b281611dbe565b6114ce5760405162461bcd60e51b8152600401610752906132d4565b6003815111156114f05760405162461bcd60e51b8152600401610752906131e4565b60008151116115115760405162461bcd60e51b8152600401610752906130cd565b61151c61010a612134565b60fb546040516302b2de4960e21b81526001600160a01b0390911690630acb79249061154c908490600401612e44565b600060405180830381600087803b15801561156657600080fd5b505af115801561157a573d6000803e3d6000fd5b5050505060005b81518110156115e75761159561010a61213d565b61010860008484815181106115ba57634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000208190555080806115df9061357e565b915050611581565b5060008060006115f684612141565b9093509150611604846122d2565b905060006040518060e00160405280336001600160a01b031681526020014281526020018581526020018481526020018381526020018681526020016000600181111561166157634e487b7160e01b600052602160045260246000fd5b9052905080610106600061167661010a61213d565b81526020808201929092526040908101600020835181546001600160a01b0319166001600160a01b03909116178155838301516001820155908301516002820155606083015160038201556080830151600482015560a0830151805191926116e692600585019290910190612611565b5060c082015160068201805460ff19166001838181111561171757634e487b7160e01b600052602160045260246000fd5b02179055505033600090815261010760205260409020905061173a61010a61213d565b81546001810183556000928352602090922090910155337fba68dec919f1691408f54f9ad116b0c62f60dc6702ac8c6a67b166a8cd52d33061177d61010a61213d565b874260405161178e939291906133a4565b60405180910390a25050505050565b60006117ab816106e1611eb5565b81518351146117cc5760405162461bcd60e51b815260040161075290612f87565b60005b8351811015610f40578281815181106117f857634e487b7160e01b600052603260045260246000fd5b6020026020010151610104600086848151811061182557634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550808061185c9061357e565b9150506117cf565b60ff818154811061187457600080fd5b600091825260209091200154905081565b6000611893816106e1611eb5565b5061010255565b60006118a8816106e1611eb5565b610f406101058484612701565b6001600160a01b03811660009081526101046020526040812054610101546106cd9161234f565b60006101056118ec6001846134cc565b81546118f790613549565b811061191357634e487b7160e01b600052603260045260246000fd5b8154600116156119325790600052602060002090602091828204019190065b9054600160f81b911a0260f81c92915050565b600081815261010660209081526040808320815160e08101835281546001600160a01b0316815260018201548185015260028201548184015260038201546060820152600482015460808201526005820180548451818702810187019095528085528695929460a0860193909291908301828280156119e357602002820191906000526020600020905b8154815260200190600101908083116119cf575b5050509183525050600682015460209091019060ff166001811115611a1857634e487b7160e01b600052602160045260246000fd5b6001811115611a3757634e487b7160e01b600052602160045260246000fd5b815250509050611aad612710611aa760fe54611aa7611a758660800151611a6f88606001518960400151611f1d90919063ffffffff16565b90611f1d565b611aa18760a0015151611aa1611a988a602001514261235b90919063ffffffff16565b60fd549061234f565b9061234f565b90612367565b9392505050565b611abd82610afc565b611ac9816106e1611eb5565b610bc18383611fb0565b6101015481565b600081815261010660205260409020546001600160a01b03163314611b115760405162461bcd60e51b815260040161075290613163565b6000818152610106602052604081206006015460ff166001811115611b4657634e487b7160e01b600052602160045260246000fd5b14611b635760405162461bcd60e51b815260040161075290612fdd565b611b6c8161072f565b60fb546000828152610106602052604090819020905163665adcfd60e01b81526001600160a01b039092169163665adcfd91611bb091600590910190600401612e57565b600060405180830381600087803b158015611bca57600080fd5b505af1158015611bde573d6000803e3d6000fd5b50505060008281526101066020908152604080832060068101805460ff19166001179055600501805482518185028101850190935280835293945090929091830182828015611c4c57602002820191906000526020600020905b815481526020019060010190808311611c38575b5050505050905060005b8151811015611cb35760006101086000848481518110611c8657634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020819055508080611cab9061357e565b915050611c56565b50336001600160a01b03167fe46c316e0026b6873715afa24fe53e01843fc6a22ecefc596077af4e9edd94cf83610106600086815260200190815260200160002060050142604051611d07939291906133cd565b60405180910390a25050565b6101025481565b6000611d28816106e1611eb5565b5061010055565b6101058054611d3d90613549565b80601f0160208091040260200160405190810160405280929190818152602001828054611d6990613549565b8015611db65780601f10611d8b57610100808354040283529160200191611db6565b820191906000526020600020905b815481529060010190602001808311611d9957829003601f168201915b505050505081565b600160005b8251811015610e025760fb54835133916001600160a01b031690636352211e90869085908110611e0357634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b8152600401611e279190612e75565b60206040518083038186803b158015611e3f57600080fd5b505afa158015611e53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e779190612812565b6001600160a01b031614611e8a57600091505b80611e948161357e565b915050611dc3565b6001600160e01b031981166301ffc9a760e01b14919050565b3390565b611ec38282611218565b6108ea57611edb816001600160a01b03166014612373565b611ee6836020612373565b604051602001611ef7929190612d72565b60408051601f198184030181529082905262461bcd60e51b825261075291600401612e93565b6000611aad8284613450565b611f338282611218565b6108ea5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611f6c611eb5565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611fba8282611218565b156108ea5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19169055611ff1611eb5565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600054610100900460ff168061204e575060005460ff16155b61206a5760405162461bcd60e51b815260040161075290613022565b600054610100900460ff16158015612095576000805460ff1961ff0019909116610100171660011790555b61209d612525565b6120a5612525565b6120ad612525565b80156120bf576000805461ff00191690555b50565b600054610100900460ff16806120db575060005460ff16155b6120f75760405162461bcd60e51b815260040161075290613022565b600054610100900460ff16158015612122576000805460ff1961ff0019909116610100171660011790555b6120ad612598565b6108ea8282611f29565b80546001019055565b5490565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905281908180805b86518160ff16101561221f5760018460016121cb8a8560ff16815181106121be57634e487b7160e01b600052603260045260246000fd5b60200260200101516118dc565b6121d591906134e3565b60ff16600881106121f657634e487b7160e01b600052603260045260246000fd5b602002018181516122079190613468565b60ff169052508061221781613599565b915050612187565b5060005b60088160ff1610156122a1578260ff16848260ff166008811061225657634e487b7160e01b600052603260045260246000fd5b602002015160ff16111561228f57838160ff166008811061228757634e487b7160e01b600052603260045260246000fd5b602002015192505b8061229981613599565b915050612223565b508160ff16600314156122b2575060015b6122bd865182610b11565b94506122c8336118b5565b9350505050915091565b6000805b8251811015610e0257610103600084838151811061230457634e487b7160e01b600052603260045260246000fd5b60209081029190910181015182528101919091526040016000205460ff1615156001141561233d576101025461233a9083613450565b91505b806123478161357e565b9150506122d6565b6000611aad82846134ad565b6000611aad82846134cc565b6000611aad828461348d565b606060006123828360026134ad565b61238d906002613450565b67ffffffffffffffff8111156123b357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156123dd576020820181803683370190505b509050600360fc1b8160008151811061240657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061244357634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006124678460026134ad565b612472906001613450565b90505b6001811115612506576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106124b457634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106124d857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936124ff81613532565b9050612475565b508315611aad5760405162461bcd60e51b815260040161075290612eba565b600054610100900460ff168061253e575060005460ff16155b61255a5760405162461bcd60e51b815260040161075290613022565b600054610100900460ff161580156120ad576000805460ff1961ff00199091166101001716600117905580156120bf576000805461ff001916905550565b600054610100900460ff16806125b1575060005460ff16155b6125cd5760405162461bcd60e51b815260040161075290613022565b600054610100900460ff161580156125f8576000805460ff1961ff0019909116610100171660011790555b600160975580156120bf576000805461ff001916905550565b82805482825590600052602060002090810192821561264c579160200282015b8281111561264c578251825591602001919060010190612631565b50612658929150612775565b5090565b6040518060e0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160608152602001600060018111156126bb57634e487b7160e01b600052602160045260246000fd5b905290565b82805482825590600052602060002090810192821561264c579160200282015b8281111561264c578251829061ffff169055916020019190600101906126e0565b82805461270d90613549565b90600052602060002090601f01602090048101928261272f576000855561264c565b82601f106127485782800160ff1982351617855561264c565b8280016001018555821561264c579182015b8281111561264c57823582559160200191906001019061275a565b5b808211156126585760008155600101612776565b600082601f83011261279a578081fd5b813560206127af6127aa8361342c565b613402565b82815281810190858301838502870184018810156127cb578586fd5b855b858110156127e9578135845292840192908401906001016127cd565b5090979650505050505050565b600060208284031215612807578081fd5b8135611aad816135e5565b600060208284031215612823578081fd5b8151611aad816135e5565b60008060008060808587031215612843578283fd5b843561284e816135e5565b935060208581013561285f816135e5565b935060408601359250606086013567ffffffffffffffff80821115612882578384fd5b818801915088601f830112612895578384fd5b8135818111156128a7576128a76135cf565b6128b9601f8201601f19168501613402565b915080825289848285010111156128ce578485fd5b8084840185840137810190920192909252939692955090935050565b600080604083850312156128fc578182fd5b8235612907816135e5565b946020939093013593505050565b600080600060608486031215612929578283fd5b8335612934816135e5565b925060208401359150604084013561294b816135e5565b809150509250925092565b60008060408385031215612968578182fd5b823567ffffffffffffffff8082111561297f578384fd5b818501915085601f830112612992578384fd5b813560206129a26127aa8361342c565b82815281810190858301838502870184018b10156129be578889fd5b8896505b848710156129e95780356129d5816135e5565b8352600196909601959183019183016129c2565b50965050860135925050808211156129ff578283fd5b50612a0c8582860161278a565b9150509250929050565b60006020808385031215612a28578182fd5b823567ffffffffffffffff811115612a3e578283fd5b8301601f81018513612a4e578283fd5b8035612a5c6127aa8261342c565b81815283810190838501865b84811015612a9157612a7f8a88843589010161278a565b84529286019290860190600101612a68565b509098975050505050505050565b600060208284031215612ab0578081fd5b813567ffffffffffffffff811115612ac6578182fd5b612ad28482850161278a565b949350505050565b60008060408385031215612aec578182fd5b823567ffffffffffffffff80821115612b03578384fd5b612b0f8683870161278a565b9350602091508185013581811115612b25578384fd5b85019050601f81018613612b37578283fd5b8035612b456127aa8261342c565b81815283810190838501858402850186018a1015612b61578687fd5b8694505b83851015612b8c578035612b78816135fa565b835260019490940193918501918501612b65565b5080955050505050509250929050565b600060208284031215612bad578081fd5b8151611aad816135fa565b600060208284031215612bc9578081fd5b5035919050565b60008060408385031215612be2578182fd5b823591506020830135612bf4816135e5565b809150509250929050565b600060208284031215612c10578081fd5b81356001600160e01b031981168114611aad578182fd5b60008060208385031215612c39578182fd5b823567ffffffffffffffff80821115612c50578384fd5b818501915085601f830112612c63578384fd5b813581811115612c71578485fd5b866020828501011115612c82578485fd5b60209290920196919550909350505050565b60008060408385031215612ca6578182fd5b823591506020830135612bf4816135fa565b6000815180845260208085019450808401835b83811015612ce757815187529582019590820190600101612ccb565b509495945050505050565b6000815480845260208085019450838352808320835b83811015612ce757815487529582019560019182019101612d08565b60008151808452612d3c816020860160208601613506565b601f01601f19169290920160200192915050565b60028110612d6e57634e487b7160e01b600052602160045260246000fd5b9052565b60007f416363657373436f6e74726f6c3a206163636f756e742000000000000000000082528351612daa816017850160208801613506565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612ddb816028840160208801613506565b01602801949350505050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03871681526020810186905260408101859052606081018490526080810183905260c08101612e3960a0830184612d50565b979650505050505050565b600060208252611aad6020830184612cb8565b600060208252611aad6020830184612cf2565b901515815260200190565b90815260200190565b6001600160e01b031991909116815260200190565b600060208252611aad6020830184612d24565b6001600160a01b0391909116815260200190565b6020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b6020808252602e908201527f53686f67756e5374616b696e673a204f6e6c792066616d696c79206f776e657260408201526d2063616e20636c61696d2053484f60901b606082015260800190565b6020808252602a908201527f53686f67756e5374616b696e673a20547261696e696e672068617320616c726560408201526961647920656e6465642160b01b606082015260800190565b60208082526036908201527f53686f67756e5374616b696e673a2055736572206c656e67746820616e6420516040820152750eac2dce8d2e8f240c8decae640dcdee840dac2e8c6d60531b606082015260800190565b60208082526025908201527f53686f67756e5374616b696e673a20547261696e696e6720616c726561647920604082015264115b99195960da1b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526037908201527f53686f67756e5374616b696e673a204f6e65206f72204d6f72652073686f677560408201527f6e732061726520616c726561647920747261696e696e67000000000000000000606082015260800190565b60208082526026908201527f53686f67756e5374616b696e673a204174206c6561737420312053532072657160408201526575697265642160d01b606082015260800190565b60208082526030908201527f53686f67756e5374616b696e673a20546f20616e6420616d6f756e74206c656e60408201526f677468206e6f74206d61746368696e6760801b606082015260800190565b6020808252602a908201527f53686f67756e5374616b696e673a204e6f7420746865206f776e6572206f66206040820152697468652066616d696c7960b01b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526024908201527f53686f67756e5374616b696e673a204d6178696d756d206f662033205353206f6040820152636e6c792160e01b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b6020808252603b908201527f53686f67756e5374616b696e673a205573657220646f6573206e6f742068617660408201527f6520426f6e75732053484f20546f6b656e7320746f20636c61696d0000000000606082015260800190565b60208082526038908201527f53686f67756e5374616b696e673a204f6e65206f72204d6f72652073686f677560408201527f6e7320617265206e6f74206f776e656420627920796f75210000000000000000606082015260800190565b60006020825260018060a01b038351166020830152602083015160408301526040830151606083015260608301516080830152608083015160a083015260a083015160e060c0840152613388610100840182612cb8565b905060c084015161339c60e0850182612d50565b509392505050565b6000848252606060208301526133bd6060830185612cb8565b9050826040830152949350505050565b6000848252606060208301526133bd6060830185612cf2565b918252602082015260400190565b60ff91909116815260200190565b60405181810167ffffffffffffffff81118282101715613424576134246135cf565b604052919050565b600067ffffffffffffffff821115613446576134466135cf565b5060209081020190565b60008219821115613463576134636135b9565b500190565b600060ff821660ff84168060ff03821115613485576134856135b9565b019392505050565b6000826134a857634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156134c7576134c76135b9565b500290565b6000828210156134de576134de6135b9565b500390565b600060ff821660ff8416808210156134fd576134fd6135b9565b90039392505050565b60005b83811015613521578181015183820152602001613509565b83811115610f405750506000910152565b600081613541576135416135b9565b506000190190565b60028104600182168061355d57607f821691505b60208210811415610e0257634e487b7160e01b600052602260045260246000fd5b6000600019821415613592576135926135b9565b5060010190565b600060ff821660ff8114156135b0576135b06135b9565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146120bf57600080fd5b80151581146120bf57600080fdfea264697066735822122032d78e4652f2b87e1263b1bc3c8831b63eca67a9e27bded3b7273e44e3dbc4ed64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "airdrop(address[],uint256[])": {
        "details": "Airdrop SHO Tokens out of contract"
      },
      "areAvailiable(uint256[])": {
        "details": "Determines if the tokenIds are availiable for training"
      },
      "areOwned(uint256[])": {
        "details": "Determines if the all tokenIds are owned by msg sneder"
      },
      "calculateRewards(uint256)": {
        "details": "Caluclate rewards for given Family Id"
      },
      "claimAllRewards()": {
        "details": "QOL to claim all rewards"
      },
      "claimBonusSHO()": {
        "details": "Lets user claim bonus SHO"
      },
      "claimRewards(uint256)": {
        "details": "Claim SHO reward for given family Id"
      },
      "endMultipleTraining(uint256[])": {
        "details": "Claim tokens and leave train"
      },
      "endTraining(uint256)": {
        "details": "Claim tokens and leave train"
      },
      "getCountMultiplier(uint256,bool)": {
        "details": "Retrieves Count multiplier"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTotalMedallionMultiplier(address)": {
        "details": "Retrieves Rare multiplier"
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setBonusSHO(address[],uint256[])": {
        "details": "Set bonus SHO Tokens to be claimed"
      },
      "startTraining(uint256[])": {
        "details": "Start train"
      },
      "startTrainingMultiple(uint256[][])": {
        "details": "Start Multiple Training Sessions"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "updateGuilds(bytes)": {
        "details": "Storing Guild Metadata as 1 byte hexes on a byte for gas optimization"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "endMultipleTraining(uint256[])": {
        "notice": "End train for SSs. You will stop acumulating SHO."
      },
      "endTraining(uint256)": {
        "notice": "End train for SSs. You will stop acumulating SHO."
      },
      "startTraining(uint256[])": {
        "notice": "Sends SSs (max. 5) on a train, SSs of the same Guild and if rare will get a bonus multiplier!"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 413,
        "contract": "contracts/ShogunStaking.sol:ShogunStaking",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 416,
        "contract": "contracts/ShogunStaking.sol:ShogunStaking",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2827,
        "contract": "contracts/ShogunStaking.sol:ShogunStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3666,
        "contract": "contracts/ShogunStaking.sol:ShogunStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 48,
        "contract": "contracts/ShogunStaking.sol:ShogunStaking",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)"
      },
      {
        "astId": 333,
        "contract": "contracts/ShogunStaking.sol:ShogunStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 580,
        "contract": "contracts/ShogunStaking.sol:ShogunStaking",
        "label": "_status",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 623,
        "contract": "contracts/ShogunStaking.sol:ShogunStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2698,
        "contract": "contracts/ShogunStaking.sol:ShogunStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 9391,
        "contract": "contracts/ShogunStaking.sol:ShogunStaking",
        "label": "SS",
        "offset": 0,
        "slot": "251",
        "type": "t_contract(IShogunNFT)11027"
      },
      {
        "astId": 9394,
        "contract": "contracts/ShogunStaking.sol:ShogunStaking",
        "label": "SHO",
        "offset": 0,
        "slot": "252",
        "type": "t_contract(IShogunToken)11073"
      },
      {
        "astId": 9396,
        "contract": "contracts/ShogunStaking.sol:ShogunStaking",
        "label": "baseReward",
        "offset": 0,
        "slot": "253",
        "type": "t_uint256"
      },
      {
        "astId": 9398,
        "contract": "contracts/ShogunStaking.sol:ShogunStaking",
        "label": "timescale",
        "offset": 0,
        "slot": "254",
        "type": "t_uint256"
      },
      {
        "astId": 9401,
        "contract": "contracts/ShogunStaking.sol:ShogunStaking",
        "label": "countMultipliers",
        "offset": 0,
        "slot": "255",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 9403,
        "contract": "contracts/ShogunStaking.sol:ShogunStaking",
        "label": "guildMultiplier",
        "offset": 0,
        "slot": "256",
        "type": "t_uint256"
      },
      {
        "astId": 9405,
        "contract": "contracts/ShogunStaking.sol:ShogunStaking",
        "label": "medallionMultiplier",
        "offset": 0,
        "slot": "257",
        "type": "t_uint256"
      },
      {
        "astId": 9407,
        "contract": "contracts/ShogunStaking.sol:ShogunStaking",
        "label": "shogunBonus",
        "offset": 0,
        "slot": "258",
        "type": "t_uint256"
      },
      {
        "astId": 9411,
        "contract": "contracts/ShogunStaking.sol:ShogunStaking",
        "label": "isLegendarySamurai",
        "offset": 0,
        "slot": "259",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 9415,
        "contract": "contracts/ShogunStaking.sol:ShogunStaking",
        "label": "medallionCount",
        "offset": 0,
        "slot": "260",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9417,
        "contract": "contracts/ShogunStaking.sol:ShogunStaking",
        "label": "guilds",
        "offset": 0,
        "slot": "261",
        "type": "t_bytes_storage"
      },
      {
        "astId": 9422,
        "contract": "contracts/ShogunStaking.sol:ShogunStaking",
        "label": "families",
        "offset": 0,
        "slot": "262",
        "type": "t_mapping(t_uint256,t_struct(Family)9368_storage)"
      },
      {
        "astId": 9427,
        "contract": "contracts/ShogunStaking.sol:ShogunStaking",
        "label": "userFamilies",
        "offset": 0,
        "slot": "263",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 9431,
        "contract": "contracts/ShogunStaking.sol:ShogunStaking",
        "label": "onTraining",
        "offset": 0,
        "slot": "264",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 9435,
        "contract": "contracts/ShogunStaking.sol:ShogunStaking",
        "label": "bonusSHO",
        "offset": 0,
        "slot": "265",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9438,
        "contract": "contracts/ShogunStaking.sol:ShogunStaking",
        "label": "_familyId",
        "offset": 0,
        "slot": "266",
        "type": "t_struct(Counter)2834_storage"
      },
      {
        "astId": 9442,
        "contract": "contracts/ShogunStaking.sol:ShogunStaking",
        "label": "______gap",
        "offset": 0,
        "slot": "267",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IShogunNFT)11027": {
        "encoding": "inplace",
        "label": "contract IShogunNFT",
        "numberOfBytes": "20"
      },
      "t_contract(IShogunToken)11073": {
        "encoding": "inplace",
        "label": "contract IShogunToken",
        "numberOfBytes": "20"
      },
      "t_enum(TrainState)9388": {
        "encoding": "inplace",
        "label": "enum ShogunStaking.TrainState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)43_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Family)9368_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ShogunStaking.Family)",
        "numberOfBytes": "32",
        "value": "t_struct(Family)9368_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Counter)2834_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 2833,
            "contract": "contracts/ShogunStaking.sol:ShogunStaking",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Family)9368_storage": {
        "encoding": "inplace",
        "label": "struct ShogunStaking.Family",
        "members": [
          {
            "astId": 9353,
            "contract": "contracts/ShogunStaking.sol:ShogunStaking",
            "label": "familyOwner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9355,
            "contract": "contracts/ShogunStaking.sol:ShogunStaking",
            "label": "lastClaim",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9357,
            "contract": "contracts/ShogunStaking.sol:ShogunStaking",
            "label": "guildMultiplier",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9359,
            "contract": "contracts/ShogunStaking.sol:ShogunStaking",
            "label": "medallionMultiplier",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9361,
            "contract": "contracts/ShogunStaking.sol:ShogunStaking",
            "label": "shogunBonus",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 9364,
            "contract": "contracts/ShogunStaking.sol:ShogunStaking",
            "label": "shogunIds",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 9367,
            "contract": "contracts/ShogunStaking.sol:ShogunStaking",
            "label": "trainState",
            "offset": 0,
            "slot": "6",
            "type": "t_enum(TrainState)9388"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(RoleData)43_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 40,
            "contract": "contracts/ShogunStaking.sol:ShogunStaking",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 42,
            "contract": "contracts/ShogunStaking.sol:ShogunStaking",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}