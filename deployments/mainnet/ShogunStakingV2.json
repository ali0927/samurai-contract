{
  "address": "0xc564AD6Cf96Bea48DF5E44C11C08EC7e6f0bfB75",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimTime",
          "type": "uint256"
        }
      ],
      "name": "BonusClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimTime",
          "type": "uint256"
        }
      ],
      "name": "RewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "trainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "shogunIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "TrainingEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "trainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "shogunIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        }
      ],
      "name": "TrainingStarted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SHO",
      "outputs": [
        {
          "internalType": "contract IShogunToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SS",
      "outputs": [
        {
          "internalType": "contract IShogunNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ss",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_baseReward",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "__ShogunStaking_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "to",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amount",
          "type": "uint256[]"
        }
      ],
      "name": "airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "areAvailiable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "out",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "areOwned",
      "outputs": [
        {
          "internalType": "bool",
          "name": "out",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bonusSHO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trainId",
          "type": "uint256"
        }
      ],
      "name": "calculateRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "calculateRewardsMultiV2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "calculateRewardsV2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimAllRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimBonusSHO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "familyId",
          "type": "uint256"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimRewardsMultiV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "claimRewardsV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "countMultipliers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "training",
          "type": "bool"
        }
      ],
      "name": "enableTraining",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "trainIds",
          "type": "uint256[]"
        }
      ],
      "name": "endMultipleTraining",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trainId",
          "type": "uint256"
        }
      ],
      "name": "endTraining",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "families",
      "outputs": [
        {
          "internalType": "address",
          "name": "familyOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lastClaim",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "guildMultiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "medallionMultiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shogunBonus",
          "type": "uint256"
        },
        {
          "internalType": "enum ShogunStakingV2.TrainState",
          "name": "trainState",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "guildCount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "sameGuild",
          "type": "bool"
        }
      ],
      "name": "getCountMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trainId",
          "type": "uint256"
        }
      ],
      "name": "getFamily",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "familyOwner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lastClaim",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "guildMultiplier",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "medallionMultiplier",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shogunBonus",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "shogunIds",
              "type": "uint256[]"
            },
            {
              "internalType": "enum ShogunStakingV2.TrainState",
              "name": "trainState",
              "type": "uint8"
            }
          ],
          "internalType": "struct ShogunStakingV2.Family",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFamilyCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "familyId",
          "type": "uint256"
        }
      ],
      "name": "getFamilyStatus",
      "outputs": [
        {
          "internalType": "enum ShogunStakingV2.TrainState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getGuild",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "familyId",
          "type": "uint256"
        }
      ],
      "name": "getOwnerOfFamily",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "familyId",
          "type": "uint256"
        }
      ],
      "name": "getShogunsOfFamily",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getTotalMedallionMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserFamilies",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "guildMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "guilds",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isLegendarySamurai",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lastClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "medallionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "medallionMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "onTraining",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeUnstaker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setBaseReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "setBonusSHO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_countMultipliers",
          "type": "uint256[]"
        }
      ],
      "name": "setCountMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_guildMultiplier",
          "type": "uint256"
        }
      ],
      "name": "setGuildMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "shogunIds",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "flags",
          "type": "bool[]"
        }
      ],
      "name": "setLegendaryShoguns",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "quantities",
          "type": "uint256[]"
        }
      ],
      "name": "setMedallionCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_medallionMultiplier",
          "type": "uint256"
        }
      ],
      "name": "setMedallionMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sho",
          "type": "address"
        }
      ],
      "name": "setSHOToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shogunBonus",
          "type": "uint256"
        }
      ],
      "name": "setShogunBonus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newTimescale",
          "type": "uint256"
        }
      ],
      "name": "setTimeScale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_unstaker",
          "type": "address"
        }
      ],
      "name": "setUnstaker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shogunBonus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "shogunIds",
          "type": "uint256[]"
        }
      ],
      "name": "startTraining",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[][]",
          "name": "shogunIdsArray",
          "type": "uint256[][]"
        }
      ],
      "name": "startTrainingMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trainingEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "shogunIds",
          "type": "uint256[]"
        }
      ],
      "name": "unlockShogunNFTs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unstaker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_guilds",
          "type": "bytes"
        }
      ],
      "name": "updateGuilds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userFamilies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf2892a1c90542b0b6382b5e5d83d63b8a48302d3d6f8a52d66976c5b031ee91b",
  "receipt": {
    "to": null,
    "from": "0x9f621276D7F8Ca616d76dE692464aEf6159c3EB4",
    "contractAddress": "0xc564AD6Cf96Bea48DF5E44C11C08EC7e6f0bfB75",
    "transactionIndex": 158,
    "gasUsed": "3490655",
    "logsBloom": "0x
    "blockHash": "0x80ab42d49c1f4581deff74272fdd2dced96e408ca822cfad74d50655d2390678",
    "transactionHash": "0xf2892a1c90542b0b6382b5e5d83d63b8a48302d3d6f8a52d66976c5b031ee91b",
    "logs": [],
    "blockNumber": 14331833,
    "cumulativeGasUsed": "18768164",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "a543eef78a23dffe36d8382a2b0cd2a6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimTime\",\"type\":\"uint256\"}],\"name\":\"BonusClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimTime\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"shogunIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"TrainingEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"shogunIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"TrainingStarted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHO\",\"outputs\":[{\"internalType\":\"contract IShogunToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SS\",\"outputs\":[{\"internalType\":\"contract IShogunNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ss\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_baseReward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"__ShogunStaking_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"areAvailiable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"out\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"areOwned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"out\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bonusSHO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trainId\",\"type\":\"uint256\"}],\"name\":\"calculateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"calculateRewardsMultiV2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"calculateRewardsV2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAllRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBonusSHO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"familyId\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewardsMultiV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claimRewardsV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"countMultipliers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"training\",\"type\":\"bool\"}],\"name\":\"enableTraining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"trainIds\",\"type\":\"uint256[]\"}],\"name\":\"endMultipleTraining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trainId\",\"type\":\"uint256\"}],\"name\":\"endTraining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"families\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"familyOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guildMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"medallionMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shogunBonus\",\"type\":\"uint256\"},{\"internalType\":\"enum ShogunStakingV2.TrainState\",\"name\":\"trainState\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"guildCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sameGuild\",\"type\":\"bool\"}],\"name\":\"getCountMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trainId\",\"type\":\"uint256\"}],\"name\":\"getFamily\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"familyOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guildMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"medallionMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shogunBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"shogunIds\",\"type\":\"uint256[]\"},{\"internalType\":\"enum ShogunStakingV2.TrainState\",\"name\":\"trainState\",\"type\":\"uint8\"}],\"internalType\":\"struct ShogunStakingV2.Family\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFamilyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"familyId\",\"type\":\"uint256\"}],\"name\":\"getFamilyStatus\",\"outputs\":[{\"internalType\":\"enum ShogunStakingV2.TrainState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getGuild\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"familyId\",\"type\":\"uint256\"}],\"name\":\"getOwnerOfFamily\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"familyId\",\"type\":\"uint256\"}],\"name\":\"getShogunsOfFamily\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTotalMedallionMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserFamilies\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guildMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guilds\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isLegendarySamurai\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"medallionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"medallionMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"onTraining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeUnstaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setBaseReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"setBonusSHO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_countMultipliers\",\"type\":\"uint256[]\"}],\"name\":\"setCountMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_guildMultiplier\",\"type\":\"uint256\"}],\"name\":\"setGuildMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"shogunIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"flags\",\"type\":\"bool[]\"}],\"name\":\"setLegendaryShoguns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"}],\"name\":\"setMedallionCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_medallionMultiplier\",\"type\":\"uint256\"}],\"name\":\"setMedallionMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sho\",\"type\":\"address\"}],\"name\":\"setSHOToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shogunBonus\",\"type\":\"uint256\"}],\"name\":\"setShogunBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTimescale\",\"type\":\"uint256\"}],\"name\":\"setTimeScale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_unstaker\",\"type\":\"address\"}],\"name\":\"setUnstaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shogunBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"shogunIds\",\"type\":\"uint256[]\"}],\"name\":\"startTraining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"shogunIdsArray\",\"type\":\"uint256[][]\"}],\"name\":\"startTrainingMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trainingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"shogunIds\",\"type\":\"uint256[]\"}],\"name\":\"unlockShogunNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_guilds\",\"type\":\"bytes\"}],\"name\":\"updateGuilds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userFamilies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"airdrop(address[],uint256[])\":{\"details\":\"Airdrop SHO Tokens out of contract\"},\"areAvailiable(uint256[])\":{\"details\":\"Determines if the tokenIds are availiable for training\"},\"areOwned(uint256[])\":{\"details\":\"Determines if the all tokenIds are owned by msg sneder\"},\"calculateRewards(uint256)\":{\"details\":\"Caluclate rewards for given Family Id\"},\"claimAllRewards()\":{\"details\":\"QOL to claim all rewards\"},\"claimBonusSHO()\":{\"details\":\"Lets user claim bonus SHO\"},\"claimRewards(uint256)\":{\"details\":\"Claim SHO reward for given family Id\"},\"endMultipleTraining(uint256[])\":{\"details\":\"Claim tokens and leave train\"},\"endTraining(uint256)\":{\"details\":\"Claim tokens and leave train\"},\"getCountMultiplier(uint256,bool)\":{\"details\":\"Retrieves Count multiplier\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTotalMedallionMultiplier(address)\":{\"details\":\"Retrieves Rare multiplier\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setBonusSHO(address[],uint256[])\":{\"details\":\"Set bonus SHO Tokens to be claimed\"},\"startTraining(uint256[])\":{\"details\":\"Start train\"},\"startTrainingMultiple(uint256[][])\":{\"details\":\"Start Multiple Training Sessions\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"updateGuilds(bytes)\":{\"details\":\"Storing Guild Metadata as 1 byte hexes on a byte for gas optimization\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"endMultipleTraining(uint256[])\":{\"notice\":\"End train for SSs. You will stop acumulating SHO.\"},\"endTraining(uint256)\":{\"notice\":\"End train for SSs. You will stop acumulating SHO.\"},\"startTraining(uint256[])\":{\"notice\":\"Sends SSs (max. 5) on a train, SSs of the same Guild and if rare will get a bonus multiplier!\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ShogunStakingV2.sol\":\"ShogunStakingV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ffe9655abbb3741fcb84ad10e2f628d5dbec46b3f84a69ceec4752e807e2757\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2f359f9d5c56394e60d74401487ab55d8ef0012907b07c9abbb8f998bf5ddfec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721HolderUpgradeable is Initializable, IERC721ReceiverUpgradeable {\\n    function __ERC721Holder_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Holder_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb7f90ab8af7dae0bd4acfa088f9e606ea039110face097ca7c8beef563f71e90\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0ac286be11c2345f71d938119e638483fc1ddb9f56b7da00dd470adcd977f439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ShogunStakingV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IShogunToken.sol\\\";\\nimport \\\"./interfaces/IShogunNFT.sol\\\";\\n\\n/*  _____ _                             _____                                 _     \\n  / ____| |                            / ____|                               (_)    \\n | (___ | |__   ___   __ _ _   _ _ __ | (___   __ _ _ __ ___  _   _ _ __ __ _ _ ___ \\n  \\\\___ \\\\| '_ \\\\ / _ \\\\ / _` | | | | '_ \\\\ \\\\___ \\\\ / _` | '_ ` _ \\\\| | | | '__/ _` | / __|\\n  ____) | | | | (_) | (_| | |_| | | | |____) | (_| | | | | | | |_| | | | (_| | \\\\__ \\\\\\n |_____/|_| |_|\\\\___/ \\\\__, |\\\\__,_|_| |_|_____/ \\\\__,_|_| |_| |_|\\\\__,_|_|  \\\\__,_|_|___/\\n                      __/ |                                                         \\n                     |___/    \\n*/\\n\\ncontract ShogunStakingV2 is\\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    ERC721HolderUpgradeable\\n{\\n    using SafeMathUpgradeable for uint256;\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    struct Family {\\n        address familyOwner;\\n        uint256 lastClaim;\\n        uint256 guildMultiplier;\\n        uint256 medallionMultiplier;\\n        uint256 shogunBonus;\\n        uint256[] shogunIds;\\n        TrainState trainState;\\n    }\\n\\n    struct GuildCounter {\\n        uint8 justiceCount;\\n        uint8 courageCount;\\n        uint8 compassionCount;\\n        uint8 respectCount;\\n        uint8 integrityCount;\\n        uint8 honourCount;\\n        uint8 dutyCount;\\n        uint8 restraintCount;\\n    }\\n\\n    enum TrainState {\\n        IN_PROGRESS,\\n        ENDED\\n    }\\n\\n    IShogunNFT public SS;\\n    IShogunToken public SHO;\\n\\n    uint256 public baseReward;\\n    uint256 private timescale;\\n\\n    uint256[] public countMultipliers;\\n    uint256 public guildMultiplier;\\n    uint256 public medallionMultiplier;\\n    uint256 public shogunBonus;\\n    mapping(uint256 => bool) public isLegendarySamurai;\\n    mapping(address => uint256) public medallionCount;\\n\\n    bytes public guilds;\\n\\n    mapping(uint256 => Family) public families; // Map id to Family\\n    mapping(address => uint256[]) public userFamilies; // Maps user address to familyId\\n    mapping(uint256 => uint256) public onTraining; // Maps tokenId to familyId (0 = not training) (No double training)\\n    mapping(address => uint256) public bonusSHO;\\n\\n    // Private Variables\\n    CountersUpgradeable.Counter private _familyId;\\n\\n    // Reserve Storage\\n    uint256[50] private ______gap;\\n\\n    address public unstaker;\\n    bool public trainingEnabled;\\n    mapping(uint256 => uint256) public lastClaim;\\n\\n    // Events\\n    event TrainingStarted(\\n        address indexed user,\\n        uint256 trainId,\\n        uint256[] shogunIds,\\n        uint256 startTime\\n    );\\n    event TrainingEnded(\\n        address indexed user,\\n        uint256 trainId,\\n        uint256[] shogunIds,\\n        uint256 endTime\\n    );\\n    event RewardClaimed(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 claimTime\\n    );\\n    event BonusClaimed(address indexed user, uint256 amount, uint256 claimTime);\\n\\n    // Modifiers\\n    function __ShogunStaking_init(\\n        address ss,\\n        uint256 _baseReward,\\n        address admin\\n    ) public initializer {\\n        __AccessControl_init();\\n        __ReentrancyGuard_init();\\n\\n        // Constructor init\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin); // To revoke access after functions are set\\n        baseReward = _baseReward;\\n        SS = IShogunNFT(ss);\\n        countMultipliers = [10000, 10100, 10300];\\n        guildMultiplier = 200;\\n        medallionMultiplier = 10;\\n        shogunBonus = 800; // 8% for shogun bonus\\n        timescale = 1 days;\\n    }\\n\\n    // ------------------------- USER FUNCTION ---------------------------\\n\\n    /// @dev Start Multiple Training Sessions\\n    function startTrainingMultiple(uint256[][] memory shogunIdsArray) public {\\n        for (uint256 i = 0; i < shogunIdsArray.length; i++) {\\n            startTraining(shogunIdsArray[i]);\\n        }\\n    }\\n\\n    /// @dev Start train\\n    /// @notice Sends SSs (max. 5) on a train, SSs of the same Guild and if rare will get a bonus multiplier!\\n    function startTraining(uint256[] memory shogunIds) public {\\n        require(trainingEnabled, \\\"ShogunStaking: Training is disabled!\\\");\\n\\n        require(\\n            areAvailiable(shogunIds),\\n            \\\"ShogunStaking: One or More shoguns are already training\\\"\\n        );\\n\\n        require(\\n            areOwned(shogunIds),\\n            \\\"ShogunStaking: One or More shoguns are not owned by you!\\\"\\n        );\\n\\n        require(shogunIds.length <= 3, \\\"ShogunStaking: Maximum of 3 SS only!\\\");\\n        require(shogunIds.length > 0, \\\"ShogunStaking: At least 1 SS required!\\\");\\n\\n        _familyId.increment();\\n        SS.lockToken(shogunIds);\\n\\n        for (uint256 i = 0; i < shogunIds.length; i++) {\\n            onTraining[shogunIds[i]] = _familyId.current();\\n        }\\n\\n        uint256 _guildMultiplier;\\n        uint256 _medallionMultiplier;\\n        uint256 _shogunBonus;\\n\\n        (_guildMultiplier, _medallionMultiplier) = calculateMultipliers(\\n            shogunIds\\n        );\\n\\n        _shogunBonus = calculateShogunBonus(shogunIds);\\n\\n        Family memory _family = Family(\\n            msg.sender, // address familyOwner\\n            block.timestamp,\\n            _guildMultiplier, // uint256 GuildMultiplier;\\n            _medallionMultiplier,\\n            _shogunBonus,\\n            shogunIds, // uint256[] shogunIds;\\n            TrainState.IN_PROGRESS // TrainState trainState;\\n        );\\n\\n        families[_familyId.current()] = _family;\\n        userFamilies[msg.sender].push(_familyId.current());\\n\\n        emit TrainingStarted(\\n            msg.sender,\\n            _familyId.current(),\\n            shogunIds,\\n            block.timestamp\\n        );\\n    }\\n\\n    function setMedallionCount(\\n        address[] memory users,\\n        uint256[] memory quantities\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(\\n            users.length == quantities.length,\\n            \\\"ShogunStaking: User length and Quantity does not match\\\"\\n        );\\n        for (uint256 i = 0; i < users.length; i++) {\\n            medallionCount[users[i]] = quantities[i];\\n        }\\n    }\\n\\n    /// @dev Claim SHO reward for given family Id\\n    function claimRewards(uint256 familyId) public nonReentrant {\\n        require(trainingEnabled, \\\"ShogunStaking: Training is disabled!\\\");\\n        Family storage family = families[familyId];\\n        address familyOwner = family.familyOwner;\\n        require(\\n            msg.sender == familyOwner || msg.sender == unstaker,\\n            \\\"ShogunStaking: Only family owner can claim SHO\\\"\\n        );\\n        require(\\n            family.trainState == TrainState.IN_PROGRESS,\\n            \\\"ShogunStaking: Training has already ended!\\\"\\n        );\\n        uint256 rewards = calculateRewards(familyId);\\n        SHO.mint(familyOwner, rewards); // change\\n        family.lastClaim = block.timestamp;\\n        emit RewardClaimed(msg.sender, rewards, block.timestamp);\\n    }\\n\\n    /// @dev QOL to claim all rewards\\n    function claimAllRewards() public nonReentrant {\\n        uint256[] memory familyIds = getUserFamilies(msg.sender);\\n        uint256 totalRewards = 0;\\n        Family storage train;\\n\\n        for (uint256 i = 0; i < familyIds.length; i++) {\\n            totalRewards = totalRewards.add(calculateRewards(familyIds[i]));\\n            train = families[familyIds[i]];\\n            train.lastClaim = block.timestamp;\\n        }\\n        SHO.mint(msg.sender, totalRewards);\\n        emit RewardClaimed(msg.sender, totalRewards, block.timestamp);\\n    }\\n\\n    function claimRewardsV2(uint256 tokenId) public nonReentrant {\\n        // check if token belongs to owner\\n        require(\\n            SS.ownerOf(tokenId) == msg.sender,\\n            \\\"ShogunStaking: Claimant is not the owner!\\\"\\n        );\\n\\n        uint256 rewards = calculateRewardsV2(tokenId);\\n        lastClaim[tokenId] = block.timestamp;\\n\\n        SHO.mint(msg.sender, rewards);\\n    }\\n\\n    function claimRewardsMultiV2() public nonReentrant {\\n        uint256[] memory tokenIds = SS.walletOfOwner(msg.sender);\\n        uint256 totalRewards = 0;\\n        for (uint256 i; i < tokenIds.length; i++) {\\n            // check if token belongs to owner\\n\\n            require(\\n                SS.ownerOf(tokenIds[i]) == msg.sender,\\n                \\\"ShogunStaking: Claimant is not the owner!\\\"\\n            );\\n            totalRewards += calculateRewardsV2(tokenIds[i]);\\n            lastClaim[tokenIds[i]] = block.timestamp;\\n        }\\n\\n        SHO.mint(msg.sender, totalRewards);\\n    }\\n\\n    /// @dev Lets user claim bonus SHO\\n    function claimBonusSHO() public nonReentrant {\\n        uint256 claimAmount = bonusSHO[msg.sender];\\n        require(\\n            claimAmount > 0,\\n            \\\"ShogunStaking: User does not have Bonus SHO Tokens to claim\\\"\\n        );\\n        bonusSHO[msg.sender] = 0;\\n        SHO.transfer(msg.sender, claimAmount);\\n        emit BonusClaimed(msg.sender, claimAmount, block.timestamp);\\n    }\\n\\n    /// @dev Claim tokens and leave train\\n    /// @notice End train for SSs. You will stop acumulating SHO.\\n    function endTraining(uint256 trainId) public {\\n        require(trainingEnabled, \\\"ShogunStaking: Training is disabled!\\\");\\n        // Only Family Owner\\n        require(\\n            msg.sender == families[trainId].familyOwner ||\\n                msg.sender == unstaker,\\n            \\\"ShogunStaking: Not the owner of the family\\\"\\n        );\\n        // Must be training state\\n        require(\\n            families[trainId].trainState == TrainState.IN_PROGRESS,\\n            \\\"ShogunStaking: Training already Ended\\\"\\n        );\\n\\n        // Distribute Remaining Rewards\\n        claimRewards(trainId);\\n\\n        // Unlock Tokens\\n        SS.unlockToken(families[trainId].shogunIds);\\n\\n        // Change Family State such that further claims cannot be made\\n        families[trainId].trainState = TrainState.ENDED;\\n\\n        uint256[] memory shogunIds = families[trainId].shogunIds;\\n\\n        for (uint256 i = 0; i < shogunIds.length; i++) {\\n            onTraining[shogunIds[i]] = 0;\\n        }\\n\\n        emit TrainingEnded(\\n            msg.sender,\\n            trainId,\\n            families[trainId].shogunIds,\\n            block.timestamp\\n        );\\n    }\\n\\n    /// @dev Claim tokens and leave train\\n    /// @notice End train for SSs. You will stop acumulating SHO.\\n    function endMultipleTraining(uint256[] memory trainIds) public {\\n        for (uint256 i = 0; i < trainIds.length; i++) {\\n            endTraining(trainIds[i]);\\n        }\\n    }\\n\\n    // ----------------------- View FUNCTIONS -----------------------\\n\\n    /// @dev Retrieves Count multiplier\\n    function getCountMultiplier(uint256 guildCount, bool sameGuild)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (sameGuild) {\\n            return countMultipliers[guildCount - 1] + guildMultiplier;\\n        } else {\\n            return countMultipliers[guildCount - 1];\\n        }\\n    }\\n\\n    /// @dev Retrieves Rare multiplier\\n    function getTotalMedallionMultiplier(address user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return medallionMultiplier.mul(medallionCount[user]);\\n    }\\n\\n    /// @dev Calculates guild Multiplier based on tokenIds\\n    function calculateMultipliers(uint256[] memory _tokenIds)\\n        internal\\n        view\\n        returns (uint256 _guildMultiplier, uint256 _medallionMultiplier)\\n    {\\n        uint8[8] memory _guildCounter = [0, 0, 0, 0, 0, 0, 0, 0];\\n        uint8 maxCount = 0;\\n        bool _sameGuild;\\n\\n        // Count SS per guild\\n        for (uint8 i = 0; i < _tokenIds.length; i++) {\\n            _guildCounter[getGuild(_tokenIds[i]) - 1] += 1;\\n        }\\n\\n        // Find Maximum Count and Index of Max Count\\n        for (uint8 i = 0; i < _guildCounter.length; i++) {\\n            if (_guildCounter[i] > maxCount) {\\n                maxCount = _guildCounter[i];\\n            }\\n        }\\n\\n        if (maxCount == 3) {\\n            _sameGuild = true;\\n        }\\n\\n        _guildMultiplier = getCountMultiplier(_tokenIds.length, _sameGuild);\\n        _medallionMultiplier = getTotalMedallionMultiplier(msg.sender);\\n    }\\n\\n    /// @dev Caluclate rewards for given Family Id\\n    function calculateRewards(uint256 trainId)\\n        public\\n        view\\n        returns (uint256 rewardAmount)\\n    {\\n        Family memory family = families[trainId];\\n        rewardAmount = baseReward\\n            .mul(block.timestamp.sub(family.lastClaim))\\n            .mul(family.shogunIds.length)\\n            .mul(\\n                (family.guildMultiplier).add(family.medallionMultiplier).add(\\n                    family.shogunBonus\\n                )\\n            )\\n            .div(timescale)\\n            .div(10000);\\n    }\\n\\n    function calculateRewardsV2(uint256 tokenId)\\n        public\\n        view\\n        returns (uint256 rewardAmount)\\n    {\\n        uint256 userLastClaim = lastClaim[tokenId];\\n        if (userLastClaim < 1645797600) {\\n            userLastClaim = 1645797600;\\n        }\\n\\n        if (isLegendarySamurai[tokenId] == true) {\\n            rewardAmount =\\n                (baseReward * 2 * (block.timestamp - userLastClaim)) /\\n                1 days;\\n        } else {\\n            rewardAmount =\\n                (baseReward * (block.timestamp - userLastClaim)) /\\n                1 days;\\n        }\\n    }\\n\\n    function calculateRewardsMultiV2(uint256[] memory tokenIds)\\n        public\\n        view\\n        returns (uint256 rewardAmount)\\n    {\\n        for (uint256 i; i < tokenIds.length; i++) {\\n            rewardAmount += calculateRewardsV2(tokenIds[i]);\\n        }\\n    }\\n\\n    function calculateShogunBonus(uint256[] memory shogunIds)\\n        internal\\n        view\\n        returns (uint256 out)\\n    {\\n        for (uint256 i = 0; i < shogunIds.length; i++) {\\n            if (isLegendarySamurai[shogunIds[i]] == true) {\\n                out += shogunBonus;\\n            }\\n        }\\n    }\\n\\n    /// @dev Determines if the tokenIds are availiable for training\\n    function areAvailiable(uint256[] memory tokenIds)\\n        public\\n        view\\n        returns (bool out)\\n    {\\n        out = true;\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            if (onTraining[tokenIds[i]] > 0) {\\n                out = false;\\n            }\\n        }\\n    }\\n\\n    /// @dev Determines if the all tokenIds are owned by msg sneder\\n    function areOwned(uint256[] memory tokenIds)\\n        public\\n        view\\n        returns (bool out)\\n    {\\n        out = true;\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            if (SS.ownerOf(tokenIds[i]) != msg.sender) {\\n                out = false;\\n            }\\n        }\\n    }\\n\\n    function getUserFamilies(address user)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return userFamilies[user];\\n    }\\n\\n    function getFamily(uint256 trainId) public view returns (Family memory) {\\n        return families[trainId];\\n    }\\n\\n    function getGuild(uint256 tokenId) public view returns (uint8) {\\n        return uint8(guilds[tokenId - 1]);\\n    }\\n\\n    // ---------------------- ADMIN FUNCTIONS -----------------------\\n\\n    function setBaseReward(uint256 _amount)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        baseReward = _amount;\\n    }\\n\\n    function setCountMultiplier(uint256[] memory _countMultipliers)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        countMultipliers = _countMultipliers;\\n    }\\n\\n    function setGuildMultiplier(uint256 _guildMultiplier)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        guildMultiplier = _guildMultiplier;\\n    }\\n\\n    function setMedallionMultiplier(uint256 _medallionMultiplier)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        medallionMultiplier = _medallionMultiplier;\\n    }\\n\\n    function setLegendaryShoguns(\\n        uint256[] memory shogunIds,\\n        bool[] memory flags\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        for (uint256 i = 0; i < shogunIds.length; i++) {\\n            isLegendarySamurai[shogunIds[i]] = flags[i];\\n        }\\n    }\\n\\n    function setShogunBonus(uint256 _shogunBonus)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        shogunBonus = _shogunBonus;\\n    }\\n\\n    /// @dev Set bonus SHO Tokens to be claimed\\n    function setBonusSHO(address[] memory addresses, uint256[] memory amounts)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(\\n            addresses.length == amounts.length,\\n            \\\"ShogunStaking: To and amount length not matching\\\"\\n        );\\n        uint256 totalAmount;\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            bonusSHO[addresses[i]] = amounts[i];\\n            totalAmount += amounts[i];\\n        }\\n\\n        // Mint total bonus sho to contract\\n        SHO.mint(address(this), totalAmount);\\n    }\\n\\n    /// @dev Storing Guild Metadata as 1 byte hexes on a byte for gas optimization\\n    function updateGuilds(bytes calldata _guilds)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        guilds = _guilds;\\n    }\\n\\n    function setSHOToken(address sho) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        SHO = IShogunToken(sho);\\n    }\\n\\n    function setTimeScale(uint256 _newTimescale)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        timescale = _newTimescale;\\n    }\\n\\n    /// @dev Airdrop SHO Tokens out of contract\\n    function airdrop(address[] memory to, uint256[] memory amount)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(\\n            to.length == amount.length,\\n            \\\"ShogunStaking: To and amount length not matching\\\"\\n        );\\n        for (uint256 i = 0; i < to.length; i++) {\\n            SHO.mint(to[i], amount[i]);\\n        }\\n    }\\n\\n    function setUnstaker(address _unstaker)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        unstaker = _unstaker;\\n    }\\n\\n    function removeUnstaker() public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        unstaker = address(0);\\n    }\\n\\n    function enableTraining(bool training) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        trainingEnabled = training;\\n    }\\n\\n    function getFamilyCount() public view returns (uint256) {\\n        return _familyId.current();\\n    }\\n\\n    function getFamilyStatus(uint256 familyId)\\n        public\\n        view\\n        returns (TrainState)\\n    {\\n        return families[familyId].trainState;\\n    }\\n\\n    function getShogunsOfFamily(uint256 familyId)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return families[familyId].shogunIds;\\n    }\\n\\n    function getOwnerOfFamily(uint256 familyId) public view returns (address) {\\n        return families[familyId].familyOwner;\\n    }\\n\\n    function unlockShogunNFTs(uint256[] memory shogunIds)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        // Unlock Tokens\\n        SS.unlockToken(shogunIds);\\n    }\\n}\\n\",\"keccak256\":\"0x3fcf861fcac9a3a550e8056d2c25a3cb608508ce548d401db4f4ad516d4d471b\",\"license\":\"MIT\"},\"contracts/interfaces/IShogunNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface IShogunNFT is IERC721Enumerable {\\n    function lockToken(uint256[] memory _tokenIds) external;\\n\\n    function unlockToken(uint256[] memory _tokenIds) external;\\n\\n    function seppuku(uint256 _tokenId) external;\\n\\n    function walletOfOwner(address _owner)\\n        external\\n        view\\n        returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x1b769946032b5aa98b8717294a5cd50a0390651d88150e5c2de75eb53e90d4d8\",\"license\":\"MIT\"},\"contracts/interfaces/IShogunToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IShogunToken is IERC20 {\\n    function updateRewardOnMint(address _user, uint256 _amount) external;\\n\\n    function updateReward(address _from, address _to) external;\\n\\n    function getReward(address _to) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function getTotalClaimable(address _user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0e059817cf5a6c48da257fc9d94cdf1e7bcce48b4e836fba52762997a26391f6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613e31806100206000396000f3fe608060405234801561001057600080fd5b50600436106103db5760003560e01c80638cc60eca1161020a578063cc8ca9ca11610125578063e40cde48116100b8578063f9f4d80311610087578063f9f4d80314610968578063fa8c42e91461097b578063ff92fcab1461098f578063fff43905146109a4578063fff5923e146109ac57600080fd5b8063e40cde4814610930578063efe2dba314610943578063f182d7921461094b578063f796d0301461095557600080fd5b8063d3e96693116100f4578063d3e96693146108db578063d3ea435014610900578063d547741f14610913578063dec161d71461092657600080fd5b8063cc8ca9ca1461088f578063d0c38300146108a2578063d146c1a6146108b5578063d210e016146108c857600080fd5b8063aaffff8a1161019d578063ba2f5a621161016c578063ba2f5a6214610843578063c3446ff714610856578063c4c52d6d14610869578063c966a7041461087c57600080fd5b8063aaffff8a146107dc578063b44ca977146107fd578063b46958d01461081d578063b753ead71461083057600080fd5b806391ea1a8b116101d957806391ea1a8b1461079557806399d37a061461079d578063a217fddf146107c1578063a64a6495146107c957600080fd5b80638cc60eca146107495780638da62afe1461075c578063904bc92e1461076f57806391d148541461078257600080fd5b806339395941116102fa57806366b3fe661161028d57806376ad03bc1161025c57806376ad03bc146107075780637b495a05146107105780637f04dd611461072357806386f5cb681461073657600080fd5b806366b3fe66146106bb57806367243482146106ce5780636e974378146106e157806375183ad0146106f457600080fd5b80635b12d7e2116102c95780635b12d7e21461064e5780635fb1e33f146106615780636432028a1461067457806366784845146106a857600080fd5b806339395941146105c25780633d3728b5146105ca5780634ba70563146105eb5780635ad3bd3b1461060c57600080fd5b8063150b7a02116103725780632f2ff15d116103415780632f2ff15d1461056857806332a4e01e1461057b57806335a0a9801461058e57806336568abe146105af57600080fd5b8063150b7a02146104e65780631fe75f241461051d578063248a9ca3146105325780632ea8545a1461055557600080fd5b80630b287fc5116103ae5780630b287fc5146104935780630b42cf55146104a65780630b83a727146104be57806310ace2cd146104c657600080fd5b806301ffc9a7146103e05780630373a23a14610408578063078beae51461041d5780630962ef7914610480575b600080fd5b6103f36103ee366004613764565b6109bf565b60405190151581526020015b60405180910390f35b61041b61041636600461371d565b6109f6565b005b61046e61042b36600461371d565b610106602052600090815260409020805460018201546002830154600384015460048501546006909501546001600160a01b039094169492939192909160ff1686565b6040516103ff9695949392919061394c565b61041b61048e36600461371d565b610a08565b61041b6104a1366004613552565b610c49565b6104b06101005481565b6040519081526020016103ff565b61041b610c9b565b6104d96104d436600461327e565b610e1c565b6040516103ff9190613990565b6105046104f43660046132b6565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020016103ff565b61013d546103f390600160a01b900460ff1681565b6104b061054036600461371d565b60009081526065602052604090206001015490565b6104b06105633660046137f9565b610e89565b61041b610576366004613735565b610f1a565b6104b0610589366004613372565b610f45565b6104b061059c36600461327e565b6101046020526000908152604090205481565b61041b6105bd366004613735565b610f77565b61041b610ff1565b6104b06105d836600461371d565b61013e6020526000908152604090205481565b6104b06105f936600461371d565b6101086020526000908152604090205481565b61063661061a36600461371d565b600090815261010660205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020016103ff565b61041b61065c36600461327e565b611178565b6103f361066f366004613552565b6111a8565b61069b61068236600461371d565b6000908152610106602052604090206006015460ff1690565b6040516103ff91906139c9565b61041b6106b636600461371d565b611217565b61041b6106c936600461371d565b61136e565b61041b6106dc3660046133de565b611380565b61041b6106ef366004613620565b61149c565b61041b610702366004613552565b611541565b6104b060fd5481565b61041b61071e3660046133de565b611560565b61041b61073136600461327e565b6116c5565b61041b6107443660046134a1565b6116f4565b60fb54610636906001600160a01b031681565b6104b061076a366004613552565b611742565b60fc54610636906001600160a01b031681565b6103f3610790366004613735565b61179d565b61041b6117c8565b6103f36107ab36600461371d565b6101036020526000908152604090205460ff1681565b6104b0600081565b6104b06107d736600461371d565b611a0b565b6104b06107ea36600461327e565b6101096020526000908152604090205481565b61081061080b36600461371d565b611aae565b6040516103ff9190613b36565b61041b61082b366004613552565b611bb0565b61041b61083e36600461339d565b611c22565b61041b61085136600461371d565b611d62565b61041b610864366004613552565b611d75565b61041b6108773660046136e5565b6121d9565b61041b61088a3660046133de565b612205565b6104b061089d36600461371d565b612319565b61041b6108b036600461371d565b61233a565b61041b6108c336600461378c565b61234d565b6104b06108d636600461327e565b612366565b6108ee6108e936600461371d565b61238d565b60405160ff90911681526020016103ff565b6104b061090e36600461371d565b6123f6565b61041b610921366004613735565b61255e565b6104b06101015481565b61041b61093e36600461371d565b612584565b6104b061287e565b6104b06101025481565b61041b61096336600461371d565b61288f565b6104d961097636600461371d565b6128a2565b61013d54610636906001600160a01b031681565b610997612906565b6040516103ff91906139b6565b61041b612995565b6103f36109ba366004613552565b6129b5565b60006001600160e01b03198216637965db0b60e01b14806109f057506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000610a028133612a95565b5060fd55565b60026097541415610a345760405162461bcd60e51b8152600401610a2b90613aff565b60405180910390fd5b600260975561013d54600160a01b900460ff16610a635760405162461bcd60e51b8152600401610a2b906139d7565b60008181526101066020526040902080546001600160a01b031633811480610a96575061013d546001600160a01b031633145b610af95760405162461bcd60e51b815260206004820152602e60248201527f53686f67756e5374616b696e673a204f6e6c792066616d696c79206f776e657260448201526d2063616e20636c61696d2053484f60901b6064820152608401610a2b565b6000600683015460ff166001811115610b2257634e487b7160e01b600052602160045260246000fd5b14610b825760405162461bcd60e51b815260206004820152602a60248201527f53686f67756e5374616b696e673a20547261696e696e672068617320616c726560448201526961647920656e6465642160b01b6064820152608401610a2b565b6000610b8d846123f6565b60fc546040516340c10f1960e01b81526001600160a01b038581166004830152602482018490529293509116906340c10f1990604401600060405180830381600087803b158015610bdd57600080fd5b505af1158015610bf1573d6000803e3d6000fd5b505042600186018190556040513393507ff01da32686223933d8a18a391060918c7f11a3648639edd87ae013e2e27317439250610c3691858252602082015260400190565b60405180910390a2505060016097555050565b60005b8151811015610c9757610c85828281518110610c7857634e487b7160e01b600052603260045260246000fd5b6020026020010151612584565b80610c8f81613d6e565b915050610c4c565b5050565b60026097541415610cbe5760405162461bcd60e51b8152600401610a2b90613aff565b60026097556000610cce33610e1c565b9050600080805b8351811015610d7357610d18610d11858381518110610d0457634e487b7160e01b600052603260045260246000fd5b60200260200101516123f6565b8490612af9565b92506101066000858381518110610d3f57634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002091504282600101819055508080610d6b90613d6e565b915050610cd5565b5060fc546040516340c10f1960e01b8152336004820152602481018490526001600160a01b03909116906340c10f1990604401600060405180830381600087803b158015610dc057600080fd5b505af1158015610dd4573d6000803e3d6000fd5b5050604080518581524260208201523393507ff01da32686223933d8a18a391060918c7f11a3648639edd87ae013e2e273174392500160405180910390a25050600160975550565b6001600160a01b03811660009081526101076020908152604091829020805483518184028101840190945280845260609392830182828015610e7d57602002820191906000526020600020905b815481526020019060010190808311610e69575b50505050509050919050565b60008115610edc576101005460ff610ea2600186613cbc565b81548110610ec057634e487b7160e01b600052603260045260246000fd5b9060005260206000200154610ed59190613c40565b90506109f0565b60ff610ee9600185613cbc565b81548110610f0757634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b600082815260656020526040902060010154610f368133612a95565b610f408383612b05565b505050565b6101076020528160005260406000208181548110610f6257600080fd5b90600052602060002001600091509150505481565b6001600160a01b0381163314610fe75760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610a2b565b610c978282612b8b565b600260975414156110145760405162461bcd60e51b8152600401610a2b90613aff565b600260975533600090815261010960205260409020548061109d5760405162461bcd60e51b815260206004820152603b60248201527f53686f67756e5374616b696e673a205573657220646f6573206e6f742068617660448201527f6520426f6e75732053484f20546f6b656e7320746f20636c61696d00000000006064820152608401610a2b565b33600081815261010960205260408082209190915560fc54905163a9059cbb60e01b81526004810192909252602482018390526001600160a01b03169063a9059cbb90604401602060405180830381600087803b1580156110fd57600080fd5b505af1158015611111573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111359190613701565b506040805182815242602082015233917f5ffd7ef804cd6362d3defa75e694e044ac287fcac1de8bbb9a21226d02397b83910160405180910390a2506001609755565b60006111848133612a95565b5061013d80546001600160a01b0319166001600160a01b0392909216919091179055565b600160005b825181101561121157600061010860008584815181106111dd57634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000205411156111ff57600091505b8061120981613d6e565b9150506111ad565b50919050565b6002609754141561123a5760405162461bcd60e51b8152600401610a2b90613aff565b600260975560fb546040516331a9108f60e11b81526004810183905233916001600160a01b031690636352211e9060240160206040518083038186803b15801561128357600080fd5b505afa158015611297573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112bb919061329a565b6001600160a01b0316146112e15760405162461bcd60e51b8152600401610a2b90613a1b565b60006112ec82611a0b565b600083815261013e60205260409081902042905560fc5490516340c10f1960e01b8152336004820152602481018390529192506001600160a01b0316906340c10f19906044015b600060405180830381600087803b15801561134d57600080fd5b505af1158015611361573d6000803e3d6000fd5b5050600160975550505050565b600061137a8133612a95565b5060fe55565b600061138c8133612a95565b81518351146113ad5760405162461bcd60e51b8152600401610a2b90613a64565b60005b83518110156114965760fc5484516001600160a01b03909116906340c10f19908690849081106113f057634e487b7160e01b600052603260045260246000fd5b602002602001015185848151811061141857634e487b7160e01b600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b81526004016114519291906001600160a01b03929092168252602082015260400190565b600060405180830381600087803b15801561146b57600080fd5b505af115801561147f573d6000803e3d6000fd5b50505050808061148e90613d6e565b9150506113b0565b50505050565b60006114a88133612a95565b60005b8351811015611496578281815181106114d457634e487b7160e01b600052603260045260246000fd5b6020026020010151610103600086848151811061150157634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002060006101000a81548160ff021916908315150217905550808061153990613d6e565b9150506114ab565b600061154d8133612a95565b8151610f409060ff906020850190613096565b600061156c8133612a95565b815183511461158d5760405162461bcd60e51b8152600401610a2b90613a64565b6000805b845181101561165a578381815181106115ba57634e487b7160e01b600052603260045260246000fd5b602002602001015161010960008784815181106115e757634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208190555083818151811061163357634e487b7160e01b600052603260045260246000fd5b6020026020010151826116469190613c40565b91508061165281613d6e565b915050611591565b5060fc546040516340c10f1960e01b8152306004820152602481018390526001600160a01b03909116906340c10f1990604401600060405180830381600087803b1580156116a757600080fd5b505af11580156116bb573d6000803e3d6000fd5b5050505050505050565b60006116d18133612a95565b5060fc80546001600160a01b0319166001600160a01b0392909216919091179055565b60005b8151811015610c975761173082828151811061172357634e487b7160e01b600052603260045260246000fd5b6020026020010151611d75565b8061173a81613d6e565b9150506116f7565b6000805b82518110156112115761177f83828151811061177257634e487b7160e01b600052603260045260246000fd5b6020026020010151611a0b565b6117899083613c40565b91508061179581613d6e565b915050611746565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600260975414156117eb5760405162461bcd60e51b8152600401610a2b90613aff565b600260975560fb5460405162438b6360e81b81523360048201526000916001600160a01b03169063438b63009060240160006040518083038186803b15801561183357600080fd5b505afa158015611847573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261186f919081019061358d565b90506000805b82518110156119d35760fb54835133916001600160a01b031690636352211e908690859081106118b557634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b81526004016118db91815260200190565b60206040518083038186803b1580156118f357600080fd5b505afa158015611907573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192b919061329a565b6001600160a01b0316146119515760405162461bcd60e51b8152600401610a2b90613a1b565b61197483828151811061177257634e487b7160e01b600052603260045260246000fd5b61197e9083613c40565b91504261013e60008584815181106119a657634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000208190555080806119cb90613d6e565b915050611875565b5060fc546040516340c10f1960e01b8152336004820152602481018390526001600160a01b03909116906340c10f1990604401611333565b600081815261013e6020526040812054636218e0e0811015611a2e5750636218e0e05b6000838152610103602052604090205460ff16151560011415611a825762015180611a598242613cbc565b60fd54611a67906002613c9d565b611a719190613c9d565b611a7b9190613c7d565b9150611211565b62015180611a908242613cbc565b60fd54611a9d9190613c9d565b611aa79190613c7d565b9392505050565b611ab66130e1565b60008281526101066020908152604091829020825160e08101845281546001600160a01b0316815260018201548184015260028201548185015260038201546060820152600482015460808201526005820180548551818602810186019096528086529194929360a08601939290830182828015611b5357602002820191906000526020600020905b815481526020019060010190808311611b3f575b5050509183525050600682015460209091019060ff166001811115611b8857634e487b7160e01b600052602160045260246000fd5b6001811115611ba757634e487b7160e01b600052602160045260246000fd5b90525092915050565b6000611bbc8133612a95565b60fb5460405163665adcfd60e01b81526001600160a01b039091169063665adcfd90611bec908590600401613990565b600060405180830381600087803b158015611c0657600080fd5b505af1158015611c1a573d6000803e3d6000fd5b505050505050565b600054610100900460ff16611c3d5760005460ff1615611c41565b303b155b611ca45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a2b565b600054610100900460ff16158015611cc6576000805461ffff19166101011790555b611cce612bf2565b611cd6612c1b565b611ce1600083612c4a565b60fd83905560fb80546001600160a01b0319166001600160a01b038616179055604080516060810182526127108152612774602082015261283c91810191909152611d309060ff906003613145565b5060c861010055600a61010155610320610102556201518060fe558015611496576000805461ff001916905550505050565b6000611d6e8133612a95565b5061010155565b61013d54600160a01b900460ff16611d9f5760405162461bcd60e51b8152600401610a2b906139d7565b611da8816111a8565b611e1a5760405162461bcd60e51b815260206004820152603760248201527f53686f67756e5374616b696e673a204f6e65206f72204d6f72652073686f677560448201527f6e732061726520616c726561647920747261696e696e670000000000000000006064820152608401610a2b565b611e23816129b5565b611e955760405162461bcd60e51b815260206004820152603860248201527f53686f67756e5374616b696e673a204f6e65206f72204d6f72652073686f677560448201527f6e7320617265206e6f74206f776e656420627920796f752100000000000000006064820152608401610a2b565b600381511115611ef35760405162461bcd60e51b8152602060048201526024808201527f53686f67756e5374616b696e673a204d6178696d756d206f662033205353206f6044820152636e6c792160e01b6064820152608401610a2b565b6000815111611f535760405162461bcd60e51b815260206004820152602660248201527f53686f67756e5374616b696e673a204174206c6561737420312053532072657160448201526575697265642160d01b6064820152608401610a2b565b611f6261010a80546001019055565b60fb546040516302b2de4960e21b81526001600160a01b0390911690630acb792490611f92908490600401613990565b600060405180830381600087803b158015611fac57600080fd5b505af1158015611fc0573d6000803e3d6000fd5b5050505060005b81518110156120265761010a546101086000848481518110611ff957634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002081905550808061201e90613d6e565b915050611fc7565b50600080600061203584612c54565b909350915061204384612de5565b905060006040518060e00160405280336001600160a01b03168152602001428152602001858152602001848152602001838152602001868152602001600060018111156120a057634e487b7160e01b600052602160045260246000fd5b905290508061010660006120b461010a5490565b81526020808201929092526040908101600020835181546001600160a01b0319166001600160a01b03909116178155838301516001820155908301516002820155606083015160038201556080830151600482015560a08301518051919261212492600585019290910190613096565b5060c082015160068201805460ff19166001838181111561215557634e487b7160e01b600052602160045260246000fd5b02179055505033600090815261010760205260409020905061217761010a5490565b81546001810183556000928352602090922090910155337fba68dec919f1691408f54f9ad116b0c62f60dc6702ac8c6a67b166a8cd52d3306121b961010a5490565b87426040516121ca93929190613ba9565b60405180910390a25050505050565b60006121e58133612a95565b5061013d8054911515600160a01b0260ff60a01b19909216919091179055565b60006122118133612a95565b81518351146122815760405162461bcd60e51b815260206004820152603660248201527f53686f67756e5374616b696e673a2055736572206c656e67746820616e6420516044820152750eac2dce8d2e8f240c8decae640dcdee840dac2e8c6d60531b6064820152608401610a2b565b60005b8351811015611496578281815181106122ad57634e487b7160e01b600052603260045260246000fd5b602002602001015161010460008684815181106122da57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550808061231190613d6e565b915050612284565b60ff818154811061232957600080fd5b600091825260209091200154905081565b60006123468133612a95565b5061010255565b60006123598133612a95565b6114966101058484613186565b6001600160a01b03811660009081526101046020526040812054610101546109f091612e62565b600061010561239d600184613cbc565b81546123a890613d39565b81106123c457634e487b7160e01b600052603260045260246000fd5b8154600116156123e35790600052602060002090602091828204019190065b9054600160f81b911a0260f81c92915050565b600081815261010660209081526040808320815160e08101835281546001600160a01b0316815260018201548185015260028201548184015260038201546060820152600482015460808201526005820180548451818702810187019095528085528695929460a08601939092919083018282801561249457602002820191906000526020600020905b815481526020019060010190808311612480575b5050509183525050600682015460209091019060ff1660018111156124c957634e487b7160e01b600052602160045260246000fd5b60018111156124e857634e487b7160e01b600052602160045260246000fd5b815250509050611aa761271061255860fe54612558612526866080015161252088606001518960400151612af990919063ffffffff16565b90612af9565b6125528760a00151516125526125498a6020015142612e6e90919063ffffffff16565b60fd5490612e62565b90612e62565b90612e7a565b60008281526065602052604090206001015461257a8133612a95565b610f408383612b8b565b61013d54600160a01b900460ff166125ae5760405162461bcd60e51b8152600401610a2b906139d7565b600081815261010660205260409020546001600160a01b03163314806125df575061013d546001600160a01b031633145b61263e5760405162461bcd60e51b815260206004820152602a60248201527f53686f67756e5374616b696e673a204e6f7420746865206f776e6572206f66206044820152697468652066616d696c7960b01b6064820152608401610a2b565b6000818152610106602052604081206006015460ff16600181111561267357634e487b7160e01b600052602160045260246000fd5b146126ce5760405162461bcd60e51b815260206004820152602560248201527f53686f67756e5374616b696e673a20547261696e696e6720616c726561647920604482015264115b99195960da1b6064820152608401610a2b565b6126d781610a08565b60fb546000828152610106602052604090819020905163665adcfd60e01b81526001600160a01b039092169163665adcfd9161271b916005909101906004016139a3565b600060405180830381600087803b15801561273557600080fd5b505af1158015612749573d6000803e3d6000fd5b50505060008281526101066020908152604080832060068101805460ff191660011790556005018054825181850281018501909352808352939450909290918301828280156127b757602002820191906000526020600020905b8154815260200190600101908083116127a3575b5050505050905060005b815181101561281e57600061010860008484815181106127f157634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002081905550808061281690613d6e565b9150506127c1565b50336001600160a01b03167fe46c316e0026b6873715afa24fe53e01843fc6a22ecefc596077af4e9edd94cf8361010660008681526020019081526020016000206005014260405161287293929190613bd2565b60405180910390a25050565b600061288a61010a5490565b905090565b600061289b8133612a95565b5061010055565b60008181526101066020908152604091829020600501805483518184028101840190945280845260609392830182828015610e7d5760200282019190600052602060002090815481526020019060010190808311610e695750505050509050919050565b610105805461291490613d39565b80601f016020809104026020016040519081016040528092919081815260200182805461294090613d39565b801561298d5780601f106129625761010080835404028352916020019161298d565b820191906000526020600020905b81548152906001019060200180831161297057829003601f168201915b505050505081565b60006129a18133612a95565b5061013d80546001600160a01b0319169055565b600160005b82518110156112115760fb54835133916001600160a01b031690636352211e908690859081106129fa57634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b8152600401612a2091815260200190565b60206040518083038186803b158015612a3857600080fd5b505afa158015612a4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a70919061329a565b6001600160a01b031614612a8357600091505b80612a8d81613d6e565b9150506129ba565b612a9f828261179d565b610c9757612ab7816001600160a01b03166014612e86565b612ac2836020612e86565b604051602001612ad39291906138d7565b60408051601f198184030181529082905262461bcd60e51b8252610a2b916004016139b6565b6000611aa78284613c40565b612b0f828261179d565b610c975760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055612b473390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b612b95828261179d565b15610c975760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600054610100900460ff16612c195760405162461bcd60e51b8152600401610a2b90613ab4565b565b600054610100900460ff16612c425760405162461bcd60e51b8152600401610a2b90613ab4565b612c19613068565b610c978282612b05565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905281908180805b86518160ff161015612d32576001846001612cde8a8560ff1681518110612cd157634e487b7160e01b600052603260045260246000fd5b602002602001015161238d565b612ce89190613cd3565b60ff1660088110612d0957634e487b7160e01b600052603260045260246000fd5b60200201818151612d1a9190613c58565b60ff1690525080612d2a81613d89565b915050612c9a565b5060005b60088160ff161015612db4578260ff16848260ff1660088110612d6957634e487b7160e01b600052603260045260246000fd5b602002015160ff161115612da257838160ff1660088110612d9a57634e487b7160e01b600052603260045260246000fd5b602002015192505b80612dac81613d89565b915050612d36565b508160ff1660031415612dc5575060015b612dd0865182610e89565b9450612ddb33612366565b9350505050915091565b6000805b8251811015611211576101036000848381518110612e1757634e487b7160e01b600052603260045260246000fd5b60209081029190910181015182528101919091526040016000205460ff16151560011415612e505761010254612e4d9083613c40565b91505b80612e5a81613d6e565b915050612de9565b6000611aa78284613c9d565b6000611aa78284613cbc565b6000611aa78284613c7d565b60606000612e95836002613c9d565b612ea0906002613c40565b67ffffffffffffffff811115612ec657634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612ef0576020820181803683370190505b509050600360fc1b81600081518110612f1957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612f5657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000612f7a846002613c9d565b612f85906001613c40565b90505b6001811115613019576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612fc757634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110612feb57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361301281613d22565b9050612f88565b508315611aa75760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a2b565b600054610100900460ff1661308f5760405162461bcd60e51b8152600401610a2b90613ab4565b6001609755565b8280548282559060005260206000209081019282156130d1579160200282015b828111156130d15782518255916020019190600101906130b6565b506130dd9291506131fa565b5090565b6040518060e0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001606081526020016000600181111561314057634e487b7160e01b600052602160045260246000fd5b905290565b8280548282559060005260206000209081019282156130d1579160200282015b828111156130d1578251829061ffff16905591602001919060010190613165565b82805461319290613d39565b90600052602060002090601f0160209004810192826131b457600085556130d1565b82601f106131cd5782800160ff198235161785556130d1565b828001600101855582156130d1579182015b828111156130d15782358255916020019190600101906131df565b5b808211156130dd57600081556001016131fb565b600082601f83011261321f578081fd5b8135602061323461322f83613c1c565b613beb565b80838252828201915082860187848660051b8901011115613253578586fd5b855b8581101561327157813584529284019290840190600101613255565b5090979650505050505050565b60006020828403121561328f578081fd5b8135611aa781613dd5565b6000602082840312156132ab578081fd5b8151611aa781613dd5565b600080600080608085870312156132cb578283fd5b84356132d681613dd5565b93506020858101356132e781613dd5565b935060408601359250606086013567ffffffffffffffff8082111561330a578384fd5b818801915088601f83011261331d578384fd5b81358181111561332f5761332f613dbf565b613341601f8201601f19168501613beb565b91508082528984828501011115613356578485fd5b8084840185840137810190920192909252939692955090935050565b60008060408385031215613384578182fd5b823561338f81613dd5565b946020939093013593505050565b6000806000606084860312156133b1578081fd5b83356133bc81613dd5565b92506020840135915060408401356133d381613dd5565b809150509250925092565b600080604083850312156133f0578182fd5b823567ffffffffffffffff80821115613407578384fd5b818501915085601f83011261341a578384fd5b8135602061342a61322f83613c1c565b8083825282820191508286018a848660051b8901011115613449578889fd5b8896505b8487101561347457803561346081613dd5565b83526001969096019591830191830161344d565b509650508601359250508082111561348a578283fd5b506134978582860161320f565b9150509250929050565b600060208083850312156134b3578182fd5b823567ffffffffffffffff808211156134ca578384fd5b818501915085601f8301126134dd578384fd5b81356134eb61322f82613c1c565b80828252858201915085850189878560051b880101111561350a578788fd5b875b848110156135435781358681111561352257898afd5b6135308c8a838b010161320f565b855250928701929087019060010161350c565b50909998505050505050505050565b600060208284031215613563578081fd5b813567ffffffffffffffff811115613579578182fd5b6135858482850161320f565b949350505050565b6000602080838503121561359f578182fd5b825167ffffffffffffffff8111156135b5578283fd5b8301601f810185136135c5578283fd5b80516135d361322f82613c1c565b80828252848201915084840188868560051b87010111156135f2578687fd5b8694505b838510156136145780518352600194909401939185019185016135f6565b50979650505050505050565b60008060408385031215613632578182fd5b823567ffffffffffffffff80821115613649578384fd5b6136558683870161320f565b935060209150818501358181111561366b578384fd5b85019050601f8101861361367d578283fd5b803561368b61322f82613c1c565b80828252848201915084840189868560051b87010111156136aa578687fd5b8694505b838510156136d55780356136c181613ded565b8352600194909401939185019185016136ae565b5080955050505050509250929050565b6000602082840312156136f6578081fd5b8135611aa781613ded565b600060208284031215613712578081fd5b8151611aa781613ded565b60006020828403121561372e578081fd5b5035919050565b60008060408385031215613747578182fd5b82359150602083013561375981613dd5565b809150509250929050565b600060208284031215613775578081fd5b81356001600160e01b031981168114611aa7578182fd5b6000806020838503121561379e578182fd5b823567ffffffffffffffff808211156137b5578384fd5b818501915085601f8301126137c8578384fd5b8135818111156137d6578485fd5b8660208285010111156137e7578485fd5b60209290920196919550909350505050565b6000806040838503121561380b578182fd5b82359150602083013561375981613ded565b6000815180845260208085019450808401835b8381101561384c57815187529582019590820190600101613830565b509495945050505050565b6000815480845260208085019450838352808320835b8381101561384c5781548752958201956001918201910161386d565b600081518084526138a1816020860160208601613cf6565b601f01601f19169290920160200192915050565b600281106138d357634e487b7160e01b600052602160045260246000fd5b9052565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161390f816017850160208801613cf6565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613940816028840160208801613cf6565b01602801949350505050565b6001600160a01b03871681526020810186905260408101859052606081018490526080810183905260c0810161398560a08301846138b5565b979650505050505050565b602081526000611aa7602083018461381d565b602081526000611aa76020830184613857565b602081526000611aa76020830184613889565b602081016109f082846138b5565b60208082526024908201527f53686f67756e5374616b696e673a20547261696e696e672069732064697361626040820152636c65642160e01b606082015260800190565b60208082526029908201527f53686f67756e5374616b696e673a20436c61696d616e74206973206e6f7420746040820152686865206f776e65722160b81b606082015260800190565b60208082526030908201527f53686f67756e5374616b696e673a20546f20616e6420616d6f756e74206c656e60408201526f677468206e6f74206d61746368696e6760801b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020815260018060a01b038251166020820152602082015160408201526040820151606082015260608201516080820152608082015160a0820152600060a083015160e060c0840152613b8d61010084018261381d565b905060c0840151613ba160e08501826138b5565b509392505050565b838152606060208201526000613bc2606083018561381d565b9050826040830152949350505050565b838152606060208201526000613bc26060830185613857565b604051601f8201601f1916810167ffffffffffffffff81118282101715613c1457613c14613dbf565b604052919050565b600067ffffffffffffffff821115613c3657613c36613dbf565b5060051b60200190565b60008219821115613c5357613c53613da9565b500190565b600060ff821660ff84168060ff03821115613c7557613c75613da9565b019392505050565b600082613c9857634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615613cb757613cb7613da9565b500290565b600082821015613cce57613cce613da9565b500390565b600060ff821660ff841680821015613ced57613ced613da9565b90039392505050565b60005b83811015613d11578181015183820152602001613cf9565b838111156114965750506000910152565b600081613d3157613d31613da9565b506000190190565b600181811c90821680613d4d57607f821691505b6020821081141561121157634e487b7160e01b600052602260045260246000fd5b6000600019821415613d8257613d82613da9565b5060010190565b600060ff821660ff811415613da057613da0613da9565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114613dea57600080fd5b50565b8015158114613dea57600080fdfea2646970667358221220790bec65a4bce20a7dcd4e4a9c8c34dec6d731ee8ae6695fd704b85944ec173764736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103db5760003560e01c80638cc60eca1161020a578063cc8ca9ca11610125578063e40cde48116100b8578063f9f4d80311610087578063f9f4d80314610968578063fa8c42e91461097b578063ff92fcab1461098f578063fff43905146109a4578063fff5923e146109ac57600080fd5b8063e40cde4814610930578063efe2dba314610943578063f182d7921461094b578063f796d0301461095557600080fd5b8063d3e96693116100f4578063d3e96693146108db578063d3ea435014610900578063d547741f14610913578063dec161d71461092657600080fd5b8063cc8ca9ca1461088f578063d0c38300146108a2578063d146c1a6146108b5578063d210e016146108c857600080fd5b8063aaffff8a1161019d578063ba2f5a621161016c578063ba2f5a6214610843578063c3446ff714610856578063c4c52d6d14610869578063c966a7041461087c57600080fd5b8063aaffff8a146107dc578063b44ca977146107fd578063b46958d01461081d578063b753ead71461083057600080fd5b806391ea1a8b116101d957806391ea1a8b1461079557806399d37a061461079d578063a217fddf146107c1578063a64a6495146107c957600080fd5b80638cc60eca146107495780638da62afe1461075c578063904bc92e1461076f57806391d148541461078257600080fd5b806339395941116102fa57806366b3fe661161028d57806376ad03bc1161025c57806376ad03bc146107075780637b495a05146107105780637f04dd611461072357806386f5cb681461073657600080fd5b806366b3fe66146106bb57806367243482146106ce5780636e974378146106e157806375183ad0146106f457600080fd5b80635b12d7e2116102c95780635b12d7e21461064e5780635fb1e33f146106615780636432028a1461067457806366784845146106a857600080fd5b806339395941146105c25780633d3728b5146105ca5780634ba70563146105eb5780635ad3bd3b1461060c57600080fd5b8063150b7a02116103725780632f2ff15d116103415780632f2ff15d1461056857806332a4e01e1461057b57806335a0a9801461058e57806336568abe146105af57600080fd5b8063150b7a02146104e65780631fe75f241461051d578063248a9ca3146105325780632ea8545a1461055557600080fd5b80630b287fc5116103ae5780630b287fc5146104935780630b42cf55146104a65780630b83a727146104be57806310ace2cd146104c657600080fd5b806301ffc9a7146103e05780630373a23a14610408578063078beae51461041d5780630962ef7914610480575b600080fd5b6103f36103ee366004613764565b6109bf565b60405190151581526020015b60405180910390f35b61041b61041636600461371d565b6109f6565b005b61046e61042b36600461371d565b610106602052600090815260409020805460018201546002830154600384015460048501546006909501546001600160a01b039094169492939192909160ff1686565b6040516103ff9695949392919061394c565b61041b61048e36600461371d565b610a08565b61041b6104a1366004613552565b610c49565b6104b06101005481565b6040519081526020016103ff565b61041b610c9b565b6104d96104d436600461327e565b610e1c565b6040516103ff9190613990565b6105046104f43660046132b6565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020016103ff565b61013d546103f390600160a01b900460ff1681565b6104b061054036600461371d565b60009081526065602052604090206001015490565b6104b06105633660046137f9565b610e89565b61041b610576366004613735565b610f1a565b6104b0610589366004613372565b610f45565b6104b061059c36600461327e565b6101046020526000908152604090205481565b61041b6105bd366004613735565b610f77565b61041b610ff1565b6104b06105d836600461371d565b61013e6020526000908152604090205481565b6104b06105f936600461371d565b6101086020526000908152604090205481565b61063661061a36600461371d565b600090815261010660205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020016103ff565b61041b61065c36600461327e565b611178565b6103f361066f366004613552565b6111a8565b61069b61068236600461371d565b6000908152610106602052604090206006015460ff1690565b6040516103ff91906139c9565b61041b6106b636600461371d565b611217565b61041b6106c936600461371d565b61136e565b61041b6106dc3660046133de565b611380565b61041b6106ef366004613620565b61149c565b61041b610702366004613552565b611541565b6104b060fd5481565b61041b61071e3660046133de565b611560565b61041b61073136600461327e565b6116c5565b61041b6107443660046134a1565b6116f4565b60fb54610636906001600160a01b031681565b6104b061076a366004613552565b611742565b60fc54610636906001600160a01b031681565b6103f3610790366004613735565b61179d565b61041b6117c8565b6103f36107ab36600461371d565b6101036020526000908152604090205460ff1681565b6104b0600081565b6104b06107d736600461371d565b611a0b565b6104b06107ea36600461327e565b6101096020526000908152604090205481565b61081061080b36600461371d565b611aae565b6040516103ff9190613b36565b61041b61082b366004613552565b611bb0565b61041b61083e36600461339d565b611c22565b61041b61085136600461371d565b611d62565b61041b610864366004613552565b611d75565b61041b6108773660046136e5565b6121d9565b61041b61088a3660046133de565b612205565b6104b061089d36600461371d565b612319565b61041b6108b036600461371d565b61233a565b61041b6108c336600461378c565b61234d565b6104b06108d636600461327e565b612366565b6108ee6108e936600461371d565b61238d565b60405160ff90911681526020016103ff565b6104b061090e36600461371d565b6123f6565b61041b610921366004613735565b61255e565b6104b06101015481565b61041b61093e36600461371d565b612584565b6104b061287e565b6104b06101025481565b61041b61096336600461371d565b61288f565b6104d961097636600461371d565b6128a2565b61013d54610636906001600160a01b031681565b610997612906565b6040516103ff91906139b6565b61041b612995565b6103f36109ba366004613552565b6129b5565b60006001600160e01b03198216637965db0b60e01b14806109f057506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000610a028133612a95565b5060fd55565b60026097541415610a345760405162461bcd60e51b8152600401610a2b90613aff565b60405180910390fd5b600260975561013d54600160a01b900460ff16610a635760405162461bcd60e51b8152600401610a2b906139d7565b60008181526101066020526040902080546001600160a01b031633811480610a96575061013d546001600160a01b031633145b610af95760405162461bcd60e51b815260206004820152602e60248201527f53686f67756e5374616b696e673a204f6e6c792066616d696c79206f776e657260448201526d2063616e20636c61696d2053484f60901b6064820152608401610a2b565b6000600683015460ff166001811115610b2257634e487b7160e01b600052602160045260246000fd5b14610b825760405162461bcd60e51b815260206004820152602a60248201527f53686f67756e5374616b696e673a20547261696e696e672068617320616c726560448201526961647920656e6465642160b01b6064820152608401610a2b565b6000610b8d846123f6565b60fc546040516340c10f1960e01b81526001600160a01b038581166004830152602482018490529293509116906340c10f1990604401600060405180830381600087803b158015610bdd57600080fd5b505af1158015610bf1573d6000803e3d6000fd5b505042600186018190556040513393507ff01da32686223933d8a18a391060918c7f11a3648639edd87ae013e2e27317439250610c3691858252602082015260400190565b60405180910390a2505060016097555050565b60005b8151811015610c9757610c85828281518110610c7857634e487b7160e01b600052603260045260246000fd5b6020026020010151612584565b80610c8f81613d6e565b915050610c4c565b5050565b60026097541415610cbe5760405162461bcd60e51b8152600401610a2b90613aff565b60026097556000610cce33610e1c565b9050600080805b8351811015610d7357610d18610d11858381518110610d0457634e487b7160e01b600052603260045260246000fd5b60200260200101516123f6565b8490612af9565b92506101066000858381518110610d3f57634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002091504282600101819055508080610d6b90613d6e565b915050610cd5565b5060fc546040516340c10f1960e01b8152336004820152602481018490526001600160a01b03909116906340c10f1990604401600060405180830381600087803b158015610dc057600080fd5b505af1158015610dd4573d6000803e3d6000fd5b5050604080518581524260208201523393507ff01da32686223933d8a18a391060918c7f11a3648639edd87ae013e2e273174392500160405180910390a25050600160975550565b6001600160a01b03811660009081526101076020908152604091829020805483518184028101840190945280845260609392830182828015610e7d57602002820191906000526020600020905b815481526020019060010190808311610e69575b50505050509050919050565b60008115610edc576101005460ff610ea2600186613cbc565b81548110610ec057634e487b7160e01b600052603260045260246000fd5b9060005260206000200154610ed59190613c40565b90506109f0565b60ff610ee9600185613cbc565b81548110610f0757634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b600082815260656020526040902060010154610f368133612a95565b610f408383612b05565b505050565b6101076020528160005260406000208181548110610f6257600080fd5b90600052602060002001600091509150505481565b6001600160a01b0381163314610fe75760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610a2b565b610c978282612b8b565b600260975414156110145760405162461bcd60e51b8152600401610a2b90613aff565b600260975533600090815261010960205260409020548061109d5760405162461bcd60e51b815260206004820152603b60248201527f53686f67756e5374616b696e673a205573657220646f6573206e6f742068617660448201527f6520426f6e75732053484f20546f6b656e7320746f20636c61696d00000000006064820152608401610a2b565b33600081815261010960205260408082209190915560fc54905163a9059cbb60e01b81526004810192909252602482018390526001600160a01b03169063a9059cbb90604401602060405180830381600087803b1580156110fd57600080fd5b505af1158015611111573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111359190613701565b506040805182815242602082015233917f5ffd7ef804cd6362d3defa75e694e044ac287fcac1de8bbb9a21226d02397b83910160405180910390a2506001609755565b60006111848133612a95565b5061013d80546001600160a01b0319166001600160a01b0392909216919091179055565b600160005b825181101561121157600061010860008584815181106111dd57634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000205411156111ff57600091505b8061120981613d6e565b9150506111ad565b50919050565b6002609754141561123a5760405162461bcd60e51b8152600401610a2b90613aff565b600260975560fb546040516331a9108f60e11b81526004810183905233916001600160a01b031690636352211e9060240160206040518083038186803b15801561128357600080fd5b505afa158015611297573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112bb919061329a565b6001600160a01b0316146112e15760405162461bcd60e51b8152600401610a2b90613a1b565b60006112ec82611a0b565b600083815261013e60205260409081902042905560fc5490516340c10f1960e01b8152336004820152602481018390529192506001600160a01b0316906340c10f19906044015b600060405180830381600087803b15801561134d57600080fd5b505af1158015611361573d6000803e3d6000fd5b5050600160975550505050565b600061137a8133612a95565b5060fe55565b600061138c8133612a95565b81518351146113ad5760405162461bcd60e51b8152600401610a2b90613a64565b60005b83518110156114965760fc5484516001600160a01b03909116906340c10f19908690849081106113f057634e487b7160e01b600052603260045260246000fd5b602002602001015185848151811061141857634e487b7160e01b600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b81526004016114519291906001600160a01b03929092168252602082015260400190565b600060405180830381600087803b15801561146b57600080fd5b505af115801561147f573d6000803e3d6000fd5b50505050808061148e90613d6e565b9150506113b0565b50505050565b60006114a88133612a95565b60005b8351811015611496578281815181106114d457634e487b7160e01b600052603260045260246000fd5b6020026020010151610103600086848151811061150157634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002060006101000a81548160ff021916908315150217905550808061153990613d6e565b9150506114ab565b600061154d8133612a95565b8151610f409060ff906020850190613096565b600061156c8133612a95565b815183511461158d5760405162461bcd60e51b8152600401610a2b90613a64565b6000805b845181101561165a578381815181106115ba57634e487b7160e01b600052603260045260246000fd5b602002602001015161010960008784815181106115e757634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208190555083818151811061163357634e487b7160e01b600052603260045260246000fd5b6020026020010151826116469190613c40565b91508061165281613d6e565b915050611591565b5060fc546040516340c10f1960e01b8152306004820152602481018390526001600160a01b03909116906340c10f1990604401600060405180830381600087803b1580156116a757600080fd5b505af11580156116bb573d6000803e3d6000fd5b5050505050505050565b60006116d18133612a95565b5060fc80546001600160a01b0319166001600160a01b0392909216919091179055565b60005b8151811015610c975761173082828151811061172357634e487b7160e01b600052603260045260246000fd5b6020026020010151611d75565b8061173a81613d6e565b9150506116f7565b6000805b82518110156112115761177f83828151811061177257634e487b7160e01b600052603260045260246000fd5b6020026020010151611a0b565b6117899083613c40565b91508061179581613d6e565b915050611746565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600260975414156117eb5760405162461bcd60e51b8152600401610a2b90613aff565b600260975560fb5460405162438b6360e81b81523360048201526000916001600160a01b03169063438b63009060240160006040518083038186803b15801561183357600080fd5b505afa158015611847573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261186f919081019061358d565b90506000805b82518110156119d35760fb54835133916001600160a01b031690636352211e908690859081106118b557634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b81526004016118db91815260200190565b60206040518083038186803b1580156118f357600080fd5b505afa158015611907573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192b919061329a565b6001600160a01b0316146119515760405162461bcd60e51b8152600401610a2b90613a1b565b61197483828151811061177257634e487b7160e01b600052603260045260246000fd5b61197e9083613c40565b91504261013e60008584815181106119a657634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000208190555080806119cb90613d6e565b915050611875565b5060fc546040516340c10f1960e01b8152336004820152602481018390526001600160a01b03909116906340c10f1990604401611333565b600081815261013e6020526040812054636218e0e0811015611a2e5750636218e0e05b6000838152610103602052604090205460ff16151560011415611a825762015180611a598242613cbc565b60fd54611a67906002613c9d565b611a719190613c9d565b611a7b9190613c7d565b9150611211565b62015180611a908242613cbc565b60fd54611a9d9190613c9d565b611aa79190613c7d565b9392505050565b611ab66130e1565b60008281526101066020908152604091829020825160e08101845281546001600160a01b0316815260018201548184015260028201548185015260038201546060820152600482015460808201526005820180548551818602810186019096528086529194929360a08601939290830182828015611b5357602002820191906000526020600020905b815481526020019060010190808311611b3f575b5050509183525050600682015460209091019060ff166001811115611b8857634e487b7160e01b600052602160045260246000fd5b6001811115611ba757634e487b7160e01b600052602160045260246000fd5b90525092915050565b6000611bbc8133612a95565b60fb5460405163665adcfd60e01b81526001600160a01b039091169063665adcfd90611bec908590600401613990565b600060405180830381600087803b158015611c0657600080fd5b505af1158015611c1a573d6000803e3d6000fd5b505050505050565b600054610100900460ff16611c3d5760005460ff1615611c41565b303b155b611ca45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a2b565b600054610100900460ff16158015611cc6576000805461ffff19166101011790555b611cce612bf2565b611cd6612c1b565b611ce1600083612c4a565b60fd83905560fb80546001600160a01b0319166001600160a01b038616179055604080516060810182526127108152612774602082015261283c91810191909152611d309060ff906003613145565b5060c861010055600a61010155610320610102556201518060fe558015611496576000805461ff001916905550505050565b6000611d6e8133612a95565b5061010155565b61013d54600160a01b900460ff16611d9f5760405162461bcd60e51b8152600401610a2b906139d7565b611da8816111a8565b611e1a5760405162461bcd60e51b815260206004820152603760248201527f53686f67756e5374616b696e673a204f6e65206f72204d6f72652073686f677560448201527f6e732061726520616c726561647920747261696e696e670000000000000000006064820152608401610a2b565b611e23816129b5565b611e955760405162461bcd60e51b815260206004820152603860248201527f53686f67756e5374616b696e673a204f6e65206f72204d6f72652073686f677560448201527f6e7320617265206e6f74206f776e656420627920796f752100000000000000006064820152608401610a2b565b600381511115611ef35760405162461bcd60e51b8152602060048201526024808201527f53686f67756e5374616b696e673a204d6178696d756d206f662033205353206f6044820152636e6c792160e01b6064820152608401610a2b565b6000815111611f535760405162461bcd60e51b815260206004820152602660248201527f53686f67756e5374616b696e673a204174206c6561737420312053532072657160448201526575697265642160d01b6064820152608401610a2b565b611f6261010a80546001019055565b60fb546040516302b2de4960e21b81526001600160a01b0390911690630acb792490611f92908490600401613990565b600060405180830381600087803b158015611fac57600080fd5b505af1158015611fc0573d6000803e3d6000fd5b5050505060005b81518110156120265761010a546101086000848481518110611ff957634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002081905550808061201e90613d6e565b915050611fc7565b50600080600061203584612c54565b909350915061204384612de5565b905060006040518060e00160405280336001600160a01b03168152602001428152602001858152602001848152602001838152602001868152602001600060018111156120a057634e487b7160e01b600052602160045260246000fd5b905290508061010660006120b461010a5490565b81526020808201929092526040908101600020835181546001600160a01b0319166001600160a01b03909116178155838301516001820155908301516002820155606083015160038201556080830151600482015560a08301518051919261212492600585019290910190613096565b5060c082015160068201805460ff19166001838181111561215557634e487b7160e01b600052602160045260246000fd5b02179055505033600090815261010760205260409020905061217761010a5490565b81546001810183556000928352602090922090910155337fba68dec919f1691408f54f9ad116b0c62f60dc6702ac8c6a67b166a8cd52d3306121b961010a5490565b87426040516121ca93929190613ba9565b60405180910390a25050505050565b60006121e58133612a95565b5061013d8054911515600160a01b0260ff60a01b19909216919091179055565b60006122118133612a95565b81518351146122815760405162461bcd60e51b815260206004820152603660248201527f53686f67756e5374616b696e673a2055736572206c656e67746820616e6420516044820152750eac2dce8d2e8f240c8decae640dcdee840dac2e8c6d60531b6064820152608401610a2b565b60005b8351811015611496578281815181106122ad57634e487b7160e01b600052603260045260246000fd5b602002602001015161010460008684815181106122da57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550808061231190613d6e565b915050612284565b60ff818154811061232957600080fd5b600091825260209091200154905081565b60006123468133612a95565b5061010255565b60006123598133612a95565b6114966101058484613186565b6001600160a01b03811660009081526101046020526040812054610101546109f091612e62565b600061010561239d600184613cbc565b81546123a890613d39565b81106123c457634e487b7160e01b600052603260045260246000fd5b8154600116156123e35790600052602060002090602091828204019190065b9054600160f81b911a0260f81c92915050565b600081815261010660209081526040808320815160e08101835281546001600160a01b0316815260018201548185015260028201548184015260038201546060820152600482015460808201526005820180548451818702810187019095528085528695929460a08601939092919083018282801561249457602002820191906000526020600020905b815481526020019060010190808311612480575b5050509183525050600682015460209091019060ff1660018111156124c957634e487b7160e01b600052602160045260246000fd5b60018111156124e857634e487b7160e01b600052602160045260246000fd5b815250509050611aa761271061255860fe54612558612526866080015161252088606001518960400151612af990919063ffffffff16565b90612af9565b6125528760a00151516125526125498a6020015142612e6e90919063ffffffff16565b60fd5490612e62565b90612e62565b90612e7a565b60008281526065602052604090206001015461257a8133612a95565b610f408383612b8b565b61013d54600160a01b900460ff166125ae5760405162461bcd60e51b8152600401610a2b906139d7565b600081815261010660205260409020546001600160a01b03163314806125df575061013d546001600160a01b031633145b61263e5760405162461bcd60e51b815260206004820152602a60248201527f53686f67756e5374616b696e673a204e6f7420746865206f776e6572206f66206044820152697468652066616d696c7960b01b6064820152608401610a2b565b6000818152610106602052604081206006015460ff16600181111561267357634e487b7160e01b600052602160045260246000fd5b146126ce5760405162461bcd60e51b815260206004820152602560248201527f53686f67756e5374616b696e673a20547261696e696e6720616c726561647920604482015264115b99195960da1b6064820152608401610a2b565b6126d781610a08565b60fb546000828152610106602052604090819020905163665adcfd60e01b81526001600160a01b039092169163665adcfd9161271b916005909101906004016139a3565b600060405180830381600087803b15801561273557600080fd5b505af1158015612749573d6000803e3d6000fd5b50505060008281526101066020908152604080832060068101805460ff191660011790556005018054825181850281018501909352808352939450909290918301828280156127b757602002820191906000526020600020905b8154815260200190600101908083116127a3575b5050505050905060005b815181101561281e57600061010860008484815181106127f157634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002081905550808061281690613d6e565b9150506127c1565b50336001600160a01b03167fe46c316e0026b6873715afa24fe53e01843fc6a22ecefc596077af4e9edd94cf8361010660008681526020019081526020016000206005014260405161287293929190613bd2565b60405180910390a25050565b600061288a61010a5490565b905090565b600061289b8133612a95565b5061010055565b60008181526101066020908152604091829020600501805483518184028101840190945280845260609392830182828015610e7d5760200282019190600052602060002090815481526020019060010190808311610e695750505050509050919050565b610105805461291490613d39565b80601f016020809104026020016040519081016040528092919081815260200182805461294090613d39565b801561298d5780601f106129625761010080835404028352916020019161298d565b820191906000526020600020905b81548152906001019060200180831161297057829003601f168201915b505050505081565b60006129a18133612a95565b5061013d80546001600160a01b0319169055565b600160005b82518110156112115760fb54835133916001600160a01b031690636352211e908690859081106129fa57634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b8152600401612a2091815260200190565b60206040518083038186803b158015612a3857600080fd5b505afa158015612a4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a70919061329a565b6001600160a01b031614612a8357600091505b80612a8d81613d6e565b9150506129ba565b612a9f828261179d565b610c9757612ab7816001600160a01b03166014612e86565b612ac2836020612e86565b604051602001612ad39291906138d7565b60408051601f198184030181529082905262461bcd60e51b8252610a2b916004016139b6565b6000611aa78284613c40565b612b0f828261179d565b610c975760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055612b473390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b612b95828261179d565b15610c975760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600054610100900460ff16612c195760405162461bcd60e51b8152600401610a2b90613ab4565b565b600054610100900460ff16612c425760405162461bcd60e51b8152600401610a2b90613ab4565b612c19613068565b610c978282612b05565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905281908180805b86518160ff161015612d32576001846001612cde8a8560ff1681518110612cd157634e487b7160e01b600052603260045260246000fd5b602002602001015161238d565b612ce89190613cd3565b60ff1660088110612d0957634e487b7160e01b600052603260045260246000fd5b60200201818151612d1a9190613c58565b60ff1690525080612d2a81613d89565b915050612c9a565b5060005b60088160ff161015612db4578260ff16848260ff1660088110612d6957634e487b7160e01b600052603260045260246000fd5b602002015160ff161115612da257838160ff1660088110612d9a57634e487b7160e01b600052603260045260246000fd5b602002015192505b80612dac81613d89565b915050612d36565b508160ff1660031415612dc5575060015b612dd0865182610e89565b9450612ddb33612366565b9350505050915091565b6000805b8251811015611211576101036000848381518110612e1757634e487b7160e01b600052603260045260246000fd5b60209081029190910181015182528101919091526040016000205460ff16151560011415612e505761010254612e4d9083613c40565b91505b80612e5a81613d6e565b915050612de9565b6000611aa78284613c9d565b6000611aa78284613cbc565b6000611aa78284613c7d565b60606000612e95836002613c9d565b612ea0906002613c40565b67ffffffffffffffff811115612ec657634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612ef0576020820181803683370190505b509050600360fc1b81600081518110612f1957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612f5657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000612f7a846002613c9d565b612f85906001613c40565b90505b6001811115613019576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612fc757634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110612feb57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361301281613d22565b9050612f88565b508315611aa75760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a2b565b600054610100900460ff1661308f5760405162461bcd60e51b8152600401610a2b90613ab4565b6001609755565b8280548282559060005260206000209081019282156130d1579160200282015b828111156130d15782518255916020019190600101906130b6565b506130dd9291506131fa565b5090565b6040518060e0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001606081526020016000600181111561314057634e487b7160e01b600052602160045260246000fd5b905290565b8280548282559060005260206000209081019282156130d1579160200282015b828111156130d1578251829061ffff16905591602001919060010190613165565b82805461319290613d39565b90600052602060002090601f0160209004810192826131b457600085556130d1565b82601f106131cd5782800160ff198235161785556130d1565b828001600101855582156130d1579182015b828111156130d15782358255916020019190600101906131df565b5b808211156130dd57600081556001016131fb565b600082601f83011261321f578081fd5b8135602061323461322f83613c1c565b613beb565b80838252828201915082860187848660051b8901011115613253578586fd5b855b8581101561327157813584529284019290840190600101613255565b5090979650505050505050565b60006020828403121561328f578081fd5b8135611aa781613dd5565b6000602082840312156132ab578081fd5b8151611aa781613dd5565b600080600080608085870312156132cb578283fd5b84356132d681613dd5565b93506020858101356132e781613dd5565b935060408601359250606086013567ffffffffffffffff8082111561330a578384fd5b818801915088601f83011261331d578384fd5b81358181111561332f5761332f613dbf565b613341601f8201601f19168501613beb565b91508082528984828501011115613356578485fd5b8084840185840137810190920192909252939692955090935050565b60008060408385031215613384578182fd5b823561338f81613dd5565b946020939093013593505050565b6000806000606084860312156133b1578081fd5b83356133bc81613dd5565b92506020840135915060408401356133d381613dd5565b809150509250925092565b600080604083850312156133f0578182fd5b823567ffffffffffffffff80821115613407578384fd5b818501915085601f83011261341a578384fd5b8135602061342a61322f83613c1c565b8083825282820191508286018a848660051b8901011115613449578889fd5b8896505b8487101561347457803561346081613dd5565b83526001969096019591830191830161344d565b509650508601359250508082111561348a578283fd5b506134978582860161320f565b9150509250929050565b600060208083850312156134b3578182fd5b823567ffffffffffffffff808211156134ca578384fd5b818501915085601f8301126134dd578384fd5b81356134eb61322f82613c1c565b80828252858201915085850189878560051b880101111561350a578788fd5b875b848110156135435781358681111561352257898afd5b6135308c8a838b010161320f565b855250928701929087019060010161350c565b50909998505050505050505050565b600060208284031215613563578081fd5b813567ffffffffffffffff811115613579578182fd5b6135858482850161320f565b949350505050565b6000602080838503121561359f578182fd5b825167ffffffffffffffff8111156135b5578283fd5b8301601f810185136135c5578283fd5b80516135d361322f82613c1c565b80828252848201915084840188868560051b87010111156135f2578687fd5b8694505b838510156136145780518352600194909401939185019185016135f6565b50979650505050505050565b60008060408385031215613632578182fd5b823567ffffffffffffffff80821115613649578384fd5b6136558683870161320f565b935060209150818501358181111561366b578384fd5b85019050601f8101861361367d578283fd5b803561368b61322f82613c1c565b80828252848201915084840189868560051b87010111156136aa578687fd5b8694505b838510156136d55780356136c181613ded565b8352600194909401939185019185016136ae565b5080955050505050509250929050565b6000602082840312156136f6578081fd5b8135611aa781613ded565b600060208284031215613712578081fd5b8151611aa781613ded565b60006020828403121561372e578081fd5b5035919050565b60008060408385031215613747578182fd5b82359150602083013561375981613dd5565b809150509250929050565b600060208284031215613775578081fd5b81356001600160e01b031981168114611aa7578182fd5b6000806020838503121561379e578182fd5b823567ffffffffffffffff808211156137b5578384fd5b818501915085601f8301126137c8578384fd5b8135818111156137d6578485fd5b8660208285010111156137e7578485fd5b60209290920196919550909350505050565b6000806040838503121561380b578182fd5b82359150602083013561375981613ded565b6000815180845260208085019450808401835b8381101561384c57815187529582019590820190600101613830565b509495945050505050565b6000815480845260208085019450838352808320835b8381101561384c5781548752958201956001918201910161386d565b600081518084526138a1816020860160208601613cf6565b601f01601f19169290920160200192915050565b600281106138d357634e487b7160e01b600052602160045260246000fd5b9052565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161390f816017850160208801613cf6565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613940816028840160208801613cf6565b01602801949350505050565b6001600160a01b03871681526020810186905260408101859052606081018490526080810183905260c0810161398560a08301846138b5565b979650505050505050565b602081526000611aa7602083018461381d565b602081526000611aa76020830184613857565b602081526000611aa76020830184613889565b602081016109f082846138b5565b60208082526024908201527f53686f67756e5374616b696e673a20547261696e696e672069732064697361626040820152636c65642160e01b606082015260800190565b60208082526029908201527f53686f67756e5374616b696e673a20436c61696d616e74206973206e6f7420746040820152686865206f776e65722160b81b606082015260800190565b60208082526030908201527f53686f67756e5374616b696e673a20546f20616e6420616d6f756e74206c656e60408201526f677468206e6f74206d61746368696e6760801b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020815260018060a01b038251166020820152602082015160408201526040820151606082015260608201516080820152608082015160a0820152600060a083015160e060c0840152613b8d61010084018261381d565b905060c0840151613ba160e08501826138b5565b509392505050565b838152606060208201526000613bc2606083018561381d565b9050826040830152949350505050565b838152606060208201526000613bc26060830185613857565b604051601f8201601f1916810167ffffffffffffffff81118282101715613c1457613c14613dbf565b604052919050565b600067ffffffffffffffff821115613c3657613c36613dbf565b5060051b60200190565b60008219821115613c5357613c53613da9565b500190565b600060ff821660ff84168060ff03821115613c7557613c75613da9565b019392505050565b600082613c9857634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615613cb757613cb7613da9565b500290565b600082821015613cce57613cce613da9565b500390565b600060ff821660ff841680821015613ced57613ced613da9565b90039392505050565b60005b83811015613d11578181015183820152602001613cf9565b838111156114965750506000910152565b600081613d3157613d31613da9565b506000190190565b600181811c90821680613d4d57607f821691505b6020821081141561121157634e487b7160e01b600052602260045260246000fd5b6000600019821415613d8257613d82613da9565b5060010190565b600060ff821660ff811415613da057613da0613da9565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114613dea57600080fd5b50565b8015158114613dea57600080fdfea2646970667358221220790bec65a4bce20a7dcd4e4a9c8c34dec6d731ee8ae6695fd704b85944ec173764736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "airdrop(address[],uint256[])": {
        "details": "Airdrop SHO Tokens out of contract"
      },
      "areAvailiable(uint256[])": {
        "details": "Determines if the tokenIds are availiable for training"
      },
      "areOwned(uint256[])": {
        "details": "Determines if the all tokenIds are owned by msg sneder"
      },
      "calculateRewards(uint256)": {
        "details": "Caluclate rewards for given Family Id"
      },
      "claimAllRewards()": {
        "details": "QOL to claim all rewards"
      },
      "claimBonusSHO()": {
        "details": "Lets user claim bonus SHO"
      },
      "claimRewards(uint256)": {
        "details": "Claim SHO reward for given family Id"
      },
      "endMultipleTraining(uint256[])": {
        "details": "Claim tokens and leave train"
      },
      "endTraining(uint256)": {
        "details": "Claim tokens and leave train"
      },
      "getCountMultiplier(uint256,bool)": {
        "details": "Retrieves Count multiplier"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTotalMedallionMultiplier(address)": {
        "details": "Retrieves Rare multiplier"
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setBonusSHO(address[],uint256[])": {
        "details": "Set bonus SHO Tokens to be claimed"
      },
      "startTraining(uint256[])": {
        "details": "Start train"
      },
      "startTrainingMultiple(uint256[][])": {
        "details": "Start Multiple Training Sessions"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "updateGuilds(bytes)": {
        "details": "Storing Guild Metadata as 1 byte hexes on a byte for gas optimization"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "endMultipleTraining(uint256[])": {
        "notice": "End train for SSs. You will stop acumulating SHO."
      },
      "endTraining(uint256)": {
        "notice": "End train for SSs. You will stop acumulating SHO."
      },
      "startTraining(uint256[])": {
        "notice": "Sends SSs (max. 5) on a train, SSs of the same Guild and if rare will get a bonus multiplier!"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 408,
        "contract": "contracts/ShogunStakingV2.sol:ShogunStakingV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 411,
        "contract": "contracts/ShogunStakingV2.sol:ShogunStakingV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 883,
        "contract": "contracts/ShogunStakingV2.sol:ShogunStakingV2",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1204,
        "contract": "contracts/ShogunStakingV2.sol:ShogunStakingV2",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/ShogunStakingV2.sol:ShogunStakingV2",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 327,
        "contract": "contracts/ShogunStakingV2.sol:ShogunStakingV2",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 489,
        "contract": "contracts/ShogunStakingV2.sol:ShogunStakingV2",
        "label": "_status",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 533,
        "contract": "contracts/ShogunStakingV2.sol:ShogunStakingV2",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 598,
        "contract": "contracts/ShogunStakingV2.sol:ShogunStakingV2",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 8041,
        "contract": "contracts/ShogunStakingV2.sol:ShogunStakingV2",
        "label": "SS",
        "offset": 0,
        "slot": "251",
        "type": "t_contract(IShogunNFT)9703"
      },
      {
        "astId": 8044,
        "contract": "contracts/ShogunStakingV2.sol:ShogunStakingV2",
        "label": "SHO",
        "offset": 0,
        "slot": "252",
        "type": "t_contract(IShogunToken)9749"
      },
      {
        "astId": 8046,
        "contract": "contracts/ShogunStakingV2.sol:ShogunStakingV2",
        "label": "baseReward",
        "offset": 0,
        "slot": "253",
        "type": "t_uint256"
      },
      {
        "astId": 8048,
        "contract": "contracts/ShogunStakingV2.sol:ShogunStakingV2",
        "label": "timescale",
        "offset": 0,
        "slot": "254",
        "type": "t_uint256"
      },
      {
        "astId": 8051,
        "contract": "contracts/ShogunStakingV2.sol:ShogunStakingV2",
        "label": "countMultipliers",
        "offset": 0,
        "slot": "255",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 8053,
        "contract": "contracts/ShogunStakingV2.sol:ShogunStakingV2",
        "label": "guildMultiplier",
        "offset": 0,
        "slot": "256",
        "type": "t_uint256"
      },
      {
        "astId": 8055,
        "contract": "contracts/ShogunStakingV2.sol:ShogunStakingV2",
        "label": "medallionMultiplier",
        "offset": 0,
        "slot": "257",
        "type": "t_uint256"
      },
      {
        "astId": 8057,
        "contract": "contracts/ShogunStakingV2.sol:ShogunStakingV2",
        "label": "shogunBonus",
        "offset": 0,
        "slot": "258",
        "type": "t_uint256"
      },
      {
        "astId": 8061,
        "contract": "contracts/ShogunStakingV2.sol:ShogunStakingV2",
        "label": "isLegendarySamurai",
        "offset": 0,
        "slot": "259",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 8065,
        "contract": "contracts/ShogunStakingV2.sol:ShogunStakingV2",
        "label": "medallionCount",
        "offset": 0,
        "slot": "260",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8067,
        "contract": "contracts/ShogunStakingV2.sol:ShogunStakingV2",
        "label": "guilds",
        "offset": 0,
        "slot": "261",
        "type": "t_bytes_storage"
      },
      {
        "astId": 8072,
        "contract": "contracts/ShogunStakingV2.sol:ShogunStakingV2",
        "label": "families",
        "offset": 0,
        "slot": "262",
        "type": "t_mapping(t_uint256,t_struct(Family)8018_storage)"
      },
      {
        "astId": 8077,
        "contract": "contracts/ShogunStakingV2.sol:ShogunStakingV2",
        "label": "userFamilies",
        "offset": 0,
        "slot": "263",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 8081,
        "contract": "contracts/ShogunStakingV2.sol:ShogunStakingV2",
        "label": "onTraining",
        "offset": 0,
        "slot": "264",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 8085,
        "contract": "contracts/ShogunStakingV2.sol:ShogunStakingV2",
        "label": "bonusSHO",
        "offset": 0,
        "slot": "265",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8088,
        "contract": "contracts/ShogunStakingV2.sol:ShogunStakingV2",
        "label": "_familyId",
        "offset": 0,
        "slot": "266",
        "type": "t_struct(Counter)890_storage"
      },
      {
        "astId": 8092,
        "contract": "contracts/ShogunStakingV2.sol:ShogunStakingV2",
        "label": "______gap",
        "offset": 0,
        "slot": "267",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 8094,
        "contract": "contracts/ShogunStakingV2.sol:ShogunStakingV2",
        "label": "unstaker",
        "offset": 0,
        "slot": "317",
        "type": "t_address"
      },
      {
        "astId": 8096,
        "contract": "contracts/ShogunStakingV2.sol:ShogunStakingV2",
        "label": "trainingEnabled",
        "offset": 20,
        "slot": "317",
        "type": "t_bool"
      },
      {
        "astId": 8100,
        "contract": "contracts/ShogunStakingV2.sol:ShogunStakingV2",
        "label": "lastClaim",
        "offset": 0,
        "slot": "318",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IShogunNFT)9703": {
        "encoding": "inplace",
        "label": "contract IShogunNFT",
        "numberOfBytes": "20"
      },
      "t_contract(IShogunToken)9749": {
        "encoding": "inplace",
        "label": "contract IShogunToken",
        "numberOfBytes": "20"
      },
      "t_enum(TrainState)8038": {
        "encoding": "inplace",
        "label": "enum ShogunStakingV2.TrainState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Family)8018_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ShogunStakingV2.Family)",
        "numberOfBytes": "32",
        "value": "t_struct(Family)8018_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Counter)890_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 889,
            "contract": "contracts/ShogunStakingV2.sol:ShogunStakingV2",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Family)8018_storage": {
        "encoding": "inplace",
        "label": "struct ShogunStakingV2.Family",
        "members": [
          {
            "astId": 8003,
            "contract": "contracts/ShogunStakingV2.sol:ShogunStakingV2",
            "label": "familyOwner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8005,
            "contract": "contracts/ShogunStakingV2.sol:ShogunStakingV2",
            "label": "lastClaim",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8007,
            "contract": "contracts/ShogunStakingV2.sol:ShogunStakingV2",
            "label": "guildMultiplier",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8009,
            "contract": "contracts/ShogunStakingV2.sol:ShogunStakingV2",
            "label": "medallionMultiplier",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8011,
            "contract": "contracts/ShogunStakingV2.sol:ShogunStakingV2",
            "label": "shogunBonus",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 8014,
            "contract": "contracts/ShogunStakingV2.sol:ShogunStakingV2",
            "label": "shogunIds",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 8017,
            "contract": "contracts/ShogunStakingV2.sol:ShogunStakingV2",
            "label": "trainState",
            "offset": 0,
            "slot": "6",
            "type": "t_enum(TrainState)8038"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/ShogunStakingV2.sol:ShogunStakingV2",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/ShogunStakingV2.sol:ShogunStakingV2",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}